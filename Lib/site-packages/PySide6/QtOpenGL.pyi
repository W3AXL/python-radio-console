# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2021 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide6.QtOpenGL, except for defaults which are replaced by "...".
"""

# Module `PySide6.QtOpenGL`

from shiboken6 import Shiboken

from typing import Any, List, Optional, overload, Tuple, Union

import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtOpenGL


class QAbstractOpenGLFunctions(Shiboken.Object):

    def __init__(self) -> None: ...

    def initializeOpenGLFunctions(self) -> bool: ...
    def isInitialized(self) -> bool: ...
    def owningContext(self) -> PySide6.QtGui.QOpenGLContext: ...
    def setOwningContext(self, context:PySide6.QtGui.QOpenGLContext) -> None: ...


class QOpenGLBuffer(Shiboken.Object):

    ReadOnly                 : QOpenGLBuffer.Access = ... # 0x88b8
    WriteOnly                : QOpenGLBuffer.Access = ... # 0x88b9
    ReadWrite                : QOpenGLBuffer.Access = ... # 0x88ba
    RangeRead                : QOpenGLBuffer.RangeAccessFlag = ... # 0x1
    RangeWrite               : QOpenGLBuffer.RangeAccessFlag = ... # 0x2
    RangeInvalidate          : QOpenGLBuffer.RangeAccessFlag = ... # 0x4
    RangeInvalidateBuffer    : QOpenGLBuffer.RangeAccessFlag = ... # 0x8
    RangeFlushExplicit       : QOpenGLBuffer.RangeAccessFlag = ... # 0x10
    RangeUnsynchronized      : QOpenGLBuffer.RangeAccessFlag = ... # 0x20
    VertexBuffer             : QOpenGLBuffer.Type = ... # 0x8892
    IndexBuffer              : QOpenGLBuffer.Type = ... # 0x8893
    PixelPackBuffer          : QOpenGLBuffer.Type = ... # 0x88eb
    PixelUnpackBuffer        : QOpenGLBuffer.Type = ... # 0x88ec
    StreamDraw               : QOpenGLBuffer.UsagePattern = ... # 0x88e0
    StreamRead               : QOpenGLBuffer.UsagePattern = ... # 0x88e1
    StreamCopy               : QOpenGLBuffer.UsagePattern = ... # 0x88e2
    StaticDraw               : QOpenGLBuffer.UsagePattern = ... # 0x88e4
    StaticRead               : QOpenGLBuffer.UsagePattern = ... # 0x88e5
    StaticCopy               : QOpenGLBuffer.UsagePattern = ... # 0x88e6
    DynamicDraw              : QOpenGLBuffer.UsagePattern = ... # 0x88e8
    DynamicRead              : QOpenGLBuffer.UsagePattern = ... # 0x88e9
    DynamicCopy              : QOpenGLBuffer.UsagePattern = ... # 0x88ea

    class Access(Shiboken.Enum):

        ReadOnly                 : QOpenGLBuffer.Access = ... # 0x88b8
        WriteOnly                : QOpenGLBuffer.Access = ... # 0x88b9
        ReadWrite                : QOpenGLBuffer.Access = ... # 0x88ba

    class RangeAccessFlag(Shiboken.Enum):

        RangeRead                : QOpenGLBuffer.RangeAccessFlag = ... # 0x1
        RangeWrite               : QOpenGLBuffer.RangeAccessFlag = ... # 0x2
        RangeInvalidate          : QOpenGLBuffer.RangeAccessFlag = ... # 0x4
        RangeInvalidateBuffer    : QOpenGLBuffer.RangeAccessFlag = ... # 0x8
        RangeFlushExplicit       : QOpenGLBuffer.RangeAccessFlag = ... # 0x10
        RangeUnsynchronized      : QOpenGLBuffer.RangeAccessFlag = ... # 0x20

    class RangeAccessFlags(object): ...

    class Type(Shiboken.Enum):

        VertexBuffer             : QOpenGLBuffer.Type = ... # 0x8892
        IndexBuffer              : QOpenGLBuffer.Type = ... # 0x8893
        PixelPackBuffer          : QOpenGLBuffer.Type = ... # 0x88eb
        PixelUnpackBuffer        : QOpenGLBuffer.Type = ... # 0x88ec

    class UsagePattern(Shiboken.Enum):

        StreamDraw               : QOpenGLBuffer.UsagePattern = ... # 0x88e0
        StreamRead               : QOpenGLBuffer.UsagePattern = ... # 0x88e1
        StreamCopy               : QOpenGLBuffer.UsagePattern = ... # 0x88e2
        StaticDraw               : QOpenGLBuffer.UsagePattern = ... # 0x88e4
        StaticRead               : QOpenGLBuffer.UsagePattern = ... # 0x88e5
        StaticCopy               : QOpenGLBuffer.UsagePattern = ... # 0x88e6
        DynamicDraw              : QOpenGLBuffer.UsagePattern = ... # 0x88e8
        DynamicRead              : QOpenGLBuffer.UsagePattern = ... # 0x88e9
        DynamicCopy              : QOpenGLBuffer.UsagePattern = ... # 0x88ea


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other:PySide6.QtOpenGL.QOpenGLBuffer) -> None: ...
    @overload
    def __init__(self, type:PySide6.QtOpenGL.QOpenGLBuffer.Type) -> None: ...

    @overload
    def allocate(self, count:int) -> None: ...
    @overload
    def allocate(self, data:int, count:int) -> None: ...
    def bind(self) -> bool: ...
    def bufferId(self) -> int: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def map(self, access:PySide6.QtOpenGL.QOpenGLBuffer.Access) -> int: ...
    def mapRange(self, offset:int, count:int, access:PySide6.QtOpenGL.QOpenGLBuffer.RangeAccessFlags) -> int: ...
    def read(self, offset:int, data:int, count:int) -> bool: ...
    @overload
    def release(self) -> None: ...
    @overload
    @staticmethod
    def release(type:PySide6.QtOpenGL.QOpenGLBuffer.Type) -> None: ...
    def setUsagePattern(self, value:PySide6.QtOpenGL.QOpenGLBuffer.UsagePattern) -> None: ...
    def size(self) -> int: ...
    def type(self) -> PySide6.QtOpenGL.QOpenGLBuffer.Type: ...
    def unmap(self) -> bool: ...
    def usagePattern(self) -> PySide6.QtOpenGL.QOpenGLBuffer.UsagePattern: ...
    def write(self, offset:int, data:int, count:int) -> None: ...


class QOpenGLDebugLogger(PySide6.QtCore.QObject):

    AsynchronousLogging      : QOpenGLDebugLogger.LoggingMode = ... # 0x0
    SynchronousLogging       : QOpenGLDebugLogger.LoggingMode = ... # 0x1

    class LoggingMode(Shiboken.Enum):

        AsynchronousLogging      : QOpenGLDebugLogger.LoggingMode = ... # 0x0
        SynchronousLogging       : QOpenGLDebugLogger.LoggingMode = ... # 0x1


    def __init__(self, parent:Optional[PySide6.QtCore.QObject]=...) -> None: ...

    @overload
    def disableMessages(self, ids:Sequence[int], sources:PySide6.QtOpenGL.QOpenGLDebugMessage.Sources=..., types:PySide6.QtOpenGL.QOpenGLDebugMessage.Types=...) -> None: ...
    @overload
    def disableMessages(self, sources:PySide6.QtOpenGL.QOpenGLDebugMessage.Sources=..., types:PySide6.QtOpenGL.QOpenGLDebugMessage.Types=..., severities:PySide6.QtOpenGL.QOpenGLDebugMessage.Severities=...) -> None: ...
    @overload
    def enableMessages(self, ids:Sequence[int], sources:PySide6.QtOpenGL.QOpenGLDebugMessage.Sources=..., types:PySide6.QtOpenGL.QOpenGLDebugMessage.Types=...) -> None: ...
    @overload
    def enableMessages(self, sources:PySide6.QtOpenGL.QOpenGLDebugMessage.Sources=..., types:PySide6.QtOpenGL.QOpenGLDebugMessage.Types=..., severities:PySide6.QtOpenGL.QOpenGLDebugMessage.Severities=...) -> None: ...
    def initialize(self) -> bool: ...
    def isLogging(self) -> bool: ...
    def logMessage(self, debugMessage:PySide6.QtOpenGL.QOpenGLDebugMessage) -> None: ...
    def loggedMessages(self) -> List[PySide6.QtOpenGL.QOpenGLDebugMessage]: ...
    def loggingMode(self) -> PySide6.QtOpenGL.QOpenGLDebugLogger.LoggingMode: ...
    def maximumMessageLength(self) -> int: ...
    def popGroup(self) -> None: ...
    def pushGroup(self, name:str, id:int=..., source:PySide6.QtOpenGL.QOpenGLDebugMessage.Source=...) -> None: ...
    def startLogging(self, loggingMode:PySide6.QtOpenGL.QOpenGLDebugLogger.LoggingMode=...) -> None: ...
    def stopLogging(self) -> None: ...


class QOpenGLDebugMessage(Shiboken.Object):

    AnySeverity              : QOpenGLDebugMessage.Severity = ... # -0x1
    InvalidSeverity          : QOpenGLDebugMessage.Severity = ... # 0x0
    HighSeverity             : QOpenGLDebugMessage.Severity = ... # 0x1
    MediumSeverity           : QOpenGLDebugMessage.Severity = ... # 0x2
    LowSeverity              : QOpenGLDebugMessage.Severity = ... # 0x4
    LastSeverity             : QOpenGLDebugMessage.Severity = ... # 0x8
    NotificationSeverity     : QOpenGLDebugMessage.Severity = ... # 0x8
    AnySource                : QOpenGLDebugMessage.Source = ... # -0x1
    InvalidSource            : QOpenGLDebugMessage.Source = ... # 0x0
    APISource                : QOpenGLDebugMessage.Source = ... # 0x1
    WindowSystemSource       : QOpenGLDebugMessage.Source = ... # 0x2
    ShaderCompilerSource     : QOpenGLDebugMessage.Source = ... # 0x4
    ThirdPartySource         : QOpenGLDebugMessage.Source = ... # 0x8
    ApplicationSource        : QOpenGLDebugMessage.Source = ... # 0x10
    LastSource               : QOpenGLDebugMessage.Source = ... # 0x20
    OtherSource              : QOpenGLDebugMessage.Source = ... # 0x20
    AnyType                  : QOpenGLDebugMessage.Type = ... # -0x1
    InvalidType              : QOpenGLDebugMessage.Type = ... # 0x0
    ErrorType                : QOpenGLDebugMessage.Type = ... # 0x1
    DeprecatedBehaviorType   : QOpenGLDebugMessage.Type = ... # 0x2
    UndefinedBehaviorType    : QOpenGLDebugMessage.Type = ... # 0x4
    PortabilityType          : QOpenGLDebugMessage.Type = ... # 0x8
    PerformanceType          : QOpenGLDebugMessage.Type = ... # 0x10
    OtherType                : QOpenGLDebugMessage.Type = ... # 0x20
    MarkerType               : QOpenGLDebugMessage.Type = ... # 0x40
    GroupPushType            : QOpenGLDebugMessage.Type = ... # 0x80
    GroupPopType             : QOpenGLDebugMessage.Type = ... # 0x100
    LastType                 : QOpenGLDebugMessage.Type = ... # 0x100

    class Severities(object): ...

    class Severity(Shiboken.Enum):

        AnySeverity              : QOpenGLDebugMessage.Severity = ... # -0x1
        InvalidSeverity          : QOpenGLDebugMessage.Severity = ... # 0x0
        HighSeverity             : QOpenGLDebugMessage.Severity = ... # 0x1
        MediumSeverity           : QOpenGLDebugMessage.Severity = ... # 0x2
        LowSeverity              : QOpenGLDebugMessage.Severity = ... # 0x4
        LastSeverity             : QOpenGLDebugMessage.Severity = ... # 0x8
        NotificationSeverity     : QOpenGLDebugMessage.Severity = ... # 0x8

    class Source(Shiboken.Enum):

        AnySource                : QOpenGLDebugMessage.Source = ... # -0x1
        InvalidSource            : QOpenGLDebugMessage.Source = ... # 0x0
        APISource                : QOpenGLDebugMessage.Source = ... # 0x1
        WindowSystemSource       : QOpenGLDebugMessage.Source = ... # 0x2
        ShaderCompilerSource     : QOpenGLDebugMessage.Source = ... # 0x4
        ThirdPartySource         : QOpenGLDebugMessage.Source = ... # 0x8
        ApplicationSource        : QOpenGLDebugMessage.Source = ... # 0x10
        LastSource               : QOpenGLDebugMessage.Source = ... # 0x20
        OtherSource              : QOpenGLDebugMessage.Source = ... # 0x20

    class Sources(object): ...

    class Type(Shiboken.Enum):

        AnyType                  : QOpenGLDebugMessage.Type = ... # -0x1
        InvalidType              : QOpenGLDebugMessage.Type = ... # 0x0
        ErrorType                : QOpenGLDebugMessage.Type = ... # 0x1
        DeprecatedBehaviorType   : QOpenGLDebugMessage.Type = ... # 0x2
        UndefinedBehaviorType    : QOpenGLDebugMessage.Type = ... # 0x4
        PortabilityType          : QOpenGLDebugMessage.Type = ... # 0x8
        PerformanceType          : QOpenGLDebugMessage.Type = ... # 0x10
        OtherType                : QOpenGLDebugMessage.Type = ... # 0x20
        MarkerType               : QOpenGLDebugMessage.Type = ... # 0x40
        GroupPushType            : QOpenGLDebugMessage.Type = ... # 0x80
        GroupPopType             : QOpenGLDebugMessage.Type = ... # 0x100
        LastType                 : QOpenGLDebugMessage.Type = ... # 0x100

    class Types(object): ...


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, debugMessage:PySide6.QtOpenGL.QOpenGLDebugMessage) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def createApplicationMessage(text:str, id:int=..., severity:PySide6.QtOpenGL.QOpenGLDebugMessage.Severity=..., type:PySide6.QtOpenGL.QOpenGLDebugMessage.Type=...) -> PySide6.QtOpenGL.QOpenGLDebugMessage: ...
    @staticmethod
    def createThirdPartyMessage(text:str, id:int=..., severity:PySide6.QtOpenGL.QOpenGLDebugMessage.Severity=..., type:PySide6.QtOpenGL.QOpenGLDebugMessage.Type=...) -> PySide6.QtOpenGL.QOpenGLDebugMessage: ...
    def id(self) -> int: ...
    def message(self) -> str: ...
    def severity(self) -> PySide6.QtOpenGL.QOpenGLDebugMessage.Severity: ...
    def source(self) -> PySide6.QtOpenGL.QOpenGLDebugMessage.Source: ...
    def swap(self, other:PySide6.QtOpenGL.QOpenGLDebugMessage) -> None: ...
    def type(self) -> PySide6.QtOpenGL.QOpenGLDebugMessage.Type: ...


class QOpenGLFramebufferObject(Shiboken.Object):

    NoAttachment             : QOpenGLFramebufferObject.Attachment = ... # 0x0
    CombinedDepthStencil     : QOpenGLFramebufferObject.Attachment = ... # 0x1
    Depth                    : QOpenGLFramebufferObject.Attachment = ... # 0x2
    DontRestoreFramebufferBinding: QOpenGLFramebufferObject.FramebufferRestorePolicy = ... # 0x0
    RestoreFramebufferBindingToDefault: QOpenGLFramebufferObject.FramebufferRestorePolicy = ... # 0x1
    RestoreFrameBufferBinding: QOpenGLFramebufferObject.FramebufferRestorePolicy = ... # 0x2

    class Attachment(Shiboken.Enum):

        NoAttachment             : QOpenGLFramebufferObject.Attachment = ... # 0x0
        CombinedDepthStencil     : QOpenGLFramebufferObject.Attachment = ... # 0x1
        Depth                    : QOpenGLFramebufferObject.Attachment = ... # 0x2

    class FramebufferRestorePolicy(Shiboken.Enum):

        DontRestoreFramebufferBinding: QOpenGLFramebufferObject.FramebufferRestorePolicy = ... # 0x0
        RestoreFramebufferBindingToDefault: QOpenGLFramebufferObject.FramebufferRestorePolicy = ... # 0x1
        RestoreFrameBufferBinding: QOpenGLFramebufferObject.FramebufferRestorePolicy = ... # 0x2


    @overload
    def __init__(self, size:PySide6.QtCore.QSize, attachment:PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment, target:int=..., internalFormat:int=...) -> None: ...
    @overload
    def __init__(self, size:PySide6.QtCore.QSize, format:PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat) -> None: ...
    @overload
    def __init__(self, size:PySide6.QtCore.QSize, target:int=...) -> None: ...
    @overload
    def __init__(self, width:int, height:int, attachment:PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment, target:int=..., internalFormat:int=...) -> None: ...
    @overload
    def __init__(self, width:int, height:int, format:PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat) -> None: ...
    @overload
    def __init__(self, width:int, height:int, target:int=...) -> None: ...

    @overload
    def addColorAttachment(self, size:PySide6.QtCore.QSize, internalFormat:int=...) -> None: ...
    @overload
    def addColorAttachment(self, width:int, height:int, internalFormat:int=...) -> None: ...
    def attachment(self) -> PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment: ...
    def bind(self) -> bool: ...
    @staticmethod
    def bindDefault() -> bool: ...
    @overload
    @staticmethod
    def blitFramebuffer(target:PySide6.QtOpenGL.QOpenGLFramebufferObject, source:PySide6.QtOpenGL.QOpenGLFramebufferObject, buffers:int=..., filter:int=...) -> None: ...
    @overload
    @staticmethod
    def blitFramebuffer(target:PySide6.QtOpenGL.QOpenGLFramebufferObject, targetRect:PySide6.QtCore.QRect, source:PySide6.QtOpenGL.QOpenGLFramebufferObject, sourceRect:PySide6.QtCore.QRect, buffers:int, filter:int, readColorAttachmentIndex:int, drawColorAttachmentIndex:int) -> None: ...
    @overload
    @staticmethod
    def blitFramebuffer(target:PySide6.QtOpenGL.QOpenGLFramebufferObject, targetRect:PySide6.QtCore.QRect, source:PySide6.QtOpenGL.QOpenGLFramebufferObject, sourceRect:PySide6.QtCore.QRect, buffers:int, filter:int, readColorAttachmentIndex:int, drawColorAttachmentIndex:int, restorePolicy:PySide6.QtOpenGL.QOpenGLFramebufferObject.FramebufferRestorePolicy) -> None: ...
    @overload
    @staticmethod
    def blitFramebuffer(target:PySide6.QtOpenGL.QOpenGLFramebufferObject, targetRect:PySide6.QtCore.QRect, source:PySide6.QtOpenGL.QOpenGLFramebufferObject, sourceRect:PySide6.QtCore.QRect, buffers:int=..., filter:int=...) -> None: ...
    def format(self) -> PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat: ...
    def handle(self) -> int: ...
    @staticmethod
    def hasOpenGLFramebufferBlit() -> bool: ...
    @staticmethod
    def hasOpenGLFramebufferObjects() -> bool: ...
    def height(self) -> int: ...
    def isBound(self) -> bool: ...
    def isValid(self) -> bool: ...
    def release(self) -> bool: ...
    def setAttachment(self, attachment:PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment) -> None: ...
    def size(self) -> PySide6.QtCore.QSize: ...
    def sizes(self) -> List[PySide6.QtCore.QSize]: ...
    @overload
    def takeTexture(self) -> int: ...
    @overload
    def takeTexture(self, colorAttachmentIndex:int) -> int: ...
    def texture(self) -> int: ...
    def textures(self) -> List[int]: ...
    @overload
    def toImage(self, flipped:bool, colorAttachmentIndex:int) -> PySide6.QtGui.QImage: ...
    @overload
    def toImage(self, flipped:bool=...) -> PySide6.QtGui.QImage: ...
    def width(self) -> int: ...


class QOpenGLFramebufferObjectFormat(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other:PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def attachment(self) -> PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment: ...
    def internalTextureFormat(self) -> int: ...
    def mipmap(self) -> bool: ...
    def samples(self) -> int: ...
    def setAttachment(self, attachment:PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment) -> None: ...
    def setInternalTextureFormat(self, internalTextureFormat:int) -> None: ...
    def setMipmap(self, enabled:bool) -> None: ...
    def setSamples(self, samples:int) -> None: ...
    def setTextureTarget(self, target:int) -> None: ...
    def textureTarget(self) -> int: ...


class QOpenGLFunctions_1_0(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glInitNames(self) -> None: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_1_1(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_1_2(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_1_3(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_1_4(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_1_5(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_2_0(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_2_1(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_3_0(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_3_1(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_3_2_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_3_2_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_3_3_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_3_3_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_0_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_0_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_1_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_1_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_2_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_2_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_3_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferData(self, target:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyImageSubData(self, srcName:int, srcTarget:int, srcLevel:int, srcX:int, srcY:int, srcZ:int, dstName:int, dstTarget:int, dstLevel:int, dstX:int, dstY:int, dstZ:int, srcWidth:int, srcHeight:int, srcDepth:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDispatchCompute(self, num_groups_x:int, num_groups_y:int, num_groups_z:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetProgramResourceIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocation(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocationIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glInvalidateBufferData(self, buffer:int) -> None: ...
    def glInvalidateFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateSubFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateTexImage(self, texture:int, level:int) -> None: ...
    def glInvalidateTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiDrawArraysIndirect(self, mode:int, indirect:int, drawcount:int, stride:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glShaderStorageBlockBinding(self, program:int, storageBlockIndex:int, storageBlockBinding:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexStorage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureView(self, texture:int, target:int, origtexture:int, internalformat:int, minlevel:int, numlevels:int, minlayer:int, numlayers:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribBinding(self, attribindex:int, bindingindex:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribFormat(self, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex:int, divisor:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_3_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferData(self, target:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyImageSubData(self, srcName:int, srcTarget:int, srcLevel:int, srcX:int, srcY:int, srcZ:int, dstName:int, dstTarget:int, dstLevel:int, dstX:int, dstY:int, dstZ:int, srcWidth:int, srcHeight:int, srcDepth:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDispatchCompute(self, num_groups_x:int, num_groups_y:int, num_groups_z:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, mode:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetProgramResourceIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocation(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocationIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glInvalidateBufferData(self, buffer:int) -> None: ...
    def glInvalidateFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateSubFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateTexImage(self, texture:int, level:int) -> None: ...
    def glInvalidateTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiDrawArraysIndirect(self, mode:int, indirect:int, drawcount:int, stride:int) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, mode:int) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, index:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glShaderStorageBlockBinding(self, program:int, storageBlockIndex:int, storageBlockBinding:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexStorage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureView(self, texture:int, target:int, origtexture:int, internalformat:int, minlevel:int, numlevels:int, minlayer:int, numlayers:int) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertexAttribBinding(self, attribindex:int, bindingindex:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribFormat(self, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexAttribIFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex:int, divisor:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_4_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindBuffersBase(self, target:int, first:int, count:int, buffers:Sequence[int]) -> None: ...
    def glBindBuffersRange(self, target:int, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindImageTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindSamplers(self, first:int, count:int, samplers:Sequence[int]) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBindVertexBuffers(self, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferData(self, target:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClearTexImage(self, texture:int, level:int, format:int, type:int, data:int) -> None: ...
    def glClearTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, data:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyImageSubData(self, srcName:int, srcTarget:int, srcLevel:int, srcX:int, srcY:int, srcZ:int, dstName:int, dstTarget:int, dstLevel:int, dstX:int, dstY:int, dstZ:int, srcWidth:int, srcHeight:int, srcDepth:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDebugMessageControl(self, source:int, type:int, severity:int, count:int, ids:Sequence[int], enabled:int) -> None: ...
    def glDebugMessageInsert(self, source:int, type:int, id:int, severity:int, length:int, buf:bytes) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDispatchCompute(self, num_groups_x:int, num_groups_y:int, num_groups_z:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, buf:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetColorTable(self, target:int, format:int, type:int, table:int) -> None: ...
    def glGetCompressedTexImage(self, target:int, level:int, img:int) -> None: ...
    def glGetConvolutionFilter(self, target:int, format:int, type:int, image:int) -> None: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetHistogram(self, target:int, reset:int, format:int, type:int, values:int) -> None: ...
    def glGetMinmax(self, target:int, reset:int, format:int, type:int, values:int) -> None: ...
    def glGetProgramResourceIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocation(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocationIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetSeparableFilter(self, target:int, format:int, type:int, row:int, column:int, span:int) -> None: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetTexImage(self, target:int, level:int, format:int, type:int, pixels:int) -> None: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glInvalidateBufferData(self, buffer:int) -> None: ...
    def glInvalidateFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateSubFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateTexImage(self, texture:int, level:int) -> None: ...
    def glInvalidateTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiDrawArraysIndirect(self, mode:int, indirect:int, drawcount:int, stride:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glObjectLabel(self, identifier:int, name:int, length:int, label:bytes) -> None: ...
    def glObjectPtrLabel(self, ptr:int, length:int, label:bytes) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopDebugGroup(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushDebugGroup(self, source:int, id:int, length:int, message:bytes) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, src:int) -> None: ...
    def glReadPixels(self, x:int, y:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, maskNumber:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glShaderStorageBlockBinding(self, program:int, storageBlockIndex:int, storageBlockBinding:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexStorage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureView(self, texture:int, target:int, origtexture:int, internalformat:int, minlevel:int, numlevels:int, minlayer:int, numlayers:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribBinding(self, attribindex:int, bindingindex:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribFormat(self, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex:int, divisor:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_4_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindBuffersBase(self, target:int, first:int, count:int, buffers:Sequence[int]) -> None: ...
    def glBindBuffersRange(self, target:int, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindImageTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindSamplers(self, first:int, count:int, samplers:Sequence[int]) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBindVertexBuffers(self, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferData(self, target:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClearTexImage(self, texture:int, level:int, format:int, type:int, data:int) -> None: ...
    def glClearTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, data:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyImageSubData(self, srcName:int, srcTarget:int, srcLevel:int, srcX:int, srcY:int, srcZ:int, dstName:int, dstTarget:int, dstLevel:int, dstX:int, dstY:int, dstZ:int, srcWidth:int, srcHeight:int, srcDepth:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDebugMessageControl(self, source:int, type:int, severity:int, count:int, ids:Sequence[int], enabled:int) -> None: ...
    def glDebugMessageInsert(self, source:int, type:int, id:int, severity:int, length:int, buf:bytes) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDispatchCompute(self, num_groups_x:int, num_groups_y:int, num_groups_z:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, buf:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetCompressedTexImage(self, target:int, level:int, img:int) -> None: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetProgramResourceIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocation(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocationIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetTexImage(self, target:int, level:int, format:int, type:int, pixels:int) -> None: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glInvalidateBufferData(self, buffer:int) -> None: ...
    def glInvalidateFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateSubFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateTexImage(self, texture:int, level:int) -> None: ...
    def glInvalidateTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiDrawArraysIndirect(self, mode:int, indirect:int, drawcount:int, stride:int) -> None: ...
    def glObjectLabel(self, identifier:int, name:int, length:int, label:bytes) -> None: ...
    def glObjectPtrLabel(self, ptr:int, length:int, label:bytes) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopDebugGroup(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushDebugGroup(self, source:int, id:int, length:int, message:bytes) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, src:int) -> None: ...
    def glReadPixels(self, x:int, y:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, maskNumber:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glShaderStorageBlockBinding(self, program:int, storageBlockIndex:int, storageBlockBinding:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexStorage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureView(self, texture:int, target:int, origtexture:int, internalformat:int, minlevel:int, numlevels:int, minlayer:int, numlayers:int) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribBinding(self, attribindex:int, bindingindex:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribFormat(self, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex:int, divisor:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_5_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glAccum(self, op:int, value:float) -> None: ...
    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAlphaFunc(self, func:int, ref:float) -> None: ...
    def glArrayElement(self, i:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBegin(self, mode:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindBuffersBase(self, target:int, first:int, count:int, buffers:Sequence[int]) -> None: ...
    def glBindBuffersRange(self, target:int, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindImageTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindSamplers(self, first:int, count:int, samplers:Sequence[int]) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTextureUnit(self, unit:int, texture:int) -> None: ...
    def glBindTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBindVertexBuffers(self, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glBlitNamedFramebuffer(self, readFramebuffer:int, drawFramebuffer:int, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCallList(self, list:int) -> None: ...
    def glCallLists(self, n:int, type:int, lists:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glCheckNamedFramebufferStatus(self, framebuffer:int, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearAccum(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearBufferData(self, target:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearIndex(self, c:float) -> None: ...
    def glClearNamedBufferData(self, buffer:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearNamedFramebufferfi(self, framebuffer:int, buffer:int, depth:float, stencil:int) -> None: ...
    def glClearNamedFramebufferfv(self, framebuffer:int, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearNamedFramebufferiv(self, framebuffer:int, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearNamedFramebufferuiv(self, framebuffer:int, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClearTexImage(self, texture:int, level:int, format:int, type:int, data:int) -> None: ...
    def glClearTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, data:int) -> None: ...
    def glClientActiveTexture(self, texture:int) -> None: ...
    def glClipControl(self, origin:int, depth:int) -> None: ...
    def glClipPlane(self, plane:int, equation:Sequence[float]) -> None: ...
    def glColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glColor3bv(self, v:bytes) -> None: ...
    def glColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glColor3dv(self, v:Sequence[float]) -> None: ...
    def glColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glColor3fv(self, v:Sequence[float]) -> None: ...
    def glColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glColor3iv(self, v:Sequence[int]) -> None: ...
    def glColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glColor3sv(self, v:Sequence[int]) -> None: ...
    def glColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glColor3ubv(self, v:bytes) -> None: ...
    def glColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glColor3uiv(self, v:Sequence[int]) -> None: ...
    def glColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glColor3usv(self, v:Sequence[int]) -> None: ...
    def glColor4b(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4bv(self, v:bytes) -> None: ...
    def glColor4d(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4dv(self, v:Sequence[float]) -> None: ...
    def glColor4f(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glColor4fv(self, v:Sequence[float]) -> None: ...
    def glColor4i(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4iv(self, v:Sequence[int]) -> None: ...
    def glColor4s(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4sv(self, v:Sequence[int]) -> None: ...
    def glColor4ub(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4ubv(self, v:bytes) -> None: ...
    def glColor4ui(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4uiv(self, v:Sequence[int]) -> None: ...
    def glColor4us(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColor4usv(self, v:Sequence[int]) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glColorMaterial(self, face:int, mode:int) -> None: ...
    def glColorP3ui(self, type:int, color:int) -> None: ...
    def glColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorP4ui(self, type:int, color:int) -> None: ...
    def glColorP4uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glColorSubTable(self, target:int, start:int, count:int, format:int, type:int, data:int) -> None: ...
    def glColorTable(self, target:int, internalformat:int, width:int, format:int, type:int, table:int) -> None: ...
    def glColorTableParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glColorTableParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTextureSubImage1D(self, texture:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTextureSubImage2D(self, texture:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTextureSubImage3D(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glConvolutionFilter1D(self, target:int, internalformat:int, width:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, image:int) -> None: ...
    def glConvolutionParameterf(self, target:int, pname:int, params:float) -> None: ...
    def glConvolutionParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glConvolutionParameteri(self, target:int, pname:int, params:int) -> None: ...
    def glConvolutionParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glCopyColorSubTable(self, target:int, start:int, x:int, y:int, width:int) -> None: ...
    def glCopyColorTable(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter1D(self, target:int, internalformat:int, x:int, y:int, width:int) -> None: ...
    def glCopyConvolutionFilter2D(self, target:int, internalformat:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyImageSubData(self, srcName:int, srcTarget:int, srcLevel:int, srcX:int, srcY:int, srcZ:int, dstName:int, dstTarget:int, dstLevel:int, dstX:int, dstY:int, dstZ:int, srcWidth:int, srcHeight:int, srcDepth:int) -> None: ...
    def glCopyPixels(self, x:int, y:int, width:int, height:int, type:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTextureSubImage1D(self, texture:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTextureSubImage2D(self, texture:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTextureSubImage3D(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDebugMessageControl(self, source:int, type:int, severity:int, count:int, ids:Sequence[int], enabled:int) -> None: ...
    def glDebugMessageInsert(self, source:int, type:int, id:int, severity:int, length:int, buf:bytes) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteLists(self, list:int, range:int) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableClientState(self, array:int) -> None: ...
    def glDisableVertexArrayAttrib(self, vaobj:int, index:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDispatchCompute(self, num_groups_x:int, num_groups_y:int, num_groups_z:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, buf:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawPixels(self, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEdgeFlag(self, flag:int) -> None: ...
    def glEdgeFlagPointer(self, stride:int, pointer:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableClientState(self, array:int) -> None: ...
    def glEnableVertexArrayAttrib(self, vaobj:int, index:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEnd(self) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndList(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glEvalCoord1d(self, u:float) -> None: ...
    def glEvalCoord1dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord1f(self, u:float) -> None: ...
    def glEvalCoord1fv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2d(self, u:float, v:float) -> None: ...
    def glEvalCoord2dv(self, u:Sequence[float]) -> None: ...
    def glEvalCoord2f(self, u:float, v:float) -> None: ...
    def glEvalCoord2fv(self, u:Sequence[float]) -> None: ...
    def glEvalMesh1(self, mode:int, i1:int, i2:int) -> None: ...
    def glEvalMesh2(self, mode:int, i1:int, i2:int, j1:int, j2:int) -> None: ...
    def glEvalPoint1(self, i:int) -> None: ...
    def glEvalPoint2(self, i:int, j:int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFogCoordPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glFogCoordd(self, coord:float) -> None: ...
    def glFogCoorddv(self, coord:Sequence[float]) -> None: ...
    def glFogCoordf(self, coord:float) -> None: ...
    def glFogCoordfv(self, coord:Sequence[float]) -> None: ...
    def glFogf(self, pname:int, param:float) -> None: ...
    def glFogfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glFogi(self, pname:int, param:int) -> None: ...
    def glFogiv(self, pname:int, params:Sequence[int]) -> None: ...
    def glFramebufferParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glFrustum(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glGenLists(self, range:int) -> int: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGenerateTextureMipmap(self, texture:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetColorTable(self, target:int, format:int, type:int, table:int) -> None: ...
    def glGetCompressedTexImage(self, target:int, level:int, img:int) -> None: ...
    def glGetCompressedTextureImage(self, texture:int, level:int, bufSize:int, pixels:int) -> None: ...
    def glGetCompressedTextureSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, bufSize:int, pixels:int) -> None: ...
    def glGetConvolutionFilter(self, target:int, format:int, type:int, image:int) -> None: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetGraphicsResetStatus(self) -> int: ...
    def glGetHistogram(self, target:int, reset:int, format:int, type:int, values:int) -> None: ...
    def glGetMinmax(self, target:int, reset:int, format:int, type:int, values:int) -> None: ...
    def glGetProgramResourceIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocation(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocationIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetSeparableFilter(self, target:int, format:int, type:int, row:int, column:int, span:int) -> None: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetTexImage(self, target:int, level:int, format:int, type:int, pixels:int) -> None: ...
    def glGetTextureImage(self, texture:int, level:int, format:int, type:int, bufSize:int, pixels:int) -> None: ...
    def glGetTextureSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, bufSize:int, pixels:int) -> None: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glGetnColorTable(self, target:int, format:int, type:int, bufSize:int, table:int) -> None: ...
    def glGetnCompressedTexImage(self, target:int, lod:int, bufSize:int, pixels:int) -> None: ...
    def glGetnConvolutionFilter(self, target:int, format:int, type:int, bufSize:int, image:int) -> None: ...
    def glGetnHistogram(self, target:int, reset:int, format:int, type:int, bufSize:int, values:int) -> None: ...
    def glGetnMinmax(self, target:int, reset:int, format:int, type:int, bufSize:int, values:int) -> None: ...
    def glGetnSeparableFilter(self, target:int, format:int, type:int, rowBufSize:int, row:int, columnBufSize:int, column:int, span:int) -> None: ...
    def glGetnTexImage(self, target:int, level:int, format:int, type:int, bufSize:int, pixels:int) -> None: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glHistogram(self, target:int, width:int, internalformat:int, sink:int) -> None: ...
    def glIndexMask(self, mask:int) -> None: ...
    def glIndexPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glIndexd(self, c:float) -> None: ...
    def glIndexdv(self, c:Sequence[float]) -> None: ...
    def glIndexf(self, c:float) -> None: ...
    def glIndexfv(self, c:Sequence[float]) -> None: ...
    def glIndexi(self, c:int) -> None: ...
    def glIndexiv(self, c:Sequence[int]) -> None: ...
    def glIndexs(self, c:int) -> None: ...
    def glIndexsv(self, c:Sequence[int]) -> None: ...
    def glIndexub(self, c:int) -> None: ...
    def glIndexubv(self, c:bytes) -> None: ...
    def glInitNames(self) -> None: ...
    def glInterleavedArrays(self, format:int, stride:int, pointer:int) -> None: ...
    def glInvalidateBufferData(self, buffer:int) -> None: ...
    def glInvalidateFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateNamedFramebufferData(self, framebuffer:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateNamedFramebufferSubData(self, framebuffer:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateSubFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateTexImage(self, texture:int, level:int) -> None: ...
    def glInvalidateTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsList(self, list:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLightModelf(self, pname:int, param:float) -> None: ...
    def glLightModelfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glLightModeli(self, pname:int, param:int) -> None: ...
    def glLightModeliv(self, pname:int, params:Sequence[int]) -> None: ...
    def glLightf(self, light:int, pname:int, param:float) -> None: ...
    def glLightfv(self, light:int, pname:int, params:Sequence[float]) -> None: ...
    def glLighti(self, light:int, pname:int, param:int) -> None: ...
    def glLightiv(self, light:int, pname:int, params:Sequence[int]) -> None: ...
    def glLineStipple(self, factor:int, pattern:int) -> None: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glListBase(self, base:int) -> None: ...
    def glLoadIdentity(self) -> None: ...
    def glLoadMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadMatrixf(self, m:Sequence[float]) -> None: ...
    def glLoadName(self, name:int) -> None: ...
    def glLoadTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glLoadTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMap1d(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap1f(self, target:int, u1:float, u2:float, stride:int, order:int, points:Sequence[float]) -> None: ...
    def glMap2d(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMap2f(self, target:int, u1:float, u2:float, ustride:int, uorder:int, v1:float, v2:float, vstride:int, vorder:int, points:Sequence[float]) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapGrid1d(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid1f(self, un:int, u1:float, u2:float) -> None: ...
    def glMapGrid2d(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapGrid2f(self, un:int, u1:float, u2:float, vn:int, v1:float, v2:float) -> None: ...
    def glMapNamedBuffer(self, buffer:int, access:int) -> int: ...
    def glMaterialf(self, face:int, pname:int, param:float) -> None: ...
    def glMaterialfv(self, face:int, pname:int, params:Sequence[float]) -> None: ...
    def glMateriali(self, face:int, pname:int, param:int) -> None: ...
    def glMaterialiv(self, face:int, pname:int, params:Sequence[int]) -> None: ...
    def glMatrixMode(self, mode:int) -> None: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMemoryBarrierByRegion(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMinmax(self, target:int, internalformat:int, sink:int) -> None: ...
    def glMultMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixd(self, m:Sequence[float]) -> None: ...
    def glMultTransposeMatrixf(self, m:Sequence[float]) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiDrawArraysIndirect(self, mode:int, indirect:int, drawcount:int, stride:int) -> None: ...
    def glMultiTexCoord1d(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1f(self, target:int, s:float) -> None: ...
    def glMultiTexCoord1fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord1i(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord1s(self, target:int, s:int) -> None: ...
    def glMultiTexCoord1sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2d(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2f(self, target:int, s:float, t:float) -> None: ...
    def glMultiTexCoord2fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord2i(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord2s(self, target:int, s:int, t:int) -> None: ...
    def glMultiTexCoord2sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3d(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3f(self, target:int, s:float, t:float, r:float) -> None: ...
    def glMultiTexCoord3fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord3i(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord3s(self, target:int, s:int, t:int, r:int) -> None: ...
    def glMultiTexCoord3sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4d(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4dv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4f(self, target:int, s:float, t:float, r:float, q:float) -> None: ...
    def glMultiTexCoord4fv(self, target:int, v:Sequence[float]) -> None: ...
    def glMultiTexCoord4i(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4iv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoord4s(self, target:int, s:int, t:int, r:int, q:int) -> None: ...
    def glMultiTexCoord4sv(self, target:int, v:Sequence[int]) -> None: ...
    def glMultiTexCoordP1ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP1uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP2ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP2uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP3ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP3uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glMultiTexCoordP4ui(self, texture:int, type:int, coords:int) -> None: ...
    def glMultiTexCoordP4uiv(self, texture:int, type:int, coords:Sequence[int]) -> None: ...
    def glNamedBufferData(self, buffer:int, size:int, data:int, usage:int) -> None: ...
    def glNamedBufferStorage(self, buffer:int, size:int, data:int, flags:int) -> None: ...
    def glNamedFramebufferDrawBuffer(self, framebuffer:int, buf:int) -> None: ...
    def glNamedFramebufferDrawBuffers(self, framebuffer:int, n:int, bufs:Sequence[int]) -> None: ...
    def glNamedFramebufferParameteri(self, framebuffer:int, pname:int, param:int) -> None: ...
    def glNamedFramebufferReadBuffer(self, framebuffer:int, src:int) -> None: ...
    def glNamedFramebufferRenderbuffer(self, framebuffer:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glNamedFramebufferTexture(self, framebuffer:int, attachment:int, texture:int, level:int) -> None: ...
    def glNamedFramebufferTextureLayer(self, framebuffer:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glNamedRenderbufferStorage(self, renderbuffer:int, internalformat:int, width:int, height:int) -> None: ...
    def glNamedRenderbufferStorageMultisample(self, renderbuffer:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glNewList(self, list:int, mode:int) -> None: ...
    def glNormal3b(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3bv(self, v:bytes) -> None: ...
    def glNormal3d(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3dv(self, v:Sequence[float]) -> None: ...
    def glNormal3f(self, nx:float, ny:float, nz:float) -> None: ...
    def glNormal3fv(self, v:Sequence[float]) -> None: ...
    def glNormal3i(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3iv(self, v:Sequence[int]) -> None: ...
    def glNormal3s(self, nx:int, ny:int, nz:int) -> None: ...
    def glNormal3sv(self, v:Sequence[int]) -> None: ...
    def glNormalP3ui(self, type:int, coords:int) -> None: ...
    def glNormalP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glNormalPointer(self, type:int, stride:int, pointer:int) -> None: ...
    def glObjectLabel(self, identifier:int, name:int, length:int, label:bytes) -> None: ...
    def glObjectPtrLabel(self, ptr:int, length:int, label:bytes) -> None: ...
    def glOrtho(self, left:float, right:float, bottom:float, top:float, zNear:float, zFar:float) -> None: ...
    def glPassThrough(self, token:float) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelMapfv(self, map:int, mapsize:int, values:Sequence[float]) -> None: ...
    def glPixelMapuiv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelMapusv(self, map:int, mapsize:int, values:Sequence[int]) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPixelTransferf(self, pname:int, param:float) -> None: ...
    def glPixelTransferi(self, pname:int, param:int) -> None: ...
    def glPixelZoom(self, xfactor:float, yfactor:float) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopAttrib(self) -> None: ...
    def glPopClientAttrib(self) -> None: ...
    def glPopDebugGroup(self) -> None: ...
    def glPopMatrix(self) -> None: ...
    def glPopName(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glPrioritizeTextures(self, n:int, textures:Sequence[int], priorities:Sequence[float]) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushAttrib(self, mask:int) -> None: ...
    def glPushClientAttrib(self, mask:int) -> None: ...
    def glPushDebugGroup(self, source:int, id:int, length:int, message:bytes) -> None: ...
    def glPushMatrix(self) -> None: ...
    def glPushName(self, name:int) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glRasterPos2d(self, x:float, y:float) -> None: ...
    def glRasterPos2dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2f(self, x:float, y:float) -> None: ...
    def glRasterPos2fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos2i(self, x:int, y:int) -> None: ...
    def glRasterPos2iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos2s(self, x:int, y:int) -> None: ...
    def glRasterPos2sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3d(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3f(self, x:float, y:float, z:float) -> None: ...
    def glRasterPos3fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos3i(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos3s(self, x:int, y:int, z:int) -> None: ...
    def glRasterPos3sv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4dv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glRasterPos4fv(self, v:Sequence[float]) -> None: ...
    def glRasterPos4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4iv(self, v:Sequence[int]) -> None: ...
    def glRasterPos4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glRasterPos4sv(self, v:Sequence[int]) -> None: ...
    def glReadBuffer(self, src:int) -> None: ...
    def glReadPixels(self, x:int, y:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glReadnPixels(self, x:int, y:int, width:int, height:int, format:int, type:int, bufSize:int, data:int) -> None: ...
    def glRectd(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectdv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRectf(self, x1:float, y1:float, x2:float, y2:float) -> None: ...
    def glRectfv(self, v1:Sequence[float], v2:Sequence[float]) -> None: ...
    def glRecti(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectiv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glRects(self, x1:int, y1:int, x2:int, y2:int) -> None: ...
    def glRectsv(self, v1:Sequence[int], v2:Sequence[int]) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderMode(self, mode:int) -> int: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResetHistogram(self, target:int) -> None: ...
    def glResetMinmax(self, target:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glRotated(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glRotatef(self, angle:float, x:float, y:float, z:float) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, maskNumber:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScaled(self, x:float, y:float, z:float) -> None: ...
    def glScalef(self, x:float, y:float, z:float) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glSecondaryColor3b(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3bv(self, v:bytes) -> None: ...
    def glSecondaryColor3d(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3dv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3f(self, red:float, green:float, blue:float) -> None: ...
    def glSecondaryColor3fv(self, v:Sequence[float]) -> None: ...
    def glSecondaryColor3i(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3iv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3s(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3sv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3ub(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3ubv(self, v:bytes) -> None: ...
    def glSecondaryColor3ui(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3uiv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColor3us(self, red:int, green:int, blue:int) -> None: ...
    def glSecondaryColor3usv(self, v:Sequence[int]) -> None: ...
    def glSecondaryColorP3ui(self, type:int, color:int) -> None: ...
    def glSecondaryColorP3uiv(self, type:int, color:Sequence[int]) -> None: ...
    def glSecondaryColorPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glSeparableFilter2D(self, target:int, internalformat:int, width:int, height:int, format:int, type:int, row:int, column:int) -> None: ...
    def glShadeModel(self, mode:int) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glShaderStorageBlockBinding(self, program:int, storageBlockIndex:int, storageBlockBinding:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexCoord1d(self, s:float) -> None: ...
    def glTexCoord1dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1f(self, s:float) -> None: ...
    def glTexCoord1fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord1i(self, s:int) -> None: ...
    def glTexCoord1iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord1s(self, s:int) -> None: ...
    def glTexCoord1sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2d(self, s:float, t:float) -> None: ...
    def glTexCoord2dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2f(self, s:float, t:float) -> None: ...
    def glTexCoord2fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord2i(self, s:int, t:int) -> None: ...
    def glTexCoord2iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord2s(self, s:int, t:int) -> None: ...
    def glTexCoord2sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3d(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3f(self, s:float, t:float, r:float) -> None: ...
    def glTexCoord3fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord3i(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord3s(self, s:int, t:int, r:int) -> None: ...
    def glTexCoord3sv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4d(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4dv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4f(self, s:float, t:float, r:float, q:float) -> None: ...
    def glTexCoord4fv(self, v:Sequence[float]) -> None: ...
    def glTexCoord4i(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4iv(self, v:Sequence[int]) -> None: ...
    def glTexCoord4s(self, s:int, t:int, r:int, q:int) -> None: ...
    def glTexCoord4sv(self, v:Sequence[int]) -> None: ...
    def glTexCoordP1ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP1uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP2ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP2uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP3ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP3uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordP4ui(self, type:int, coords:int) -> None: ...
    def glTexCoordP4uiv(self, type:int, coords:Sequence[int]) -> None: ...
    def glTexCoordPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glTexEnvf(self, target:int, pname:int, param:float) -> None: ...
    def glTexEnvfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexEnvi(self, target:int, pname:int, param:int) -> None: ...
    def glTexEnviv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexGend(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGendv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGenf(self, coord:int, pname:int, param:float) -> None: ...
    def glTexGenfv(self, coord:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexGeni(self, coord:int, pname:int, param:int) -> None: ...
    def glTexGeniv(self, coord:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexStorage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureBarrier(self) -> None: ...
    def glTextureBuffer(self, texture:int, internalformat:int, buffer:int) -> None: ...
    def glTextureParameterIiv(self, texture:int, pname:int, params:Sequence[int]) -> None: ...
    def glTextureParameterIuiv(self, texture:int, pname:int, params:Sequence[int]) -> None: ...
    def glTextureParameterf(self, texture:int, pname:int, param:float) -> None: ...
    def glTextureParameterfv(self, texture:int, pname:int, param:Sequence[float]) -> None: ...
    def glTextureParameteri(self, texture:int, pname:int, param:int) -> None: ...
    def glTextureParameteriv(self, texture:int, pname:int, param:Sequence[int]) -> None: ...
    def glTextureStorage1D(self, texture:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTextureStorage2D(self, texture:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTextureStorage2DMultisample(self, texture:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTextureStorage3D(self, texture:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTextureStorage3DMultisample(self, texture:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTextureSubImage1D(self, texture:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureSubImage2D(self, texture:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureSubImage3D(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureView(self, texture:int, target:int, origtexture:int, internalformat:int, minlevel:int, numlevels:int, minlayer:int, numlayers:int) -> None: ...
    def glTransformFeedbackBufferBase(self, xfb:int, index:int, buffer:int) -> None: ...
    def glTranslated(self, x:float, y:float, z:float) -> None: ...
    def glTranslatef(self, x:float, y:float, z:float) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUnmapNamedBuffer(self, buffer:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertex2d(self, x:float, y:float) -> None: ...
    def glVertex2dv(self, v:Sequence[float]) -> None: ...
    def glVertex2f(self, x:float, y:float) -> None: ...
    def glVertex2fv(self, v:Sequence[float]) -> None: ...
    def glVertex2i(self, x:int, y:int) -> None: ...
    def glVertex2iv(self, v:Sequence[int]) -> None: ...
    def glVertex2s(self, x:int, y:int) -> None: ...
    def glVertex2sv(self, v:Sequence[int]) -> None: ...
    def glVertex3d(self, x:float, y:float, z:float) -> None: ...
    def glVertex3dv(self, v:Sequence[float]) -> None: ...
    def glVertex3f(self, x:float, y:float, z:float) -> None: ...
    def glVertex3fv(self, v:Sequence[float]) -> None: ...
    def glVertex3i(self, x:int, y:int, z:int) -> None: ...
    def glVertex3iv(self, v:Sequence[int]) -> None: ...
    def glVertex3s(self, x:int, y:int, z:int) -> None: ...
    def glVertex3sv(self, v:Sequence[int]) -> None: ...
    def glVertex4d(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4dv(self, v:Sequence[float]) -> None: ...
    def glVertex4f(self, x:float, y:float, z:float, w:float) -> None: ...
    def glVertex4fv(self, v:Sequence[float]) -> None: ...
    def glVertex4i(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4iv(self, v:Sequence[int]) -> None: ...
    def glVertex4s(self, x:int, y:int, z:int, w:int) -> None: ...
    def glVertex4sv(self, v:Sequence[int]) -> None: ...
    def glVertexArrayAttribBinding(self, vaobj:int, attribindex:int, bindingindex:int) -> None: ...
    def glVertexArrayAttribFormat(self, vaobj:int, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexArrayAttribIFormat(self, vaobj:int, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexArrayAttribLFormat(self, vaobj:int, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexArrayBindingDivisor(self, vaobj:int, bindingindex:int, divisor:int) -> None: ...
    def glVertexArrayElementBuffer(self, vaobj:int, buffer:int) -> None: ...
    def glVertexArrayVertexBuffers(self, vaobj:int, first:int, count:int) -> Tuple[int, int, int]: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribBinding(self, attribindex:int, bindingindex:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribFormat(self, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex:int, divisor:int) -> None: ...
    def glVertexP2ui(self, type:int, value:int) -> None: ...
    def glVertexP2uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP3ui(self, type:int, value:int) -> None: ...
    def glVertexP3uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexP4ui(self, type:int, value:int) -> None: ...
    def glVertexP4uiv(self, type:int, value:Sequence[int]) -> None: ...
    def glVertexPointer(self, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def glWindowPos2d(self, x:float, y:float) -> None: ...
    def glWindowPos2dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2f(self, x:float, y:float) -> None: ...
    def glWindowPos2fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos2i(self, x:int, y:int) -> None: ...
    def glWindowPos2iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos2s(self, x:int, y:int) -> None: ...
    def glWindowPos2sv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3d(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3dv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3f(self, x:float, y:float, z:float) -> None: ...
    def glWindowPos3fv(self, v:Sequence[float]) -> None: ...
    def glWindowPos3i(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3iv(self, v:Sequence[int]) -> None: ...
    def glWindowPos3s(self, x:int, y:int, z:int) -> None: ...
    def glWindowPos3sv(self, v:Sequence[int]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLFunctions_4_5_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self) -> None: ...

    def glActiveShaderProgram(self, pipeline:int, program:int) -> None: ...
    def glActiveTexture(self, texture:int) -> None: ...
    def glAttachShader(self, program:int, shader:int) -> None: ...
    def glBeginConditionalRender(self, id:int, mode:int) -> None: ...
    def glBeginQuery(self, target:int, id:int) -> None: ...
    def glBeginQueryIndexed(self, target:int, index:int, id:int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode:int) -> None: ...
    def glBindAttribLocation(self, program:int, index:int, name:bytes) -> None: ...
    def glBindBuffer(self, target:int, buffer:int) -> None: ...
    def glBindBufferBase(self, target:int, index:int, buffer:int) -> None: ...
    def glBindBuffersBase(self, target:int, first:int, count:int, buffers:Sequence[int]) -> None: ...
    def glBindBuffersRange(self, target:int, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBindFragDataLocation(self, program:int, color:int, name:bytes) -> None: ...
    def glBindFragDataLocationIndexed(self, program:int, colorNumber:int, index:int, name:bytes) -> None: ...
    def glBindFramebuffer(self, target:int, framebuffer:int) -> None: ...
    def glBindImageTexture(self, unit:int, texture:int, level:int, layered:int, layer:int, access:int, format:int) -> None: ...
    def glBindImageTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindProgramPipeline(self, pipeline:int) -> None: ...
    def glBindRenderbuffer(self, target:int, renderbuffer:int) -> None: ...
    def glBindSampler(self, unit:int, sampler:int) -> None: ...
    def glBindSamplers(self, first:int, count:int, samplers:Sequence[int]) -> None: ...
    def glBindTexture(self, target:int, texture:int) -> None: ...
    def glBindTextureUnit(self, unit:int, texture:int) -> None: ...
    def glBindTextures(self, first:int, count:int, textures:Sequence[int]) -> None: ...
    def glBindTransformFeedback(self, target:int, id:int) -> None: ...
    def glBindVertexArray(self, array:int) -> None: ...
    def glBindVertexBuffers(self, first:int, count:int) -> Tuple[int, int, int]: ...
    def glBlendColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glBlendEquation(self, mode:int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationSeparatei(self, buf:int, modeRGB:int, modeAlpha:int) -> None: ...
    def glBlendEquationi(self, buf:int, mode:int) -> None: ...
    def glBlendFunc(self, sfactor:int, dfactor:int) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB:int, dfactorRGB:int, sfactorAlpha:int, dfactorAlpha:int) -> None: ...
    def glBlendFuncSeparatei(self, buf:int, srcRGB:int, dstRGB:int, srcAlpha:int, dstAlpha:int) -> None: ...
    def glBlendFunci(self, buf:int, src:int, dst:int) -> None: ...
    def glBlitFramebuffer(self, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glBlitNamedFramebuffer(self, readFramebuffer:int, drawFramebuffer:int, srcX0:int, srcY0:int, srcX1:int, srcY1:int, dstX0:int, dstY0:int, dstX1:int, dstY1:int, mask:int, filter:int) -> None: ...
    def glCheckFramebufferStatus(self, target:int) -> int: ...
    def glCheckNamedFramebufferStatus(self, framebuffer:int, target:int) -> int: ...
    def glClampColor(self, target:int, clamp:int) -> None: ...
    def glClear(self, mask:int) -> None: ...
    def glClearBufferData(self, target:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearBufferfi(self, buffer:int, drawbuffer:int, depth:float, stencil:int) -> None: ...
    def glClearBufferfv(self, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearColor(self, red:float, green:float, blue:float, alpha:float) -> None: ...
    def glClearDepth(self, depth:float) -> None: ...
    def glClearDepthf(self, dd:float) -> None: ...
    def glClearNamedBufferData(self, buffer:int, internalformat:int, format:int, type:int, data:int) -> None: ...
    def glClearNamedFramebufferfi(self, framebuffer:int, buffer:int, depth:float, stencil:int) -> None: ...
    def glClearNamedFramebufferfv(self, framebuffer:int, buffer:int, drawbuffer:int, value:Sequence[float]) -> None: ...
    def glClearNamedFramebufferiv(self, framebuffer:int, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearNamedFramebufferuiv(self, framebuffer:int, buffer:int, drawbuffer:int, value:Sequence[int]) -> None: ...
    def glClearStencil(self, s:int) -> None: ...
    def glClearTexImage(self, texture:int, level:int, format:int, type:int, data:int) -> None: ...
    def glClearTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, data:int) -> None: ...
    def glClipControl(self, origin:int, depth:int) -> None: ...
    def glColorMask(self, red:int, green:int, blue:int, alpha:int) -> None: ...
    def glColorMaski(self, index:int, r:int, g:int, b:int, a:int) -> None: ...
    def glCompileShader(self, shader:int) -> None: ...
    def glCompressedTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTextureSubImage1D(self, texture:int, level:int, xoffset:int, width:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTextureSubImage2D(self, texture:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, imageSize:int, data:int) -> None: ...
    def glCompressedTextureSubImage3D(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, imageSize:int, data:int) -> None: ...
    def glCopyImageSubData(self, srcName:int, srcTarget:int, srcLevel:int, srcX:int, srcY:int, srcZ:int, dstName:int, dstTarget:int, dstLevel:int, dstX:int, dstY:int, dstZ:int, srcWidth:int, srcHeight:int, srcDepth:int) -> None: ...
    def glCopyTexImage1D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, border:int) -> None: ...
    def glCopyTexImage2D(self, target:int, level:int, internalformat:int, x:int, y:int, width:int, height:int, border:int) -> None: ...
    def glCopyTexSubImage1D(self, target:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTextureSubImage1D(self, texture:int, level:int, xoffset:int, x:int, y:int, width:int) -> None: ...
    def glCopyTextureSubImage2D(self, texture:int, level:int, xoffset:int, yoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCopyTextureSubImage3D(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, x:int, y:int, width:int, height:int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type:int) -> int: ...
    def glCullFace(self, mode:int) -> None: ...
    def glDebugMessageControl(self, source:int, type:int, severity:int, count:int, ids:Sequence[int], enabled:int) -> None: ...
    def glDebugMessageInsert(self, source:int, type:int, id:int, severity:int, length:int, buf:bytes) -> None: ...
    def glDeleteBuffers(self, n:int, buffers:Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n:int, framebuffers:Sequence[int]) -> None: ...
    def glDeleteProgram(self, program:int) -> None: ...
    def glDeleteProgramPipelines(self, n:int, pipelines:Sequence[int]) -> None: ...
    def glDeleteQueries(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteRenderbuffers(self, n:int, renderbuffers:Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count:int, samplers:Sequence[int]) -> None: ...
    def glDeleteShader(self, shader:int) -> None: ...
    def glDeleteTextures(self, n:int, textures:Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n:int, ids:Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n:int, arrays:Sequence[int]) -> None: ...
    def glDepthFunc(self, func:int) -> None: ...
    def glDepthMask(self, flag:int) -> None: ...
    def glDepthRange(self, nearVal:float, farVal:float) -> None: ...
    def glDepthRangeArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glDepthRangeIndexed(self, index:int, n:float, f:float) -> None: ...
    def glDepthRangef(self, n:float, f:float) -> None: ...
    def glDetachShader(self, program:int, shader:int) -> None: ...
    def glDisable(self, cap:int) -> None: ...
    def glDisableVertexArrayAttrib(self, vaobj:int, index:int) -> None: ...
    def glDisableVertexAttribArray(self, index:int) -> None: ...
    def glDisablei(self, target:int, index:int) -> None: ...
    def glDispatchCompute(self, num_groups_x:int, num_groups_y:int, num_groups_z:int) -> None: ...
    def glDrawArrays(self, mode:int, first:int, count:int) -> None: ...
    def glDrawArraysIndirect(self, mode:int, indirect:int) -> None: ...
    def glDrawArraysInstanced(self, mode:int, first:int, count:int, instancecount:int) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode:int, first:int, count:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawBuffer(self, buf:int) -> None: ...
    def glDrawBuffers(self, n:int, bufs:Sequence[int]) -> None: ...
    def glDrawElements(self, mode:int, count:int, type:int, indices:int) -> None: ...
    def glDrawElementsBaseVertex(self, mode:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawElementsIndirect(self, mode:int, type:int, indirect:int) -> None: ...
    def glDrawElementsInstanced(self, mode:int, count:int, type:int, indices:int, instancecount:int) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, baseinstance:int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode:int, count:int, type:int, indices:int, instancecount:int, basevertex:int, baseinstance:int) -> None: ...
    def glDrawRangeElements(self, mode:int, start:int, end:int, count:int, type:int, indices:int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode:int, start:int, end:int, count:int, type:int, indices:int, basevertex:int) -> None: ...
    def glDrawTransformFeedback(self, mode:int, id:int) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode:int, id:int, instancecount:int) -> None: ...
    def glDrawTransformFeedbackStream(self, mode:int, id:int, stream:int) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode:int, id:int, stream:int, instancecount:int) -> None: ...
    def glEnable(self, cap:int) -> None: ...
    def glEnableVertexArrayAttrib(self, vaobj:int, index:int) -> None: ...
    def glEnableVertexAttribArray(self, index:int) -> None: ...
    def glEnablei(self, target:int, index:int) -> None: ...
    def glEndConditionalRender(self) -> None: ...
    def glEndQuery(self, target:int) -> None: ...
    def glEndQueryIndexed(self, target:int, index:int) -> None: ...
    def glEndTransformFeedback(self) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glFramebufferRenderbuffer(self, target:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glFramebufferTexture(self, target:int, attachment:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture1D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture2D(self, target:int, attachment:int, textarget:int, texture:int, level:int) -> None: ...
    def glFramebufferTexture3D(self, target:int, attachment:int, textarget:int, texture:int, level:int, zoffset:int) -> None: ...
    def glFramebufferTextureLayer(self, target:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glFrontFace(self, mode:int) -> None: ...
    def glGenerateMipmap(self, target:int) -> None: ...
    def glGenerateTextureMipmap(self, texture:int) -> None: ...
    def glGetAttribLocation(self, program:int, name:bytes) -> int: ...
    def glGetCompressedTexImage(self, target:int, level:int, img:int) -> None: ...
    def glGetCompressedTextureImage(self, texture:int, level:int, bufSize:int, pixels:int) -> None: ...
    def glGetCompressedTextureSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, bufSize:int, pixels:int) -> None: ...
    def glGetError(self) -> int: ...
    def glGetFragDataIndex(self, program:int, name:bytes) -> int: ...
    def glGetFragDataLocation(self, program:int, name:bytes) -> int: ...
    def glGetGraphicsResetStatus(self) -> int: ...
    def glGetProgramResourceIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocation(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetProgramResourceLocationIndex(self, program:int, programInterface:int, name:bytes) -> int: ...
    def glGetString(self, name:int) -> str: ...
    def glGetStringi(self, name:int, index:int) -> str: ...
    def glGetSubroutineIndex(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetSubroutineUniformLocation(self, program:int, shadertype:int, name:bytes) -> int: ...
    def glGetTexImage(self, target:int, level:int, format:int, type:int, pixels:int) -> None: ...
    def glGetTextureImage(self, texture:int, level:int, format:int, type:int, bufSize:int, pixels:int) -> None: ...
    def glGetTextureSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, bufSize:int, pixels:int) -> None: ...
    def glGetUniformBlockIndex(self, program:int, uniformBlockName:bytes) -> int: ...
    def glGetUniformLocation(self, program:int, name:bytes) -> int: ...
    def glGetnCompressedTexImage(self, target:int, lod:int, bufSize:int, pixels:int) -> None: ...
    def glGetnTexImage(self, target:int, level:int, format:int, type:int, bufSize:int, pixels:int) -> None: ...
    def glHint(self, target:int, mode:int) -> None: ...
    def glInvalidateBufferData(self, buffer:int) -> None: ...
    def glInvalidateFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateNamedFramebufferData(self, framebuffer:int, numAttachments:int, attachments:Sequence[int]) -> None: ...
    def glInvalidateNamedFramebufferSubData(self, framebuffer:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateSubFramebuffer(self, target:int, numAttachments:int, attachments:Sequence[int], x:int, y:int, width:int, height:int) -> None: ...
    def glInvalidateTexImage(self, texture:int, level:int) -> None: ...
    def glInvalidateTexSubImage(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int) -> None: ...
    def glIsBuffer(self, buffer:int) -> int: ...
    def glIsEnabled(self, cap:int) -> int: ...
    def glIsEnabledi(self, target:int, index:int) -> int: ...
    def glIsFramebuffer(self, framebuffer:int) -> int: ...
    def glIsProgram(self, program:int) -> int: ...
    def glIsProgramPipeline(self, pipeline:int) -> int: ...
    def glIsQuery(self, id:int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer:int) -> int: ...
    def glIsSampler(self, sampler:int) -> int: ...
    def glIsShader(self, shader:int) -> int: ...
    def glIsTexture(self, texture:int) -> int: ...
    def glIsTransformFeedback(self, id:int) -> int: ...
    def glIsVertexArray(self, array:int) -> int: ...
    def glLineWidth(self, width:float) -> None: ...
    def glLinkProgram(self, program:int) -> None: ...
    def glLogicOp(self, opcode:int) -> None: ...
    def glMapBuffer(self, target:int, access:int) -> int: ...
    def glMapNamedBuffer(self, buffer:int, access:int) -> int: ...
    def glMemoryBarrier(self, barriers:int) -> None: ...
    def glMemoryBarrierByRegion(self, barriers:int) -> None: ...
    def glMinSampleShading(self, value:float) -> None: ...
    def glMultiDrawArrays(self, mode:int, first:Sequence[int], count:Sequence[int], drawcount:int) -> None: ...
    def glMultiDrawArraysIndirect(self, mode:int, indirect:int, drawcount:int, stride:int) -> None: ...
    def glNamedBufferData(self, buffer:int, size:int, data:int, usage:int) -> None: ...
    def glNamedBufferStorage(self, buffer:int, size:int, data:int, flags:int) -> None: ...
    def glNamedFramebufferDrawBuffer(self, framebuffer:int, buf:int) -> None: ...
    def glNamedFramebufferDrawBuffers(self, framebuffer:int, n:int, bufs:Sequence[int]) -> None: ...
    def glNamedFramebufferParameteri(self, framebuffer:int, pname:int, param:int) -> None: ...
    def glNamedFramebufferReadBuffer(self, framebuffer:int, src:int) -> None: ...
    def glNamedFramebufferRenderbuffer(self, framebuffer:int, attachment:int, renderbuffertarget:int, renderbuffer:int) -> None: ...
    def glNamedFramebufferTexture(self, framebuffer:int, attachment:int, texture:int, level:int) -> None: ...
    def glNamedFramebufferTextureLayer(self, framebuffer:int, attachment:int, texture:int, level:int, layer:int) -> None: ...
    def glNamedRenderbufferStorage(self, renderbuffer:int, internalformat:int, width:int, height:int) -> None: ...
    def glNamedRenderbufferStorageMultisample(self, renderbuffer:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glObjectLabel(self, identifier:int, name:int, length:int, label:bytes) -> None: ...
    def glObjectPtrLabel(self, ptr:int, length:int, label:bytes) -> None: ...
    def glPatchParameterfv(self, pname:int, values:Sequence[float]) -> None: ...
    def glPatchParameteri(self, pname:int, value:int) -> None: ...
    def glPauseTransformFeedback(self) -> None: ...
    def glPixelStoref(self, pname:int, param:float) -> None: ...
    def glPixelStorei(self, pname:int, param:int) -> None: ...
    def glPointParameterf(self, pname:int, param:float) -> None: ...
    def glPointParameterfv(self, pname:int, params:Sequence[float]) -> None: ...
    def glPointParameteri(self, pname:int, param:int) -> None: ...
    def glPointParameteriv(self, pname:int, params:Sequence[int]) -> None: ...
    def glPointSize(self, size:float) -> None: ...
    def glPolygonMode(self, face:int, mode:int) -> None: ...
    def glPolygonOffset(self, factor:float, units:float) -> None: ...
    def glPopDebugGroup(self) -> None: ...
    def glPrimitiveRestartIndex(self, index:int) -> None: ...
    def glProgramBinary(self, program:int, binaryFormat:int, binary:int, length:int) -> None: ...
    def glProgramParameteri(self, program:int, pname:int, value:int) -> None: ...
    def glProgramUniform1d(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1f(self, program:int, location:int, v0:float) -> None: ...
    def glProgramUniform1fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program:int, location:int, v0:int) -> None: ...
    def glProgramUniform1uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2d(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2f(self, program:int, location:int, v0:float, v1:float) -> None: ...
    def glProgramUniform2fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program:int, location:int, v0:int, v1:int) -> None: ...
    def glProgramUniform2uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3d(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3f(self, program:int, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glProgramUniform3fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program:int, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glProgramUniform3uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4d(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4dv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4f(self, program:int, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glProgramUniform4fv(self, program:int, location:int, count:int, value:Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4iv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program:int, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glProgramUniform4uiv(self, program:int, location:int, count:int, value:Sequence[int]) -> None: ...
    def glProgramUniformMatrix2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program:int, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glProvokingVertex(self, mode:int) -> None: ...
    def glPushDebugGroup(self, source:int, id:int, length:int, message:bytes) -> None: ...
    def glQueryCounter(self, id:int, target:int) -> None: ...
    def glReadBuffer(self, src:int) -> None: ...
    def glReadPixels(self, x:int, y:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glReadnPixels(self, x:int, y:int, width:int, height:int, format:int, type:int, bufSize:int, data:int) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderbufferStorage(self, target:int, internalformat:int, width:int, height:int) -> None: ...
    def glRenderbufferStorageMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int) -> None: ...
    def glResumeTransformFeedback(self) -> None: ...
    def glSampleCoverage(self, value:float, invert:int) -> None: ...
    def glSampleMaski(self, maskNumber:int, mask:int) -> None: ...
    def glSamplerParameterIiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler:int, pname:int, param:float) -> None: ...
    def glSamplerParameterfv(self, sampler:int, pname:int, param:Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler:int, pname:int, param:int) -> None: ...
    def glSamplerParameteriv(self, sampler:int, pname:int, param:Sequence[int]) -> None: ...
    def glScissor(self, x:int, y:int, width:int, height:int) -> None: ...
    def glScissorArrayv(self, first:int, count:int, v:Sequence[int]) -> None: ...
    def glScissorIndexed(self, index:int, left:int, bottom:int, width:int, height:int) -> None: ...
    def glScissorIndexedv(self, index:int, v:Sequence[int]) -> None: ...
    def glShaderBinary(self, count:int, shaders:Sequence[int], binaryformat:int, binary:int, length:int) -> None: ...
    def glShaderStorageBlockBinding(self, program:int, storageBlockIndex:int, storageBlockBinding:int) -> None: ...
    def glStencilFunc(self, func:int, ref:int, mask:int) -> None: ...
    def glStencilFuncSeparate(self, face:int, func:int, ref:int, mask:int) -> None: ...
    def glStencilMask(self, mask:int) -> None: ...
    def glStencilMaskSeparate(self, face:int, mask:int) -> None: ...
    def glStencilOp(self, fail:int, zfail:int, zpass:int) -> None: ...
    def glStencilOpSeparate(self, face:int, sfail:int, dpfail:int, dppass:int) -> None: ...
    def glTexBuffer(self, target:int, internalformat:int, buffer:int) -> None: ...
    def glTexImage1D(self, target:int, level:int, internalformat:int, width:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2D(self, target:int, level:int, internalformat:int, width:int, height:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexImage3D(self, target:int, level:int, internalformat:int, width:int, height:int, depth:int, border:int, format:int, type:int, pixels:int) -> None: ...
    def glTexImage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexParameterIiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexParameterf(self, target:int, pname:int, param:float) -> None: ...
    def glTexParameterfv(self, target:int, pname:int, params:Sequence[float]) -> None: ...
    def glTexParameteri(self, target:int, pname:int, param:int) -> None: ...
    def glTexParameteriv(self, target:int, pname:int, params:Sequence[int]) -> None: ...
    def glTexStorage1D(self, target:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTexStorage2D(self, target:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTexStorage2DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTexStorage3D(self, target:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTexStorage3DMultisample(self, target:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTexSubImage1D(self, target:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage2D(self, target:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTexSubImage3D(self, target:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureBarrier(self) -> None: ...
    def glTextureBuffer(self, texture:int, internalformat:int, buffer:int) -> None: ...
    def glTextureParameterIiv(self, texture:int, pname:int, params:Sequence[int]) -> None: ...
    def glTextureParameterIuiv(self, texture:int, pname:int, params:Sequence[int]) -> None: ...
    def glTextureParameterf(self, texture:int, pname:int, param:float) -> None: ...
    def glTextureParameterfv(self, texture:int, pname:int, param:Sequence[float]) -> None: ...
    def glTextureParameteri(self, texture:int, pname:int, param:int) -> None: ...
    def glTextureParameteriv(self, texture:int, pname:int, param:Sequence[int]) -> None: ...
    def glTextureStorage1D(self, texture:int, levels:int, internalformat:int, width:int) -> None: ...
    def glTextureStorage2D(self, texture:int, levels:int, internalformat:int, width:int, height:int) -> None: ...
    def glTextureStorage2DMultisample(self, texture:int, samples:int, internalformat:int, width:int, height:int, fixedsamplelocations:int) -> None: ...
    def glTextureStorage3D(self, texture:int, levels:int, internalformat:int, width:int, height:int, depth:int) -> None: ...
    def glTextureStorage3DMultisample(self, texture:int, samples:int, internalformat:int, width:int, height:int, depth:int, fixedsamplelocations:int) -> None: ...
    def glTextureSubImage1D(self, texture:int, level:int, xoffset:int, width:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureSubImage2D(self, texture:int, level:int, xoffset:int, yoffset:int, width:int, height:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureSubImage3D(self, texture:int, level:int, xoffset:int, yoffset:int, zoffset:int, width:int, height:int, depth:int, format:int, type:int, pixels:int) -> None: ...
    def glTextureView(self, texture:int, target:int, origtexture:int, internalformat:int, minlevel:int, numlevels:int, minlayer:int, numlayers:int) -> None: ...
    def glTransformFeedbackBufferBase(self, xfb:int, index:int, buffer:int) -> None: ...
    def glUniform1d(self, location:int, x:float) -> None: ...
    def glUniform1dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1f(self, location:int, v0:float) -> None: ...
    def glUniform1fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform1i(self, location:int, v0:int) -> None: ...
    def glUniform1iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform1ui(self, location:int, v0:int) -> None: ...
    def glUniform1uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2d(self, location:int, x:float, y:float) -> None: ...
    def glUniform2dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2f(self, location:int, v0:float, v1:float) -> None: ...
    def glUniform2fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform2i(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform2ui(self, location:int, v0:int, v1:int) -> None: ...
    def glUniform2uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3d(self, location:int, x:float, y:float, z:float) -> None: ...
    def glUniform3dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3f(self, location:int, v0:float, v1:float, v2:float) -> None: ...
    def glUniform3fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform3i(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform3ui(self, location:int, v0:int, v1:int, v2:int) -> None: ...
    def glUniform3uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4d(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    def glUniform4dv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4f(self, location:int, v0:float, v1:float, v2:float, v3:float) -> None: ...
    def glUniform4fv(self, location:int, count:int, value:Sequence[float]) -> None: ...
    def glUniform4i(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4iv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniform4ui(self, location:int, v0:int, v1:int, v2:int, v3:int) -> None: ...
    def glUniform4uiv(self, location:int, count:int, value:Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program:int, uniformBlockIndex:int, uniformBlockBinding:int) -> None: ...
    def glUniformMatrix2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3dv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location:int, count:int, transpose:int, value:Sequence[float]) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype:int, count:int, indices:Sequence[int]) -> None: ...
    def glUnmapBuffer(self, target:int) -> int: ...
    def glUnmapNamedBuffer(self, buffer:int) -> int: ...
    def glUseProgram(self, program:int) -> None: ...
    def glUseProgramStages(self, pipeline:int, stages:int, program:int) -> None: ...
    def glValidateProgram(self, program:int) -> None: ...
    def glValidateProgramPipeline(self, pipeline:int) -> None: ...
    def glVertexArrayAttribBinding(self, vaobj:int, attribindex:int, bindingindex:int) -> None: ...
    def glVertexArrayAttribFormat(self, vaobj:int, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexArrayAttribIFormat(self, vaobj:int, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexArrayAttribLFormat(self, vaobj:int, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexArrayBindingDivisor(self, vaobj:int, bindingindex:int, divisor:int) -> None: ...
    def glVertexArrayElementBuffer(self, vaobj:int, buffer:int) -> None: ...
    def glVertexArrayVertexBuffers(self, vaobj:int, first:int, count:int) -> Tuple[int, int, int]: ...
    def glVertexAttrib1d(self, index:int, x:float) -> None: ...
    def glVertexAttrib1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1f(self, index:int, x:float) -> None: ...
    def glVertexAttrib1fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib1s(self, index:int, x:int) -> None: ...
    def glVertexAttrib1sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttrib2fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib2s(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttrib2sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttrib3fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib3s(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttrib3sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nbv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Niv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nsv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nub(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4Nubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4Nuiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4Nusv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttrib4fv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttrib4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4s(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttrib4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttrib4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttrib4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribBinding(self, attribindex:int, bindingindex:int) -> None: ...
    def glVertexAttribDivisor(self, index:int, divisor:int) -> None: ...
    def glVertexAttribFormat(self, attribindex:int, size:int, type:int, normalized:int, relativeoffset:int) -> None: ...
    def glVertexAttribI1i(self, index:int, x:int) -> None: ...
    def glVertexAttribI1iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI1ui(self, index:int, x:int) -> None: ...
    def glVertexAttribI1uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2i(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI2ui(self, index:int, x:int, y:int) -> None: ...
    def glVertexAttribI2uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3i(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI3ui(self, index:int, x:int, y:int, z:int) -> None: ...
    def glVertexAttribI3uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4bv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4i(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4iv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4sv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4ubv(self, index:int, v:bytes) -> None: ...
    def glVertexAttribI4ui(self, index:int, x:int, y:int, z:int, w:int) -> None: ...
    def glVertexAttribI4uiv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribI4usv(self, index:int, v:Sequence[int]) -> None: ...
    def glVertexAttribIFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribIPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribL1d(self, index:int, x:float) -> None: ...
    def glVertexAttribL1dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL2d(self, index:int, x:float, y:float) -> None: ...
    def glVertexAttribL2dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL3d(self, index:int, x:float, y:float, z:float) -> None: ...
    def glVertexAttribL3dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribL4d(self, index:int, x:float, y:float, z:float, w:float) -> None: ...
    def glVertexAttribL4dv(self, index:int, v:Sequence[float]) -> None: ...
    def glVertexAttribLFormat(self, attribindex:int, size:int, type:int, relativeoffset:int) -> None: ...
    def glVertexAttribLPointer(self, index:int, size:int, type:int, stride:int, pointer:int) -> None: ...
    def glVertexAttribP1ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP1uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP2ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP2uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP3ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP3uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribP4ui(self, index:int, type:int, normalized:int, value:int) -> None: ...
    def glVertexAttribP4uiv(self, index:int, type:int, normalized:int, value:Sequence[int]) -> None: ...
    def glVertexAttribPointer(self, index:int, size:int, type:int, normalized:int, stride:int, pointer:int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex:int, divisor:int) -> None: ...
    def glViewport(self, x:int, y:int, width:int, height:int) -> None: ...
    def glViewportArrayv(self, first:int, count:int, v:Sequence[float]) -> None: ...
    def glViewportIndexedf(self, index:int, x:float, y:float, w:float, h:float) -> None: ...
    def glViewportIndexedfv(self, index:int, v:Sequence[float]) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...


class QOpenGLPaintDevice(PySide6.QtGui.QPaintDevice):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, size:PySide6.QtCore.QSize) -> None: ...
    @overload
    def __init__(self, width:int, height:int) -> None: ...

    def context(self) -> PySide6.QtGui.QOpenGLContext: ...
    def devType(self) -> int: ...
    def dotsPerMeterX(self) -> float: ...
    def dotsPerMeterY(self) -> float: ...
    def ensureActiveTarget(self) -> None: ...
    def metric(self, metric:PySide6.QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> PySide6.QtGui.QPaintEngine: ...
    def paintFlipped(self) -> bool: ...
    def setDevicePixelRatio(self, devicePixelRatio:float) -> None: ...
    def setDotsPerMeterX(self, arg__1:float) -> None: ...
    def setDotsPerMeterY(self, arg__1:float) -> None: ...
    def setPaintFlipped(self, flipped:bool) -> None: ...
    def setSize(self, size:PySide6.QtCore.QSize) -> None: ...
    def size(self) -> PySide6.QtCore.QSize: ...


class QOpenGLPixelTransferOptions(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1:PySide6.QtOpenGL.QOpenGLPixelTransferOptions) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def alignment(self) -> int: ...
    def imageHeight(self) -> int: ...
    def isLeastSignificantBitFirst(self) -> bool: ...
    def isSwapBytesEnabled(self) -> bool: ...
    def rowLength(self) -> int: ...
    def setAlignment(self, alignment:int) -> None: ...
    def setImageHeight(self, imageHeight:int) -> None: ...
    def setLeastSignificantByteFirst(self, lsbFirst:bool) -> None: ...
    def setRowLength(self, rowLength:int) -> None: ...
    def setSkipImages(self, skipImages:int) -> None: ...
    def setSkipPixels(self, skipPixels:int) -> None: ...
    def setSkipRows(self, skipRows:int) -> None: ...
    def setSwapBytesEnabled(self, swapBytes:bool) -> None: ...
    def skipImages(self) -> int: ...
    def skipPixels(self) -> int: ...
    def skipRows(self) -> int: ...
    def swap(self, other:PySide6.QtOpenGL.QOpenGLPixelTransferOptions) -> None: ...


class QOpenGLShader(PySide6.QtCore.QObject):

    Vertex                   : QOpenGLShader.ShaderTypeBit = ... # 0x1
    Fragment                 : QOpenGLShader.ShaderTypeBit = ... # 0x2
    Geometry                 : QOpenGLShader.ShaderTypeBit = ... # 0x4
    TessellationControl      : QOpenGLShader.ShaderTypeBit = ... # 0x8
    TessellationEvaluation   : QOpenGLShader.ShaderTypeBit = ... # 0x10
    Compute                  : QOpenGLShader.ShaderTypeBit = ... # 0x20

    class ShaderType(object): ...

    class ShaderTypeBit(Shiboken.Enum):

        Vertex                   : QOpenGLShader.ShaderTypeBit = ... # 0x1
        Fragment                 : QOpenGLShader.ShaderTypeBit = ... # 0x2
        Geometry                 : QOpenGLShader.ShaderTypeBit = ... # 0x4
        TessellationControl      : QOpenGLShader.ShaderTypeBit = ... # 0x8
        TessellationEvaluation   : QOpenGLShader.ShaderTypeBit = ... # 0x10
        Compute                  : QOpenGLShader.ShaderTypeBit = ... # 0x20


    def __init__(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, parent:Optional[PySide6.QtCore.QObject]=...) -> None: ...

    @overload
    def compileSourceCode(self, source:str) -> bool: ...
    @overload
    def compileSourceCode(self, source:bytes) -> bool: ...
    @overload
    def compileSourceCode(self, source:Union[PySide6.QtCore.QByteArray, bytes]) -> bool: ...
    def compileSourceFile(self, fileName:str) -> bool: ...
    @staticmethod
    def hasOpenGLShaders(type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, context:Optional[PySide6.QtGui.QOpenGLContext]=...) -> bool: ...
    def isCompiled(self) -> bool: ...
    def log(self) -> str: ...
    def shaderId(self) -> int: ...
    def shaderType(self) -> PySide6.QtOpenGL.QOpenGLShader.ShaderType: ...
    def sourceCode(self) -> PySide6.QtCore.QByteArray: ...


class QOpenGLShaderProgram(PySide6.QtCore.QObject):

    def __init__(self, parent:Optional[PySide6.QtCore.QObject]=...) -> None: ...

    @overload
    def addCacheableShaderFromSourceCode(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, source:str) -> bool: ...
    @overload
    def addCacheableShaderFromSourceCode(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, source:bytes) -> bool: ...
    @overload
    def addCacheableShaderFromSourceCode(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, source:Union[PySide6.QtCore.QByteArray, bytes]) -> bool: ...
    def addCacheableShaderFromSourceFile(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, fileName:str) -> bool: ...
    def addShader(self, shader:PySide6.QtOpenGL.QOpenGLShader) -> bool: ...
    @overload
    def addShaderFromSourceCode(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, source:str) -> bool: ...
    @overload
    def addShaderFromSourceCode(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, source:bytes) -> bool: ...
    @overload
    def addShaderFromSourceCode(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, source:Union[PySide6.QtCore.QByteArray, bytes]) -> bool: ...
    def addShaderFromSourceFile(self, type:PySide6.QtOpenGL.QOpenGLShader.ShaderType, fileName:str) -> bool: ...
    @overload
    def attributeLocation(self, name:str) -> int: ...
    @overload
    def attributeLocation(self, name:bytes) -> int: ...
    @overload
    def attributeLocation(self, name:Union[PySide6.QtCore.QByteArray, bytes]) -> int: ...
    def bind(self) -> bool: ...
    @overload
    def bindAttributeLocation(self, name:str, location:int) -> None: ...
    @overload
    def bindAttributeLocation(self, name:bytes, location:int) -> None: ...
    @overload
    def bindAttributeLocation(self, name:Union[PySide6.QtCore.QByteArray, bytes], location:int) -> None: ...
    def create(self) -> bool: ...
    def defaultInnerTessellationLevels(self) -> List[float]: ...
    def defaultOuterTessellationLevels(self) -> List[float]: ...
    @overload
    def disableAttributeArray(self, location:int) -> None: ...
    @overload
    def disableAttributeArray(self, name:bytes) -> None: ...
    @overload
    def enableAttributeArray(self, location:int) -> None: ...
    @overload
    def enableAttributeArray(self, name:bytes) -> None: ...
    @staticmethod
    def hasOpenGLShaderPrograms(context:Optional[PySide6.QtGui.QOpenGLContext]=...) -> bool: ...
    def isLinked(self) -> bool: ...
    def link(self) -> bool: ...
    def log(self) -> str: ...
    def maxGeometryOutputVertices(self) -> int: ...
    def patchVertexCount(self) -> int: ...
    def programId(self) -> int: ...
    def release(self) -> None: ...
    def removeAllShaders(self) -> None: ...
    def removeShader(self, shader:PySide6.QtOpenGL.QOpenGLShader) -> None: ...
    @overload
    def setAttributeArray(self, location:int, type:int, values:int, tupleSize:int, stride:int=...) -> None: ...
    @overload
    def setAttributeArray(self, location:int, values:Sequence[float], tupleSize:int, stride:int=...) -> None: ...
    @overload
    def setAttributeArray(self, name:bytes, type:int, values:int, tupleSize:int, stride:int=...) -> None: ...
    @overload
    def setAttributeArray(self, name:bytes, values:Sequence[float], tupleSize:int, stride:int=...) -> None: ...
    @overload
    def setAttributeBuffer(self, location:int, type:int, offset:int, tupleSize:int, stride:int=...) -> None: ...
    @overload
    def setAttributeBuffer(self, name:bytes, type:int, offset:int, tupleSize:int, stride:int=...) -> None: ...
    @overload
    def setAttributeValue(self, location:int, value:PySide6.QtGui.QVector2D) -> None: ...
    @overload
    def setAttributeValue(self, location:int, value:PySide6.QtGui.QVector3D) -> None: ...
    @overload
    def setAttributeValue(self, location:int, value:PySide6.QtGui.QVector4D) -> None: ...
    @overload
    def setAttributeValue(self, location:int, value:float) -> None: ...
    @overload
    def setAttributeValue(self, location:int, value:Union[PySide6.QtGui.QColor, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> None: ...
    @overload
    def setAttributeValue(self, location:int, values:Sequence[float], columns:int, rows:int) -> None: ...
    @overload
    def setAttributeValue(self, location:int, x:float, y:float) -> None: ...
    @overload
    def setAttributeValue(self, location:int, x:float, y:float, z:float) -> None: ...
    @overload
    def setAttributeValue(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, value:PySide6.QtGui.QVector2D) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, value:PySide6.QtGui.QVector3D) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, value:PySide6.QtGui.QVector4D) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, value:float) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, value:Union[PySide6.QtGui.QColor, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, values:Sequence[float], columns:int, rows:int) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, x:float, y:float) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, x:float, y:float, z:float) -> None: ...
    @overload
    def setAttributeValue(self, name:bytes, x:float, y:float, z:float, w:float) -> None: ...
    def setDefaultInnerTessellationLevels(self, levels:Sequence[float]) -> None: ...
    def setDefaultOuterTessellationLevels(self, levels:Sequence[float]) -> None: ...
    def setPatchVertexCount(self, count:int) -> None: ...
    @overload
    def setUniformValue(self, location:int, color:Union[PySide6.QtGui.QColor, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> None: ...
    @overload
    def setUniformValue(self, location:int, point:PySide6.QtCore.QPoint) -> None: ...
    @overload
    def setUniformValue(self, location:int, point:Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> None: ...
    @overload
    def setUniformValue(self, location:int, size:PySide6.QtCore.QSize) -> None: ...
    @overload
    def setUniformValue(self, location:int, size:Union[PySide6.QtCore.QSizeF, PySide6.QtCore.QSize]) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix2x2) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix2x3) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix2x4) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix3x2) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix3x3) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix3x4) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix4x2) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QMatrix4x3) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QTransform) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QVector2D) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QVector3D) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:PySide6.QtGui.QVector4D) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:float) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:Tuple[Tuple, Tuple]) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:Tuple[Tuple, Tuple, Tuple]) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:Tuple[Tuple, Tuple, Tuple, Tuple]) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:int) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:Union[PySide6.QtGui.QMatrix4x4, PySide6.QtGui.QTransform]) -> None: ...
    @overload
    def setUniformValue(self, location:int, value:int) -> None: ...
    @overload
    def setUniformValue(self, location:int, x:float, y:float) -> None: ...
    @overload
    def setUniformValue(self, location:int, x:float, y:float, z:float) -> None: ...
    @overload
    def setUniformValue(self, location:int, x:float, y:float, z:float, w:float) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, color:Union[PySide6.QtGui.QColor, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, point:PySide6.QtCore.QPoint) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, point:Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, size:PySide6.QtCore.QSize) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, size:Union[PySide6.QtCore.QSizeF, PySide6.QtCore.QSize]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix2x2) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix2x3) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix2x4) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix3x2) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix3x3) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix3x4) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix4x2) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QMatrix4x3) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QTransform) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QVector2D) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QVector3D) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:PySide6.QtGui.QVector4D) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:Tuple[Tuple, Tuple]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:Tuple[Tuple, Tuple, Tuple]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:Tuple[Tuple, Tuple, Tuple, Tuple]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, value:Union[PySide6.QtGui.QMatrix4x4, PySide6.QtGui.QTransform]) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, x:float, y:float) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, x:float, y:float, z:float) -> None: ...
    @overload
    def setUniformValue(self, name:bytes, x:float, y:float, z:float, w:float) -> None: ...
    @overload
    def setUniformValue1f(self, arg__1:bytes, arg__2:float) -> None: ...
    @overload
    def setUniformValue1f(self, arg__1:int, arg__2:float) -> None: ...
    @overload
    def setUniformValue1i(self, arg__1:bytes, arg__2:int) -> None: ...
    @overload
    def setUniformValue1i(self, arg__1:int, arg__2:int) -> None: ...
    @overload
    def setUniformValueArray(self, location:int, values:Sequence[float], count:int, tupleSize:int) -> None: ...
    @overload
    def setUniformValueArray(self, location:int, values:Sequence[int], count:int) -> None: ...
    @overload
    def setUniformValueArray(self, location:int, values:Sequence[int], count:int) -> None: ...
    @overload
    def setUniformValueArray(self, name:bytes, values:Sequence[float], count:int, tupleSize:int) -> None: ...
    @overload
    def setUniformValueArray(self, name:bytes, values:Sequence[int], count:int) -> None: ...
    @overload
    def setUniformValueArray(self, name:bytes, values:Sequence[int], count:int) -> None: ...
    def shaders(self) -> List[PySide6.QtOpenGL.QOpenGLShader]: ...
    @overload
    def uniformLocation(self, name:str) -> int: ...
    @overload
    def uniformLocation(self, name:bytes) -> int: ...
    @overload
    def uniformLocation(self, name:Union[PySide6.QtCore.QByteArray, bytes]) -> int: ...


class QOpenGLTexture(Shiboken.Object):

    BindingTarget1D          : QOpenGLTexture.BindingTarget = ... # 0x8068
    BindingTarget2D          : QOpenGLTexture.BindingTarget = ... # 0x8069
    BindingTarget3D          : QOpenGLTexture.BindingTarget = ... # 0x806a
    BindingTargetRectangle   : QOpenGLTexture.BindingTarget = ... # 0x84f6
    BindingTargetCubeMap     : QOpenGLTexture.BindingTarget = ... # 0x8514
    BindingTarget1DArray     : QOpenGLTexture.BindingTarget = ... # 0x8c1c
    BindingTarget2DArray     : QOpenGLTexture.BindingTarget = ... # 0x8c1d
    BindingTargetBuffer      : QOpenGLTexture.BindingTarget = ... # 0x8c2c
    BindingTargetCubeMapArray: QOpenGLTexture.BindingTarget = ... # 0x900a
    BindingTarget2DMultisample: QOpenGLTexture.BindingTarget = ... # 0x9104
    BindingTarget2DMultisampleArray: QOpenGLTexture.BindingTarget = ... # 0x9105
    CompareNever             : QOpenGLTexture.ComparisonFunction = ... # 0x200
    CompareLess              : QOpenGLTexture.ComparisonFunction = ... # 0x201
    CompareEqual             : QOpenGLTexture.ComparisonFunction = ... # 0x202
    CompareLessEqual         : QOpenGLTexture.ComparisonFunction = ... # 0x203
    CompareGreater           : QOpenGLTexture.ComparisonFunction = ... # 0x204
    CommpareNotEqual         : QOpenGLTexture.ComparisonFunction = ... # 0x205
    CompareNotEqual          : QOpenGLTexture.ComparisonFunction = ... # 0x205
    CompareGreaterEqual      : QOpenGLTexture.ComparisonFunction = ... # 0x206
    CompareAlways            : QOpenGLTexture.ComparisonFunction = ... # 0x207
    CompareNone              : QOpenGLTexture.ComparisonMode = ... # 0x0
    CompareRefToTexture      : QOpenGLTexture.ComparisonMode = ... # 0x884e
    DirectionS               : QOpenGLTexture.CoordinateDirection = ... # 0x2802
    DirectionT               : QOpenGLTexture.CoordinateDirection = ... # 0x2803
    DirectionR               : QOpenGLTexture.CoordinateDirection = ... # 0x8072
    CubeMapPositiveX         : QOpenGLTexture.CubeMapFace = ... # 0x8515
    CubeMapNegativeX         : QOpenGLTexture.CubeMapFace = ... # 0x8516
    CubeMapPositiveY         : QOpenGLTexture.CubeMapFace = ... # 0x8517
    CubeMapNegativeY         : QOpenGLTexture.CubeMapFace = ... # 0x8518
    CubeMapPositiveZ         : QOpenGLTexture.CubeMapFace = ... # 0x8519
    CubeMapNegativeZ         : QOpenGLTexture.CubeMapFace = ... # 0x851a
    StencilMode              : QOpenGLTexture.DepthStencilMode = ... # 0x1901
    DepthMode                : QOpenGLTexture.DepthStencilMode = ... # 0x1902
    ImmutableStorage         : QOpenGLTexture.Feature = ... # 0x1
    ImmutableMultisampleStorage: QOpenGLTexture.Feature = ... # 0x2
    TextureRectangle         : QOpenGLTexture.Feature = ... # 0x4
    TextureArrays            : QOpenGLTexture.Feature = ... # 0x8
    Texture3D                : QOpenGLTexture.Feature = ... # 0x10
    TextureMultisample       : QOpenGLTexture.Feature = ... # 0x20
    TextureBuffer            : QOpenGLTexture.Feature = ... # 0x40
    TextureCubeMapArrays     : QOpenGLTexture.Feature = ... # 0x80
    Swizzle                  : QOpenGLTexture.Feature = ... # 0x100
    StencilTexturing         : QOpenGLTexture.Feature = ... # 0x200
    AnisotropicFiltering     : QOpenGLTexture.Feature = ... # 0x400
    NPOTTextures             : QOpenGLTexture.Feature = ... # 0x800
    NPOTTextureRepeat        : QOpenGLTexture.Feature = ... # 0x1000
    Texture1D                : QOpenGLTexture.Feature = ... # 0x2000
    TextureComparisonOperators: QOpenGLTexture.Feature = ... # 0x4000
    TextureMipMapLevel       : QOpenGLTexture.Feature = ... # 0x8000
    MaxFeatureFlag           : QOpenGLTexture.Feature = ... # 0x10000
    Nearest                  : QOpenGLTexture.Filter = ... # 0x2600
    Linear                   : QOpenGLTexture.Filter = ... # 0x2601
    NearestMipMapNearest     : QOpenGLTexture.Filter = ... # 0x2700
    LinearMipMapNearest      : QOpenGLTexture.Filter = ... # 0x2701
    NearestMipMapLinear      : QOpenGLTexture.Filter = ... # 0x2702
    LinearMipMapLinear       : QOpenGLTexture.Filter = ... # 0x2703
    GenerateMipMaps          : QOpenGLTexture.MipMapGeneration = ... # 0x0
    DontGenerateMipMaps      : QOpenGLTexture.MipMapGeneration = ... # 0x1
    NoSourceFormat           : QOpenGLTexture.PixelFormat = ... # 0x0
    Stencil                  : QOpenGLTexture.PixelFormat = ... # 0x1901
    Depth                    : QOpenGLTexture.PixelFormat = ... # 0x1902
    Red                      : QOpenGLTexture.PixelFormat = ... # 0x1903
    Alpha                    : QOpenGLTexture.PixelFormat = ... # 0x1906
    RGB                      : QOpenGLTexture.PixelFormat = ... # 0x1907
    RGBA                     : QOpenGLTexture.PixelFormat = ... # 0x1908
    Luminance                : QOpenGLTexture.PixelFormat = ... # 0x1909
    LuminanceAlpha           : QOpenGLTexture.PixelFormat = ... # 0x190a
    BGR                      : QOpenGLTexture.PixelFormat = ... # 0x80e0
    BGRA                     : QOpenGLTexture.PixelFormat = ... # 0x80e1
    RG                       : QOpenGLTexture.PixelFormat = ... # 0x8227
    RG_Integer               : QOpenGLTexture.PixelFormat = ... # 0x8228
    DepthStencil             : QOpenGLTexture.PixelFormat = ... # 0x84f9
    Red_Integer              : QOpenGLTexture.PixelFormat = ... # 0x8d94
    RGB_Integer              : QOpenGLTexture.PixelFormat = ... # 0x8d98
    RGBA_Integer             : QOpenGLTexture.PixelFormat = ... # 0x8d99
    BGR_Integer              : QOpenGLTexture.PixelFormat = ... # 0x8d9a
    BGRA_Integer             : QOpenGLTexture.PixelFormat = ... # 0x8d9b
    NoPixelType              : QOpenGLTexture.PixelType = ... # 0x0
    Int8                     : QOpenGLTexture.PixelType = ... # 0x1400
    UInt8                    : QOpenGLTexture.PixelType = ... # 0x1401
    Int16                    : QOpenGLTexture.PixelType = ... # 0x1402
    UInt16                   : QOpenGLTexture.PixelType = ... # 0x1403
    Int32                    : QOpenGLTexture.PixelType = ... # 0x1404
    UInt32                   : QOpenGLTexture.PixelType = ... # 0x1405
    Float32                  : QOpenGLTexture.PixelType = ... # 0x1406
    Float16                  : QOpenGLTexture.PixelType = ... # 0x140b
    UInt8_RG3B2              : QOpenGLTexture.PixelType = ... # 0x8032
    UInt16_RGBA4             : QOpenGLTexture.PixelType = ... # 0x8033
    UInt16_RGB5A1            : QOpenGLTexture.PixelType = ... # 0x8034
    UInt32_RGBA8             : QOpenGLTexture.PixelType = ... # 0x8035
    UInt32_RGB10A2           : QOpenGLTexture.PixelType = ... # 0x8036
    UInt8_RG3B2_Rev          : QOpenGLTexture.PixelType = ... # 0x8362
    UInt16_R5G6B5            : QOpenGLTexture.PixelType = ... # 0x8363
    UInt16_R5G6B5_Rev        : QOpenGLTexture.PixelType = ... # 0x8364
    UInt16_RGBA4_Rev         : QOpenGLTexture.PixelType = ... # 0x8365
    UInt16_RGB5A1_Rev        : QOpenGLTexture.PixelType = ... # 0x8366
    UInt32_RGBA8_Rev         : QOpenGLTexture.PixelType = ... # 0x8367
    UInt32_RGB10A2_Rev       : QOpenGLTexture.PixelType = ... # 0x8368
    UInt32_D24S8             : QOpenGLTexture.PixelType = ... # 0x84fa
    UInt32_RG11B10F          : QOpenGLTexture.PixelType = ... # 0x8c3b
    UInt32_RGB9_E5           : QOpenGLTexture.PixelType = ... # 0x8c3e
    Float16OES               : QOpenGLTexture.PixelType = ... # 0x8d61
    Float32_D32_UInt32_S8_X24: QOpenGLTexture.PixelType = ... # 0x8dad
    SwizzleRed               : QOpenGLTexture.SwizzleComponent = ... # 0x8e42
    SwizzleGreen             : QOpenGLTexture.SwizzleComponent = ... # 0x8e43
    SwizzleBlue              : QOpenGLTexture.SwizzleComponent = ... # 0x8e44
    SwizzleAlpha             : QOpenGLTexture.SwizzleComponent = ... # 0x8e45
    ZeroValue                : QOpenGLTexture.SwizzleValue = ... # 0x0
    OneValue                 : QOpenGLTexture.SwizzleValue = ... # 0x1
    RedValue                 : QOpenGLTexture.SwizzleValue = ... # 0x1903
    GreenValue               : QOpenGLTexture.SwizzleValue = ... # 0x1904
    BlueValue                : QOpenGLTexture.SwizzleValue = ... # 0x1905
    AlphaValue               : QOpenGLTexture.SwizzleValue = ... # 0x1906
    Target1D                 : QOpenGLTexture.Target = ... # 0xde0
    Target2D                 : QOpenGLTexture.Target = ... # 0xde1
    Target3D                 : QOpenGLTexture.Target = ... # 0x806f
    TargetRectangle          : QOpenGLTexture.Target = ... # 0x84f5
    TargetCubeMap            : QOpenGLTexture.Target = ... # 0x8513
    Target1DArray            : QOpenGLTexture.Target = ... # 0x8c18
    Target2DArray            : QOpenGLTexture.Target = ... # 0x8c1a
    TargetBuffer             : QOpenGLTexture.Target = ... # 0x8c2a
    TargetCubeMapArray       : QOpenGLTexture.Target = ... # 0x9009
    Target2DMultisample      : QOpenGLTexture.Target = ... # 0x9100
    Target2DMultisampleArray : QOpenGLTexture.Target = ... # 0x9102
    NoFormat                 : QOpenGLTexture.TextureFormat = ... # 0x0
    DepthFormat              : QOpenGLTexture.TextureFormat = ... # 0x1902
    AlphaFormat              : QOpenGLTexture.TextureFormat = ... # 0x1906
    RGBFormat                : QOpenGLTexture.TextureFormat = ... # 0x1907
    RGBAFormat               : QOpenGLTexture.TextureFormat = ... # 0x1908
    LuminanceFormat          : QOpenGLTexture.TextureFormat = ... # 0x1909
    LuminanceAlphaFormat     : QOpenGLTexture.TextureFormat = ... # 0x190a
    RG3B2                    : QOpenGLTexture.TextureFormat = ... # 0x2a10
    RGB8_UNorm               : QOpenGLTexture.TextureFormat = ... # 0x8051
    RGB16_UNorm              : QOpenGLTexture.TextureFormat = ... # 0x8054
    RGBA4                    : QOpenGLTexture.TextureFormat = ... # 0x8056
    RGB5A1                   : QOpenGLTexture.TextureFormat = ... # 0x8057
    RGBA8_UNorm              : QOpenGLTexture.TextureFormat = ... # 0x8058
    RGBA16_UNorm             : QOpenGLTexture.TextureFormat = ... # 0x805b
    D16                      : QOpenGLTexture.TextureFormat = ... # 0x81a5
    D24                      : QOpenGLTexture.TextureFormat = ... # 0x81a6
    D32                      : QOpenGLTexture.TextureFormat = ... # 0x81a7
    R8_UNorm                 : QOpenGLTexture.TextureFormat = ... # 0x8229
    R16_UNorm                : QOpenGLTexture.TextureFormat = ... # 0x822a
    RG8_UNorm                : QOpenGLTexture.TextureFormat = ... # 0x822b
    RG16_UNorm               : QOpenGLTexture.TextureFormat = ... # 0x822c
    R16F                     : QOpenGLTexture.TextureFormat = ... # 0x822d
    R32F                     : QOpenGLTexture.TextureFormat = ... # 0x822e
    RG16F                    : QOpenGLTexture.TextureFormat = ... # 0x822f
    RG32F                    : QOpenGLTexture.TextureFormat = ... # 0x8230
    R8I                      : QOpenGLTexture.TextureFormat = ... # 0x8231
    R8U                      : QOpenGLTexture.TextureFormat = ... # 0x8232
    R16I                     : QOpenGLTexture.TextureFormat = ... # 0x8233
    R16U                     : QOpenGLTexture.TextureFormat = ... # 0x8234
    R32I                     : QOpenGLTexture.TextureFormat = ... # 0x8235
    R32U                     : QOpenGLTexture.TextureFormat = ... # 0x8236
    RG8I                     : QOpenGLTexture.TextureFormat = ... # 0x8237
    RG8U                     : QOpenGLTexture.TextureFormat = ... # 0x8238
    RG16I                    : QOpenGLTexture.TextureFormat = ... # 0x8239
    RG16U                    : QOpenGLTexture.TextureFormat = ... # 0x823a
    RG32I                    : QOpenGLTexture.TextureFormat = ... # 0x823b
    RG32U                    : QOpenGLTexture.TextureFormat = ... # 0x823c
    RGB_DXT1                 : QOpenGLTexture.TextureFormat = ... # 0x83f0
    RGBA_DXT1                : QOpenGLTexture.TextureFormat = ... # 0x83f1
    RGBA_DXT3                : QOpenGLTexture.TextureFormat = ... # 0x83f2
    RGBA_DXT5                : QOpenGLTexture.TextureFormat = ... # 0x83f3
    RGBA32F                  : QOpenGLTexture.TextureFormat = ... # 0x8814
    RGB32F                   : QOpenGLTexture.TextureFormat = ... # 0x8815
    RGBA16F                  : QOpenGLTexture.TextureFormat = ... # 0x881a
    RGB16F                   : QOpenGLTexture.TextureFormat = ... # 0x881b
    D24S8                    : QOpenGLTexture.TextureFormat = ... # 0x88f0
    RG11B10F                 : QOpenGLTexture.TextureFormat = ... # 0x8c3a
    RGB9E5                   : QOpenGLTexture.TextureFormat = ... # 0x8c3d
    SRGB8                    : QOpenGLTexture.TextureFormat = ... # 0x8c41
    SRGB8_Alpha8             : QOpenGLTexture.TextureFormat = ... # 0x8c43
    SRGB_DXT1                : QOpenGLTexture.TextureFormat = ... # 0x8c4c
    SRGB_Alpha_DXT1          : QOpenGLTexture.TextureFormat = ... # 0x8c4d
    SRGB_Alpha_DXT3          : QOpenGLTexture.TextureFormat = ... # 0x8c4e
    SRGB_Alpha_DXT5          : QOpenGLTexture.TextureFormat = ... # 0x8c4f
    D32F                     : QOpenGLTexture.TextureFormat = ... # 0x8cac
    D32FS8X24                : QOpenGLTexture.TextureFormat = ... # 0x8cad
    S8                       : QOpenGLTexture.TextureFormat = ... # 0x8d48
    R5G6B5                   : QOpenGLTexture.TextureFormat = ... # 0x8d62
    RGB8_ETC1                : QOpenGLTexture.TextureFormat = ... # 0x8d64
    RGBA32U                  : QOpenGLTexture.TextureFormat = ... # 0x8d70
    RGB32U                   : QOpenGLTexture.TextureFormat = ... # 0x8d71
    RGBA16U                  : QOpenGLTexture.TextureFormat = ... # 0x8d76
    RGB16U                   : QOpenGLTexture.TextureFormat = ... # 0x8d77
    RGBA8U                   : QOpenGLTexture.TextureFormat = ... # 0x8d7c
    RGB8U                    : QOpenGLTexture.TextureFormat = ... # 0x8d7d
    RGBA32I                  : QOpenGLTexture.TextureFormat = ... # 0x8d82
    RGB32I                   : QOpenGLTexture.TextureFormat = ... # 0x8d83
    RGBA16I                  : QOpenGLTexture.TextureFormat = ... # 0x8d88
    RGB16I                   : QOpenGLTexture.TextureFormat = ... # 0x8d89
    RGBA8I                   : QOpenGLTexture.TextureFormat = ... # 0x8d8e
    RGB8I                    : QOpenGLTexture.TextureFormat = ... # 0x8d8f
    R_ATI1N_UNorm            : QOpenGLTexture.TextureFormat = ... # 0x8dbb
    R_ATI1N_SNorm            : QOpenGLTexture.TextureFormat = ... # 0x8dbc
    RG_ATI2N_UNorm           : QOpenGLTexture.TextureFormat = ... # 0x8dbd
    RG_ATI2N_SNorm           : QOpenGLTexture.TextureFormat = ... # 0x8dbe
    RGB_BP_UNorm             : QOpenGLTexture.TextureFormat = ... # 0x8e8c
    SRGB_BP_UNorm            : QOpenGLTexture.TextureFormat = ... # 0x8e8d
    RGB_BP_SIGNED_FLOAT      : QOpenGLTexture.TextureFormat = ... # 0x8e8e
    RGB_BP_UNSIGNED_FLOAT    : QOpenGLTexture.TextureFormat = ... # 0x8e8f
    R8_SNorm                 : QOpenGLTexture.TextureFormat = ... # 0x8f94
    RG8_SNorm                : QOpenGLTexture.TextureFormat = ... # 0x8f95
    RGB8_SNorm               : QOpenGLTexture.TextureFormat = ... # 0x8f96
    RGBA8_SNorm              : QOpenGLTexture.TextureFormat = ... # 0x8f97
    R16_SNorm                : QOpenGLTexture.TextureFormat = ... # 0x8f98
    RG16_SNorm               : QOpenGLTexture.TextureFormat = ... # 0x8f99
    RGB16_SNorm              : QOpenGLTexture.TextureFormat = ... # 0x8f9a
    RGBA16_SNorm             : QOpenGLTexture.TextureFormat = ... # 0x8f9b
    RGB10A2                  : QOpenGLTexture.TextureFormat = ... # 0x906f
    R11_EAC_UNorm            : QOpenGLTexture.TextureFormat = ... # 0x9270
    R11_EAC_SNorm            : QOpenGLTexture.TextureFormat = ... # 0x9271
    RG11_EAC_UNorm           : QOpenGLTexture.TextureFormat = ... # 0x9272
    RG11_EAC_SNorm           : QOpenGLTexture.TextureFormat = ... # 0x9273
    RGB8_ETC2                : QOpenGLTexture.TextureFormat = ... # 0x9274
    SRGB8_ETC2               : QOpenGLTexture.TextureFormat = ... # 0x9275
    RGB8_PunchThrough_Alpha1_ETC2: QOpenGLTexture.TextureFormat = ... # 0x9276
    SRGB8_PunchThrough_Alpha1_ETC2: QOpenGLTexture.TextureFormat = ... # 0x9277
    RGBA8_ETC2_EAC           : QOpenGLTexture.TextureFormat = ... # 0x9278
    SRGB8_Alpha8_ETC2_EAC    : QOpenGLTexture.TextureFormat = ... # 0x9279
    RGBA_ASTC_4x4            : QOpenGLTexture.TextureFormat = ... # 0x93b0
    RGBA_ASTC_5x4            : QOpenGLTexture.TextureFormat = ... # 0x93b1
    RGBA_ASTC_5x5            : QOpenGLTexture.TextureFormat = ... # 0x93b2
    RGBA_ASTC_6x5            : QOpenGLTexture.TextureFormat = ... # 0x93b3
    RGBA_ASTC_6x6            : QOpenGLTexture.TextureFormat = ... # 0x93b4
    RGBA_ASTC_8x5            : QOpenGLTexture.TextureFormat = ... # 0x93b5
    RGBA_ASTC_8x6            : QOpenGLTexture.TextureFormat = ... # 0x93b6
    RGBA_ASTC_8x8            : QOpenGLTexture.TextureFormat = ... # 0x93b7
    RGBA_ASTC_10x5           : QOpenGLTexture.TextureFormat = ... # 0x93b8
    RGBA_ASTC_10x6           : QOpenGLTexture.TextureFormat = ... # 0x93b9
    RGBA_ASTC_10x8           : QOpenGLTexture.TextureFormat = ... # 0x93ba
    RGBA_ASTC_10x10          : QOpenGLTexture.TextureFormat = ... # 0x93bb
    RGBA_ASTC_12x10          : QOpenGLTexture.TextureFormat = ... # 0x93bc
    RGBA_ASTC_12x12          : QOpenGLTexture.TextureFormat = ... # 0x93bd
    SRGB8_Alpha8_ASTC_4x4    : QOpenGLTexture.TextureFormat = ... # 0x93d0
    SRGB8_Alpha8_ASTC_5x4    : QOpenGLTexture.TextureFormat = ... # 0x93d1
    SRGB8_Alpha8_ASTC_5x5    : QOpenGLTexture.TextureFormat = ... # 0x93d2
    SRGB8_Alpha8_ASTC_6x5    : QOpenGLTexture.TextureFormat = ... # 0x93d3
    SRGB8_Alpha8_ASTC_6x6    : QOpenGLTexture.TextureFormat = ... # 0x93d4
    SRGB8_Alpha8_ASTC_8x5    : QOpenGLTexture.TextureFormat = ... # 0x93d5
    SRGB8_Alpha8_ASTC_8x6    : QOpenGLTexture.TextureFormat = ... # 0x93d6
    SRGB8_Alpha8_ASTC_8x8    : QOpenGLTexture.TextureFormat = ... # 0x93d7
    SRGB8_Alpha8_ASTC_10x5   : QOpenGLTexture.TextureFormat = ... # 0x93d8
    SRGB8_Alpha8_ASTC_10x6   : QOpenGLTexture.TextureFormat = ... # 0x93d9
    SRGB8_Alpha8_ASTC_10x8   : QOpenGLTexture.TextureFormat = ... # 0x93da
    SRGB8_Alpha8_ASTC_10x10  : QOpenGLTexture.TextureFormat = ... # 0x93db
    SRGB8_Alpha8_ASTC_12x10  : QOpenGLTexture.TextureFormat = ... # 0x93dc
    SRGB8_Alpha8_ASTC_12x12  : QOpenGLTexture.TextureFormat = ... # 0x93dd
    NoFormatClass            : QOpenGLTexture.TextureFormatClass = ... # 0x0
    FormatClass_128Bit       : QOpenGLTexture.TextureFormatClass = ... # 0x1
    FormatClass_96Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x2
    FormatClass_64Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x3
    FormatClass_48Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x4
    FormatClass_32Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x5
    FormatClass_24Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x6
    FormatClass_16Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x7
    FormatClass_8Bit         : QOpenGLTexture.TextureFormatClass = ... # 0x8
    FormatClass_RGTC1_R      : QOpenGLTexture.TextureFormatClass = ... # 0x9
    FormatClass_RGTC2_RG     : QOpenGLTexture.TextureFormatClass = ... # 0xa
    FormatClass_BPTC_Unorm   : QOpenGLTexture.TextureFormatClass = ... # 0xb
    FormatClass_BPTC_Float   : QOpenGLTexture.TextureFormatClass = ... # 0xc
    FormatClass_S3TC_DXT1_RGB: QOpenGLTexture.TextureFormatClass = ... # 0xd
    FormatClass_S3TC_DXT1_RGBA: QOpenGLTexture.TextureFormatClass = ... # 0xe
    FormatClass_S3TC_DXT3_RGBA: QOpenGLTexture.TextureFormatClass = ... # 0xf
    FormatClass_S3TC_DXT5_RGBA: QOpenGLTexture.TextureFormatClass = ... # 0x10
    FormatClass_Unique       : QOpenGLTexture.TextureFormatClass = ... # 0x11
    ResetTextureUnit         : QOpenGLTexture.TextureUnitReset = ... # 0x0
    DontResetTextureUnit     : QOpenGLTexture.TextureUnitReset = ... # 0x1
    Repeat                   : QOpenGLTexture.WrapMode = ... # 0x2901
    ClampToBorder            : QOpenGLTexture.WrapMode = ... # 0x812d
    ClampToEdge              : QOpenGLTexture.WrapMode = ... # 0x812f
    MirroredRepeat           : QOpenGLTexture.WrapMode = ... # 0x8370

    class BindingTarget(Shiboken.Enum):

        BindingTarget1D          : QOpenGLTexture.BindingTarget = ... # 0x8068
        BindingTarget2D          : QOpenGLTexture.BindingTarget = ... # 0x8069
        BindingTarget3D          : QOpenGLTexture.BindingTarget = ... # 0x806a
        BindingTargetRectangle   : QOpenGLTexture.BindingTarget = ... # 0x84f6
        BindingTargetCubeMap     : QOpenGLTexture.BindingTarget = ... # 0x8514
        BindingTarget1DArray     : QOpenGLTexture.BindingTarget = ... # 0x8c1c
        BindingTarget2DArray     : QOpenGLTexture.BindingTarget = ... # 0x8c1d
        BindingTargetBuffer      : QOpenGLTexture.BindingTarget = ... # 0x8c2c
        BindingTargetCubeMapArray: QOpenGLTexture.BindingTarget = ... # 0x900a
        BindingTarget2DMultisample: QOpenGLTexture.BindingTarget = ... # 0x9104
        BindingTarget2DMultisampleArray: QOpenGLTexture.BindingTarget = ... # 0x9105

    class ComparisonFunction(Shiboken.Enum):

        CompareNever             : QOpenGLTexture.ComparisonFunction = ... # 0x200
        CompareLess              : QOpenGLTexture.ComparisonFunction = ... # 0x201
        CompareEqual             : QOpenGLTexture.ComparisonFunction = ... # 0x202
        CompareLessEqual         : QOpenGLTexture.ComparisonFunction = ... # 0x203
        CompareGreater           : QOpenGLTexture.ComparisonFunction = ... # 0x204
        CommpareNotEqual         : QOpenGLTexture.ComparisonFunction = ... # 0x205
        CompareNotEqual          : QOpenGLTexture.ComparisonFunction = ... # 0x205
        CompareGreaterEqual      : QOpenGLTexture.ComparisonFunction = ... # 0x206
        CompareAlways            : QOpenGLTexture.ComparisonFunction = ... # 0x207

    class ComparisonMode(Shiboken.Enum):

        CompareNone              : QOpenGLTexture.ComparisonMode = ... # 0x0
        CompareRefToTexture      : QOpenGLTexture.ComparisonMode = ... # 0x884e

    class CoordinateDirection(Shiboken.Enum):

        DirectionS               : QOpenGLTexture.CoordinateDirection = ... # 0x2802
        DirectionT               : QOpenGLTexture.CoordinateDirection = ... # 0x2803
        DirectionR               : QOpenGLTexture.CoordinateDirection = ... # 0x8072

    class CubeMapFace(Shiboken.Enum):

        CubeMapPositiveX         : QOpenGLTexture.CubeMapFace = ... # 0x8515
        CubeMapNegativeX         : QOpenGLTexture.CubeMapFace = ... # 0x8516
        CubeMapPositiveY         : QOpenGLTexture.CubeMapFace = ... # 0x8517
        CubeMapNegativeY         : QOpenGLTexture.CubeMapFace = ... # 0x8518
        CubeMapPositiveZ         : QOpenGLTexture.CubeMapFace = ... # 0x8519
        CubeMapNegativeZ         : QOpenGLTexture.CubeMapFace = ... # 0x851a

    class DepthStencilMode(Shiboken.Enum):

        StencilMode              : QOpenGLTexture.DepthStencilMode = ... # 0x1901
        DepthMode                : QOpenGLTexture.DepthStencilMode = ... # 0x1902

    class Feature(Shiboken.Enum):

        ImmutableStorage         : QOpenGLTexture.Feature = ... # 0x1
        ImmutableMultisampleStorage: QOpenGLTexture.Feature = ... # 0x2
        TextureRectangle         : QOpenGLTexture.Feature = ... # 0x4
        TextureArrays            : QOpenGLTexture.Feature = ... # 0x8
        Texture3D                : QOpenGLTexture.Feature = ... # 0x10
        TextureMultisample       : QOpenGLTexture.Feature = ... # 0x20
        TextureBuffer            : QOpenGLTexture.Feature = ... # 0x40
        TextureCubeMapArrays     : QOpenGLTexture.Feature = ... # 0x80
        Swizzle                  : QOpenGLTexture.Feature = ... # 0x100
        StencilTexturing         : QOpenGLTexture.Feature = ... # 0x200
        AnisotropicFiltering     : QOpenGLTexture.Feature = ... # 0x400
        NPOTTextures             : QOpenGLTexture.Feature = ... # 0x800
        NPOTTextureRepeat        : QOpenGLTexture.Feature = ... # 0x1000
        Texture1D                : QOpenGLTexture.Feature = ... # 0x2000
        TextureComparisonOperators: QOpenGLTexture.Feature = ... # 0x4000
        TextureMipMapLevel       : QOpenGLTexture.Feature = ... # 0x8000
        MaxFeatureFlag           : QOpenGLTexture.Feature = ... # 0x10000

    class Features(object): ...

    class Filter(Shiboken.Enum):

        Nearest                  : QOpenGLTexture.Filter = ... # 0x2600
        Linear                   : QOpenGLTexture.Filter = ... # 0x2601
        NearestMipMapNearest     : QOpenGLTexture.Filter = ... # 0x2700
        LinearMipMapNearest      : QOpenGLTexture.Filter = ... # 0x2701
        NearestMipMapLinear      : QOpenGLTexture.Filter = ... # 0x2702
        LinearMipMapLinear       : QOpenGLTexture.Filter = ... # 0x2703

    class MipMapGeneration(Shiboken.Enum):

        GenerateMipMaps          : QOpenGLTexture.MipMapGeneration = ... # 0x0
        DontGenerateMipMaps      : QOpenGLTexture.MipMapGeneration = ... # 0x1

    class PixelFormat(Shiboken.Enum):

        NoSourceFormat           : QOpenGLTexture.PixelFormat = ... # 0x0
        Stencil                  : QOpenGLTexture.PixelFormat = ... # 0x1901
        Depth                    : QOpenGLTexture.PixelFormat = ... # 0x1902
        Red                      : QOpenGLTexture.PixelFormat = ... # 0x1903
        Alpha                    : QOpenGLTexture.PixelFormat = ... # 0x1906
        RGB                      : QOpenGLTexture.PixelFormat = ... # 0x1907
        RGBA                     : QOpenGLTexture.PixelFormat = ... # 0x1908
        Luminance                : QOpenGLTexture.PixelFormat = ... # 0x1909
        LuminanceAlpha           : QOpenGLTexture.PixelFormat = ... # 0x190a
        BGR                      : QOpenGLTexture.PixelFormat = ... # 0x80e0
        BGRA                     : QOpenGLTexture.PixelFormat = ... # 0x80e1
        RG                       : QOpenGLTexture.PixelFormat = ... # 0x8227
        RG_Integer               : QOpenGLTexture.PixelFormat = ... # 0x8228
        DepthStencil             : QOpenGLTexture.PixelFormat = ... # 0x84f9
        Red_Integer              : QOpenGLTexture.PixelFormat = ... # 0x8d94
        RGB_Integer              : QOpenGLTexture.PixelFormat = ... # 0x8d98
        RGBA_Integer             : QOpenGLTexture.PixelFormat = ... # 0x8d99
        BGR_Integer              : QOpenGLTexture.PixelFormat = ... # 0x8d9a
        BGRA_Integer             : QOpenGLTexture.PixelFormat = ... # 0x8d9b

    class PixelType(Shiboken.Enum):

        NoPixelType              : QOpenGLTexture.PixelType = ... # 0x0
        Int8                     : QOpenGLTexture.PixelType = ... # 0x1400
        UInt8                    : QOpenGLTexture.PixelType = ... # 0x1401
        Int16                    : QOpenGLTexture.PixelType = ... # 0x1402
        UInt16                   : QOpenGLTexture.PixelType = ... # 0x1403
        Int32                    : QOpenGLTexture.PixelType = ... # 0x1404
        UInt32                   : QOpenGLTexture.PixelType = ... # 0x1405
        Float32                  : QOpenGLTexture.PixelType = ... # 0x1406
        Float16                  : QOpenGLTexture.PixelType = ... # 0x140b
        UInt8_RG3B2              : QOpenGLTexture.PixelType = ... # 0x8032
        UInt16_RGBA4             : QOpenGLTexture.PixelType = ... # 0x8033
        UInt16_RGB5A1            : QOpenGLTexture.PixelType = ... # 0x8034
        UInt32_RGBA8             : QOpenGLTexture.PixelType = ... # 0x8035
        UInt32_RGB10A2           : QOpenGLTexture.PixelType = ... # 0x8036
        UInt8_RG3B2_Rev          : QOpenGLTexture.PixelType = ... # 0x8362
        UInt16_R5G6B5            : QOpenGLTexture.PixelType = ... # 0x8363
        UInt16_R5G6B5_Rev        : QOpenGLTexture.PixelType = ... # 0x8364
        UInt16_RGBA4_Rev         : QOpenGLTexture.PixelType = ... # 0x8365
        UInt16_RGB5A1_Rev        : QOpenGLTexture.PixelType = ... # 0x8366
        UInt32_RGBA8_Rev         : QOpenGLTexture.PixelType = ... # 0x8367
        UInt32_RGB10A2_Rev       : QOpenGLTexture.PixelType = ... # 0x8368
        UInt32_D24S8             : QOpenGLTexture.PixelType = ... # 0x84fa
        UInt32_RG11B10F          : QOpenGLTexture.PixelType = ... # 0x8c3b
        UInt32_RGB9_E5           : QOpenGLTexture.PixelType = ... # 0x8c3e
        Float16OES               : QOpenGLTexture.PixelType = ... # 0x8d61
        Float32_D32_UInt32_S8_X24: QOpenGLTexture.PixelType = ... # 0x8dad

    class SwizzleComponent(Shiboken.Enum):

        SwizzleRed               : QOpenGLTexture.SwizzleComponent = ... # 0x8e42
        SwizzleGreen             : QOpenGLTexture.SwizzleComponent = ... # 0x8e43
        SwizzleBlue              : QOpenGLTexture.SwizzleComponent = ... # 0x8e44
        SwizzleAlpha             : QOpenGLTexture.SwizzleComponent = ... # 0x8e45

    class SwizzleValue(Shiboken.Enum):

        ZeroValue                : QOpenGLTexture.SwizzleValue = ... # 0x0
        OneValue                 : QOpenGLTexture.SwizzleValue = ... # 0x1
        RedValue                 : QOpenGLTexture.SwizzleValue = ... # 0x1903
        GreenValue               : QOpenGLTexture.SwizzleValue = ... # 0x1904
        BlueValue                : QOpenGLTexture.SwizzleValue = ... # 0x1905
        AlphaValue               : QOpenGLTexture.SwizzleValue = ... # 0x1906

    class Target(Shiboken.Enum):

        Target1D                 : QOpenGLTexture.Target = ... # 0xde0
        Target2D                 : QOpenGLTexture.Target = ... # 0xde1
        Target3D                 : QOpenGLTexture.Target = ... # 0x806f
        TargetRectangle          : QOpenGLTexture.Target = ... # 0x84f5
        TargetCubeMap            : QOpenGLTexture.Target = ... # 0x8513
        Target1DArray            : QOpenGLTexture.Target = ... # 0x8c18
        Target2DArray            : QOpenGLTexture.Target = ... # 0x8c1a
        TargetBuffer             : QOpenGLTexture.Target = ... # 0x8c2a
        TargetCubeMapArray       : QOpenGLTexture.Target = ... # 0x9009
        Target2DMultisample      : QOpenGLTexture.Target = ... # 0x9100
        Target2DMultisampleArray : QOpenGLTexture.Target = ... # 0x9102

    class TextureFormat(Shiboken.Enum):

        NoFormat                 : QOpenGLTexture.TextureFormat = ... # 0x0
        DepthFormat              : QOpenGLTexture.TextureFormat = ... # 0x1902
        AlphaFormat              : QOpenGLTexture.TextureFormat = ... # 0x1906
        RGBFormat                : QOpenGLTexture.TextureFormat = ... # 0x1907
        RGBAFormat               : QOpenGLTexture.TextureFormat = ... # 0x1908
        LuminanceFormat          : QOpenGLTexture.TextureFormat = ... # 0x1909
        LuminanceAlphaFormat     : QOpenGLTexture.TextureFormat = ... # 0x190a
        RG3B2                    : QOpenGLTexture.TextureFormat = ... # 0x2a10
        RGB8_UNorm               : QOpenGLTexture.TextureFormat = ... # 0x8051
        RGB16_UNorm              : QOpenGLTexture.TextureFormat = ... # 0x8054
        RGBA4                    : QOpenGLTexture.TextureFormat = ... # 0x8056
        RGB5A1                   : QOpenGLTexture.TextureFormat = ... # 0x8057
        RGBA8_UNorm              : QOpenGLTexture.TextureFormat = ... # 0x8058
        RGBA16_UNorm             : QOpenGLTexture.TextureFormat = ... # 0x805b
        D16                      : QOpenGLTexture.TextureFormat = ... # 0x81a5
        D24                      : QOpenGLTexture.TextureFormat = ... # 0x81a6
        D32                      : QOpenGLTexture.TextureFormat = ... # 0x81a7
        R8_UNorm                 : QOpenGLTexture.TextureFormat = ... # 0x8229
        R16_UNorm                : QOpenGLTexture.TextureFormat = ... # 0x822a
        RG8_UNorm                : QOpenGLTexture.TextureFormat = ... # 0x822b
        RG16_UNorm               : QOpenGLTexture.TextureFormat = ... # 0x822c
        R16F                     : QOpenGLTexture.TextureFormat = ... # 0x822d
        R32F                     : QOpenGLTexture.TextureFormat = ... # 0x822e
        RG16F                    : QOpenGLTexture.TextureFormat = ... # 0x822f
        RG32F                    : QOpenGLTexture.TextureFormat = ... # 0x8230
        R8I                      : QOpenGLTexture.TextureFormat = ... # 0x8231
        R8U                      : QOpenGLTexture.TextureFormat = ... # 0x8232
        R16I                     : QOpenGLTexture.TextureFormat = ... # 0x8233
        R16U                     : QOpenGLTexture.TextureFormat = ... # 0x8234
        R32I                     : QOpenGLTexture.TextureFormat = ... # 0x8235
        R32U                     : QOpenGLTexture.TextureFormat = ... # 0x8236
        RG8I                     : QOpenGLTexture.TextureFormat = ... # 0x8237
        RG8U                     : QOpenGLTexture.TextureFormat = ... # 0x8238
        RG16I                    : QOpenGLTexture.TextureFormat = ... # 0x8239
        RG16U                    : QOpenGLTexture.TextureFormat = ... # 0x823a
        RG32I                    : QOpenGLTexture.TextureFormat = ... # 0x823b
        RG32U                    : QOpenGLTexture.TextureFormat = ... # 0x823c
        RGB_DXT1                 : QOpenGLTexture.TextureFormat = ... # 0x83f0
        RGBA_DXT1                : QOpenGLTexture.TextureFormat = ... # 0x83f1
        RGBA_DXT3                : QOpenGLTexture.TextureFormat = ... # 0x83f2
        RGBA_DXT5                : QOpenGLTexture.TextureFormat = ... # 0x83f3
        RGBA32F                  : QOpenGLTexture.TextureFormat = ... # 0x8814
        RGB32F                   : QOpenGLTexture.TextureFormat = ... # 0x8815
        RGBA16F                  : QOpenGLTexture.TextureFormat = ... # 0x881a
        RGB16F                   : QOpenGLTexture.TextureFormat = ... # 0x881b
        D24S8                    : QOpenGLTexture.TextureFormat = ... # 0x88f0
        RG11B10F                 : QOpenGLTexture.TextureFormat = ... # 0x8c3a
        RGB9E5                   : QOpenGLTexture.TextureFormat = ... # 0x8c3d
        SRGB8                    : QOpenGLTexture.TextureFormat = ... # 0x8c41
        SRGB8_Alpha8             : QOpenGLTexture.TextureFormat = ... # 0x8c43
        SRGB_DXT1                : QOpenGLTexture.TextureFormat = ... # 0x8c4c
        SRGB_Alpha_DXT1          : QOpenGLTexture.TextureFormat = ... # 0x8c4d
        SRGB_Alpha_DXT3          : QOpenGLTexture.TextureFormat = ... # 0x8c4e
        SRGB_Alpha_DXT5          : QOpenGLTexture.TextureFormat = ... # 0x8c4f
        D32F                     : QOpenGLTexture.TextureFormat = ... # 0x8cac
        D32FS8X24                : QOpenGLTexture.TextureFormat = ... # 0x8cad
        S8                       : QOpenGLTexture.TextureFormat = ... # 0x8d48
        R5G6B5                   : QOpenGLTexture.TextureFormat = ... # 0x8d62
        RGB8_ETC1                : QOpenGLTexture.TextureFormat = ... # 0x8d64
        RGBA32U                  : QOpenGLTexture.TextureFormat = ... # 0x8d70
        RGB32U                   : QOpenGLTexture.TextureFormat = ... # 0x8d71
        RGBA16U                  : QOpenGLTexture.TextureFormat = ... # 0x8d76
        RGB16U                   : QOpenGLTexture.TextureFormat = ... # 0x8d77
        RGBA8U                   : QOpenGLTexture.TextureFormat = ... # 0x8d7c
        RGB8U                    : QOpenGLTexture.TextureFormat = ... # 0x8d7d
        RGBA32I                  : QOpenGLTexture.TextureFormat = ... # 0x8d82
        RGB32I                   : QOpenGLTexture.TextureFormat = ... # 0x8d83
        RGBA16I                  : QOpenGLTexture.TextureFormat = ... # 0x8d88
        RGB16I                   : QOpenGLTexture.TextureFormat = ... # 0x8d89
        RGBA8I                   : QOpenGLTexture.TextureFormat = ... # 0x8d8e
        RGB8I                    : QOpenGLTexture.TextureFormat = ... # 0x8d8f
        R_ATI1N_UNorm            : QOpenGLTexture.TextureFormat = ... # 0x8dbb
        R_ATI1N_SNorm            : QOpenGLTexture.TextureFormat = ... # 0x8dbc
        RG_ATI2N_UNorm           : QOpenGLTexture.TextureFormat = ... # 0x8dbd
        RG_ATI2N_SNorm           : QOpenGLTexture.TextureFormat = ... # 0x8dbe
        RGB_BP_UNorm             : QOpenGLTexture.TextureFormat = ... # 0x8e8c
        SRGB_BP_UNorm            : QOpenGLTexture.TextureFormat = ... # 0x8e8d
        RGB_BP_SIGNED_FLOAT      : QOpenGLTexture.TextureFormat = ... # 0x8e8e
        RGB_BP_UNSIGNED_FLOAT    : QOpenGLTexture.TextureFormat = ... # 0x8e8f
        R8_SNorm                 : QOpenGLTexture.TextureFormat = ... # 0x8f94
        RG8_SNorm                : QOpenGLTexture.TextureFormat = ... # 0x8f95
        RGB8_SNorm               : QOpenGLTexture.TextureFormat = ... # 0x8f96
        RGBA8_SNorm              : QOpenGLTexture.TextureFormat = ... # 0x8f97
        R16_SNorm                : QOpenGLTexture.TextureFormat = ... # 0x8f98
        RG16_SNorm               : QOpenGLTexture.TextureFormat = ... # 0x8f99
        RGB16_SNorm              : QOpenGLTexture.TextureFormat = ... # 0x8f9a
        RGBA16_SNorm             : QOpenGLTexture.TextureFormat = ... # 0x8f9b
        RGB10A2                  : QOpenGLTexture.TextureFormat = ... # 0x906f
        R11_EAC_UNorm            : QOpenGLTexture.TextureFormat = ... # 0x9270
        R11_EAC_SNorm            : QOpenGLTexture.TextureFormat = ... # 0x9271
        RG11_EAC_UNorm           : QOpenGLTexture.TextureFormat = ... # 0x9272
        RG11_EAC_SNorm           : QOpenGLTexture.TextureFormat = ... # 0x9273
        RGB8_ETC2                : QOpenGLTexture.TextureFormat = ... # 0x9274
        SRGB8_ETC2               : QOpenGLTexture.TextureFormat = ... # 0x9275
        RGB8_PunchThrough_Alpha1_ETC2: QOpenGLTexture.TextureFormat = ... # 0x9276
        SRGB8_PunchThrough_Alpha1_ETC2: QOpenGLTexture.TextureFormat = ... # 0x9277
        RGBA8_ETC2_EAC           : QOpenGLTexture.TextureFormat = ... # 0x9278
        SRGB8_Alpha8_ETC2_EAC    : QOpenGLTexture.TextureFormat = ... # 0x9279
        RGBA_ASTC_4x4            : QOpenGLTexture.TextureFormat = ... # 0x93b0
        RGBA_ASTC_5x4            : QOpenGLTexture.TextureFormat = ... # 0x93b1
        RGBA_ASTC_5x5            : QOpenGLTexture.TextureFormat = ... # 0x93b2
        RGBA_ASTC_6x5            : QOpenGLTexture.TextureFormat = ... # 0x93b3
        RGBA_ASTC_6x6            : QOpenGLTexture.TextureFormat = ... # 0x93b4
        RGBA_ASTC_8x5            : QOpenGLTexture.TextureFormat = ... # 0x93b5
        RGBA_ASTC_8x6            : QOpenGLTexture.TextureFormat = ... # 0x93b6
        RGBA_ASTC_8x8            : QOpenGLTexture.TextureFormat = ... # 0x93b7
        RGBA_ASTC_10x5           : QOpenGLTexture.TextureFormat = ... # 0x93b8
        RGBA_ASTC_10x6           : QOpenGLTexture.TextureFormat = ... # 0x93b9
        RGBA_ASTC_10x8           : QOpenGLTexture.TextureFormat = ... # 0x93ba
        RGBA_ASTC_10x10          : QOpenGLTexture.TextureFormat = ... # 0x93bb
        RGBA_ASTC_12x10          : QOpenGLTexture.TextureFormat = ... # 0x93bc
        RGBA_ASTC_12x12          : QOpenGLTexture.TextureFormat = ... # 0x93bd
        SRGB8_Alpha8_ASTC_4x4    : QOpenGLTexture.TextureFormat = ... # 0x93d0
        SRGB8_Alpha8_ASTC_5x4    : QOpenGLTexture.TextureFormat = ... # 0x93d1
        SRGB8_Alpha8_ASTC_5x5    : QOpenGLTexture.TextureFormat = ... # 0x93d2
        SRGB8_Alpha8_ASTC_6x5    : QOpenGLTexture.TextureFormat = ... # 0x93d3
        SRGB8_Alpha8_ASTC_6x6    : QOpenGLTexture.TextureFormat = ... # 0x93d4
        SRGB8_Alpha8_ASTC_8x5    : QOpenGLTexture.TextureFormat = ... # 0x93d5
        SRGB8_Alpha8_ASTC_8x6    : QOpenGLTexture.TextureFormat = ... # 0x93d6
        SRGB8_Alpha8_ASTC_8x8    : QOpenGLTexture.TextureFormat = ... # 0x93d7
        SRGB8_Alpha8_ASTC_10x5   : QOpenGLTexture.TextureFormat = ... # 0x93d8
        SRGB8_Alpha8_ASTC_10x6   : QOpenGLTexture.TextureFormat = ... # 0x93d9
        SRGB8_Alpha8_ASTC_10x8   : QOpenGLTexture.TextureFormat = ... # 0x93da
        SRGB8_Alpha8_ASTC_10x10  : QOpenGLTexture.TextureFormat = ... # 0x93db
        SRGB8_Alpha8_ASTC_12x10  : QOpenGLTexture.TextureFormat = ... # 0x93dc
        SRGB8_Alpha8_ASTC_12x12  : QOpenGLTexture.TextureFormat = ... # 0x93dd

    class TextureFormatClass(Shiboken.Enum):

        NoFormatClass            : QOpenGLTexture.TextureFormatClass = ... # 0x0
        FormatClass_128Bit       : QOpenGLTexture.TextureFormatClass = ... # 0x1
        FormatClass_96Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x2
        FormatClass_64Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x3
        FormatClass_48Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x4
        FormatClass_32Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x5
        FormatClass_24Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x6
        FormatClass_16Bit        : QOpenGLTexture.TextureFormatClass = ... # 0x7
        FormatClass_8Bit         : QOpenGLTexture.TextureFormatClass = ... # 0x8
        FormatClass_RGTC1_R      : QOpenGLTexture.TextureFormatClass = ... # 0x9
        FormatClass_RGTC2_RG     : QOpenGLTexture.TextureFormatClass = ... # 0xa
        FormatClass_BPTC_Unorm   : QOpenGLTexture.TextureFormatClass = ... # 0xb
        FormatClass_BPTC_Float   : QOpenGLTexture.TextureFormatClass = ... # 0xc
        FormatClass_S3TC_DXT1_RGB: QOpenGLTexture.TextureFormatClass = ... # 0xd
        FormatClass_S3TC_DXT1_RGBA: QOpenGLTexture.TextureFormatClass = ... # 0xe
        FormatClass_S3TC_DXT3_RGBA: QOpenGLTexture.TextureFormatClass = ... # 0xf
        FormatClass_S3TC_DXT5_RGBA: QOpenGLTexture.TextureFormatClass = ... # 0x10
        FormatClass_Unique       : QOpenGLTexture.TextureFormatClass = ... # 0x11

    class TextureUnitReset(Shiboken.Enum):

        ResetTextureUnit         : QOpenGLTexture.TextureUnitReset = ... # 0x0
        DontResetTextureUnit     : QOpenGLTexture.TextureUnitReset = ... # 0x1

    class WrapMode(Shiboken.Enum):

        Repeat                   : QOpenGLTexture.WrapMode = ... # 0x2901
        ClampToBorder            : QOpenGLTexture.WrapMode = ... # 0x812d
        ClampToEdge              : QOpenGLTexture.WrapMode = ... # 0x812f
        MirroredRepeat           : QOpenGLTexture.WrapMode = ... # 0x8370


    @overload
    def __init__(self, image:Union[PySide6.QtGui.QImage, str], genMipMaps:PySide6.QtOpenGL.QOpenGLTexture.MipMapGeneration=...) -> None: ...
    @overload
    def __init__(self, target:PySide6.QtOpenGL.QOpenGLTexture.Target) -> None: ...

    @overload
    def allocateStorage(self) -> None: ...
    @overload
    def allocateStorage(self, pixelFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, pixelType:PySide6.QtOpenGL.QOpenGLTexture.PixelType) -> None: ...
    @overload
    def bind(self) -> None: ...
    @overload
    def bind(self, unit:int, reset:PySide6.QtOpenGL.QOpenGLTexture.TextureUnitReset=...) -> None: ...
    def borderColor(self) -> PySide6.QtGui.QColor: ...
    @overload
    @staticmethod
    def boundTextureId(target:PySide6.QtOpenGL.QOpenGLTexture.BindingTarget) -> int: ...
    @overload
    @staticmethod
    def boundTextureId(unit:int, target:PySide6.QtOpenGL.QOpenGLTexture.BindingTarget) -> int: ...
    def comparisonFunction(self) -> PySide6.QtOpenGL.QOpenGLTexture.ComparisonFunction: ...
    def comparisonMode(self) -> PySide6.QtOpenGL.QOpenGLTexture.ComparisonMode: ...
    def create(self) -> bool: ...
    def createTextureView(self, target:PySide6.QtOpenGL.QOpenGLTexture.Target, viewFormat:PySide6.QtOpenGL.QOpenGLTexture.TextureFormat, minimumMipmapLevel:int, maximumMipmapLevel:int, minimumLayer:int, maximumLayer:int) -> PySide6.QtOpenGL.QOpenGLTexture: ...
    def depth(self) -> int: ...
    def depthStencilMode(self) -> PySide6.QtOpenGL.QOpenGLTexture.DepthStencilMode: ...
    def destroy(self) -> None: ...
    def faces(self) -> int: ...
    def format(self) -> PySide6.QtOpenGL.QOpenGLTexture.TextureFormat: ...
    @overload
    def generateMipMaps(self) -> None: ...
    @overload
    def generateMipMaps(self, baseLevel:int, resetBaseLevel:bool=...) -> None: ...
    @staticmethod
    def hasFeature(feature:PySide6.QtOpenGL.QOpenGLTexture.Feature) -> bool: ...
    def height(self) -> int: ...
    def isAutoMipMapGenerationEnabled(self) -> bool: ...
    @overload
    def isBound(self) -> bool: ...
    @overload
    def isBound(self, unit:int) -> bool: ...
    def isCreated(self) -> bool: ...
    def isFixedSamplePositions(self) -> bool: ...
    def isStorageAllocated(self) -> bool: ...
    def isTextureView(self) -> bool: ...
    def layers(self) -> int: ...
    def levelOfDetailRange(self) -> Tuple[float, float]: ...
    def levelofDetailBias(self) -> float: ...
    def magnificationFilter(self) -> PySide6.QtOpenGL.QOpenGLTexture.Filter: ...
    def maximumAnisotropy(self) -> float: ...
    def maximumLevelOfDetail(self) -> float: ...
    def maximumMipLevels(self) -> int: ...
    def minMagFilters(self) -> Tuple[PySide6.QtOpenGL.QOpenGLTexture.Filter, PySide6.QtOpenGL.QOpenGLTexture.Filter]: ...
    def minificationFilter(self) -> PySide6.QtOpenGL.QOpenGLTexture.Filter: ...
    def minimumLevelOfDetail(self) -> float: ...
    def mipBaseLevel(self) -> int: ...
    def mipLevelRange(self) -> Tuple[int, int]: ...
    def mipLevels(self) -> int: ...
    def mipMaxLevel(self) -> int: ...
    @overload
    def release(self) -> None: ...
    @overload
    def release(self, unit:int, reset:PySide6.QtOpenGL.QOpenGLTexture.TextureUnitReset=...) -> None: ...
    def samples(self) -> int: ...
    def setAutoMipMapGenerationEnabled(self, enabled:bool) -> None: ...
    @overload
    def setBorderColor(self, color:Union[PySide6.QtGui.QColor, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> None: ...
    @overload
    def setBorderColor(self, r:float, g:float, b:float, a:float) -> None: ...
    @overload
    def setBorderColor(self, r:int, g:int, b:int, a:int) -> None: ...
    @overload
    def setBorderColor(self, r:int, g:int, b:int, a:int) -> None: ...
    def setComparisonFunction(self, function:PySide6.QtOpenGL.QOpenGLTexture.ComparisonFunction) -> None: ...
    def setComparisonMode(self, mode:PySide6.QtOpenGL.QOpenGLTexture.ComparisonMode) -> None: ...
    @overload
    def setCompressedData(self, dataSize:int, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel:int, dataSize:int, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel:int, layer:int, cubeFace:PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, dataSize:int, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel:int, layer:int, dataSize:int, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel:int, layer:int, layerCount:int, cubeFace:PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, dataSize:int, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, image:Union[PySide6.QtGui.QImage, str], genMipMaps:PySide6.QtOpenGL.QOpenGLTexture.MipMapGeneration=...) -> None: ...
    @overload
    def setData(self, mipLevel:int, layer:int, cubeFace:PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, mipLevel:int, layer:int, layerCount:int, cubeFace:PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, mipLevel:int, layer:int, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, mipLevel:int, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, xOffset:int, yOffset:int, zOffset:int, width:int, height:int, depth:int, mipLevel:int, layer:int, cubeFace:PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, layerCount:int, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, xOffset:int, yOffset:int, zOffset:int, width:int, height:int, depth:int, mipLevel:int, layer:int, cubeFace:PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, xOffset:int, yOffset:int, zOffset:int, width:int, height:int, depth:int, mipLevel:int, layer:int, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, xOffset:int, yOffset:int, zOffset:int, width:int, height:int, depth:int, mipLevel:int, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    @overload
    def setData(self, xOffset:int, yOffset:int, zOffset:int, width:int, height:int, depth:int, sourceFormat:PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType:PySide6.QtOpenGL.QOpenGLTexture.PixelType, data:int, options:Optional[PySide6.QtOpenGL.QOpenGLPixelTransferOptions]=...) -> None: ...
    def setDepthStencilMode(self, mode:PySide6.QtOpenGL.QOpenGLTexture.DepthStencilMode) -> None: ...
    def setFixedSamplePositions(self, fixed:bool) -> None: ...
    def setFormat(self, format:PySide6.QtOpenGL.QOpenGLTexture.TextureFormat) -> None: ...
    def setLayers(self, layers:int) -> None: ...
    def setLevelOfDetailRange(self, min:float, max:float) -> None: ...
    def setLevelofDetailBias(self, bias:float) -> None: ...
    def setMagnificationFilter(self, filter:PySide6.QtOpenGL.QOpenGLTexture.Filter) -> None: ...
    def setMaximumAnisotropy(self, anisotropy:float) -> None: ...
    def setMaximumLevelOfDetail(self, value:float) -> None: ...
    def setMinMagFilters(self, minificationFilter:PySide6.QtOpenGL.QOpenGLTexture.Filter, magnificationFilter:PySide6.QtOpenGL.QOpenGLTexture.Filter) -> None: ...
    def setMinificationFilter(self, filter:PySide6.QtOpenGL.QOpenGLTexture.Filter) -> None: ...
    def setMinimumLevelOfDetail(self, value:float) -> None: ...
    def setMipBaseLevel(self, baseLevel:int) -> None: ...
    def setMipLevelRange(self, baseLevel:int, maxLevel:int) -> None: ...
    def setMipLevels(self, levels:int) -> None: ...
    def setMipMaxLevel(self, maxLevel:int) -> None: ...
    def setSamples(self, samples:int) -> None: ...
    def setSize(self, width:int, height:int=..., depth:int=...) -> None: ...
    @overload
    def setSwizzleMask(self, component:PySide6.QtOpenGL.QOpenGLTexture.SwizzleComponent, value:PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue) -> None: ...
    @overload
    def setSwizzleMask(self, r:PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, g:PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, b:PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, a:PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue) -> None: ...
    @overload
    def setWrapMode(self, direction:PySide6.QtOpenGL.QOpenGLTexture.CoordinateDirection, mode:PySide6.QtOpenGL.QOpenGLTexture.WrapMode) -> None: ...
    @overload
    def setWrapMode(self, mode:PySide6.QtOpenGL.QOpenGLTexture.WrapMode) -> None: ...
    def swizzleMask(self, component:PySide6.QtOpenGL.QOpenGLTexture.SwizzleComponent) -> PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue: ...
    def target(self) -> PySide6.QtOpenGL.QOpenGLTexture.Target: ...
    def textureId(self) -> int: ...
    def width(self) -> int: ...
    def wrapMode(self, direction:PySide6.QtOpenGL.QOpenGLTexture.CoordinateDirection) -> PySide6.QtOpenGL.QOpenGLTexture.WrapMode: ...


class QOpenGLTextureBlitter(Shiboken.Object):

    OriginBottomLeft         : QOpenGLTextureBlitter.Origin = ... # 0x0
    OriginTopLeft            : QOpenGLTextureBlitter.Origin = ... # 0x1

    class Origin(Shiboken.Enum):

        OriginBottomLeft         : QOpenGLTextureBlitter.Origin = ... # 0x0
        OriginTopLeft            : QOpenGLTextureBlitter.Origin = ... # 0x1


    def __init__(self) -> None: ...

    def bind(self, target:int=...) -> None: ...
    @overload
    def blit(self, texture:int, targetTransform:Union[PySide6.QtGui.QMatrix4x4, PySide6.QtGui.QTransform], sourceOrigin:PySide6.QtOpenGL.QOpenGLTextureBlitter.Origin) -> None: ...
    @overload
    def blit(self, texture:int, targetTransform:Union[PySide6.QtGui.QMatrix4x4, PySide6.QtGui.QTransform], sourceTransform:PySide6.QtGui.QMatrix3x3) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def release(self) -> None: ...
    def setOpacity(self, opacity:float) -> None: ...
    def setRedBlueSwizzle(self, swizzle:bool) -> None: ...
    @staticmethod
    def sourceTransform(subTexture:Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect], textureSize:PySide6.QtCore.QSize, origin:PySide6.QtOpenGL.QOpenGLTextureBlitter.Origin) -> PySide6.QtGui.QMatrix3x3: ...
    def supportsExternalOESTarget(self) -> bool: ...
    @staticmethod
    def targetTransform(target:Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect], viewport:PySide6.QtCore.QRect) -> PySide6.QtGui.QMatrix4x4: ...


class QOpenGLTimeMonitor(PySide6.QtCore.QObject):

    def __init__(self, parent:Optional[PySide6.QtCore.QObject]=...) -> None: ...

    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def isResultAvailable(self) -> bool: ...
    def objectIds(self) -> List[int]: ...
    def recordSample(self) -> int: ...
    def reset(self) -> None: ...
    def sampleCount(self) -> int: ...
    def setSampleCount(self, sampleCount:int) -> None: ...
    def waitForIntervals(self) -> List[int]: ...
    def waitForSamples(self) -> List[int]: ...


class QOpenGLTimerQuery(PySide6.QtCore.QObject):

    def __init__(self, parent:Optional[PySide6.QtCore.QObject]=...) -> None: ...

    def begin(self) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def end(self) -> None: ...
    def isCreated(self) -> bool: ...
    def isResultAvailable(self) -> bool: ...
    def objectId(self) -> int: ...
    def recordTimestamp(self) -> None: ...
    def waitForResult(self) -> int: ...
    def waitForTimestamp(self) -> int: ...


class QOpenGLVersionFunctionsFactory(Shiboken.Object):

    def __init__(self) -> None: ...

    @staticmethod
    def get(versionProfile:PySide6.QtOpenGL.QOpenGLVersionProfile=..., context:Optional[PySide6.QtGui.QOpenGLContext]=...) -> PySide6.QtOpenGL.QAbstractOpenGLFunctions: ...


class QOpenGLVersionProfile(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, format:Union[PySide6.QtGui.QSurfaceFormat, PySide6.QtGui.QSurfaceFormat.FormatOptions]) -> None: ...
    @overload
    def __init__(self, other:PySide6.QtOpenGL.QOpenGLVersionProfile) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def hasProfiles(self) -> bool: ...
    def isLegacyVersion(self) -> bool: ...
    def isValid(self) -> bool: ...
    def profile(self) -> PySide6.QtGui.QSurfaceFormat.OpenGLContextProfile: ...
    def setProfile(self, profile:PySide6.QtGui.QSurfaceFormat.OpenGLContextProfile) -> None: ...
    def setVersion(self, majorVersion:int, minorVersion:int) -> None: ...
    def version(self) -> Tuple[int, int]: ...


class QOpenGLVertexArrayObject(PySide6.QtCore.QObject):

    class Binder(Shiboken.Object):

        def __init__(self, v:PySide6.QtOpenGL.QOpenGLVertexArrayObject) -> None: ...

        def rebind(self) -> None: ...
        def release(self) -> None: ...


    def __init__(self, parent:Optional[PySide6.QtCore.QObject]=...) -> None: ...

    def bind(self) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def objectId(self) -> int: ...
    def release(self) -> None: ...


class QOpenGLWindow(PySide6.QtGui.QPaintDeviceWindow):

    NoPartialUpdate          : QOpenGLWindow.UpdateBehavior = ... # 0x0
    PartialUpdateBlit        : QOpenGLWindow.UpdateBehavior = ... # 0x1
    PartialUpdateBlend       : QOpenGLWindow.UpdateBehavior = ... # 0x2

    class UpdateBehavior(Shiboken.Enum):

        NoPartialUpdate          : QOpenGLWindow.UpdateBehavior = ... # 0x0
        PartialUpdateBlit        : QOpenGLWindow.UpdateBehavior = ... # 0x1
        PartialUpdateBlend       : QOpenGLWindow.UpdateBehavior = ... # 0x2


    @overload
    def __init__(self, shareContext:PySide6.QtGui.QOpenGLContext, updateBehavior:PySide6.QtOpenGL.QOpenGLWindow.UpdateBehavior=..., parent:Optional[PySide6.QtGui.QWindow]=...) -> None: ...
    @overload
    def __init__(self, updateBehavior:PySide6.QtOpenGL.QOpenGLWindow.UpdateBehavior=..., parent:Optional[PySide6.QtGui.QWindow]=...) -> None: ...

    def context(self) -> PySide6.QtGui.QOpenGLContext: ...
    def defaultFramebufferObject(self) -> int: ...
    def doneCurrent(self) -> None: ...
    def grabFramebuffer(self) -> PySide6.QtGui.QImage: ...
    def initializeGL(self) -> None: ...
    def isValid(self) -> bool: ...
    def makeCurrent(self) -> None: ...
    def metric(self, metric:PySide6.QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEvent(self, event:PySide6.QtGui.QPaintEvent) -> None: ...
    def paintGL(self) -> None: ...
    def paintOverGL(self) -> None: ...
    def paintUnderGL(self) -> None: ...
    def redirected(self, arg__1:PySide6.QtCore.QPoint) -> PySide6.QtGui.QPaintDevice: ...
    def resizeEvent(self, event:PySide6.QtGui.QResizeEvent) -> None: ...
    def resizeGL(self, w:int, h:int) -> None: ...
    def shareContext(self) -> PySide6.QtGui.QOpenGLContext: ...
    def updateBehavior(self) -> PySide6.QtOpenGL.QOpenGLWindow.UpdateBehavior: ...


# eof
