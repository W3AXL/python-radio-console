import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qvalidator.h"
        name: "QDoubleValidator"
        accessSemantics: "reference"
        prototype: "QValidator"
        Enum {
            name: "Notation"
            values: ["StandardNotation", "ScientificNotation"]
        }
        Property { name: "bottom"; type: "double"; read: "bottom"; write: "setBottom" }
        Property { name: "top"; type: "double"; read: "top"; write: "setTop" }
        Property { name: "decimals"; type: "int"; read: "decimals"; write: "setDecimals" }
        Property { name: "notation"; type: "Notation"; read: "notation"; write: "setNotation" }
        Signal {
            name: "bottomChanged"
            Parameter { name: "bottom"; type: "double" }
        }
        Signal {
            name: "topChanged"
            Parameter { name: "top"; type: "double" }
        }
        Signal {
            name: "decimalsChanged"
            Parameter { name: "decimals"; type: "int" }
        }
        Signal {
            name: "notationChanged"
            Parameter { name: "notation"; type: "QDoubleValidator::Notation" }
        }
    }
    Component {
        file: "private/qquickitemsmodule_p.h"
        name: "QInputDevice"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/InputDevice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "DeviceTypes"
            alias: "DeviceType"
            isFlag: true
            values: [
                "Unknown",
                "Mouse",
                "TouchScreen",
                "TouchPad",
                "Puck",
                "Stylus",
                "Airbrush",
                "Keyboard",
                "AllDevices"
            ]
        }
        Enum {
            name: "Capabilities"
            alias: "Capability"
            isFlag: true
            values: [
                "None",
                "Position",
                "Area",
                "Pressure",
                "Velocity",
                "NormalizedPosition",
                "MouseEmulation",
                "Scroll",
                "Hover",
                "Rotation",
                "XTilt",
                "YTilt",
                "TangentialPressure",
                "ZPosition",
                "All"
            ]
        }
        Property { name: "name"; type: "QString"; isReadonly: true; read: "name" }
        Property { name: "type"; type: "DeviceType"; isReadonly: true; read: "type" }
        Property { name: "capabilities"; type: "Capabilities"; isReadonly: true; read: "capabilities" }
        Property { name: "systemId"; type: "qlonglong"; isReadonly: true; read: "systemId" }
        Property { name: "seatName"; type: "QString"; isReadonly: true; read: "seatName" }
        Property {
            name: "availableVirtualGeometry"
            type: "QRect"
            isReadonly: true
            read: "availableVirtualGeometry"
        }
        Signal {
            name: "availableVirtualGeometryChanged"
            Parameter { name: "area"; type: "QRect" }
        }
    }
    Component {
        file: "private/qquickforeignutils_p.h"
        name: "QInputMethod"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/InputMethod 2.0", "QtQuick/InputMethod 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "Action"
            values: ["Click", "ContextMenu"]
        }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true; read: "cursorRectangle" }
        Property { name: "anchorRectangle"; type: "QRectF"; isReadonly: true; read: "anchorRectangle" }
        Property {
            name: "keyboardRectangle"
            type: "QRectF"
            isReadonly: true
            read: "keyboardRectangle"
        }
        Property {
            name: "inputItemClipRectangle"
            type: "QRectF"
            isReadonly: true
            read: "inputItemClipRectangle"
        }
        Property { name: "visible"; type: "bool"; isReadonly: true; read: "isVisible" }
        Property { name: "animating"; type: "bool"; isReadonly: true; read: "isAnimating" }
        Property { name: "locale"; type: "QLocale"; isReadonly: true; read: "locale" }
        Property {
            name: "inputDirection"
            type: "Qt::LayoutDirection"
            isReadonly: true
            read: "inputDirection"
        }
        Signal {
            name: "inputDirectionChanged"
            Parameter { name: "newDirection"; type: "Qt::LayoutDirection" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method {
            name: "update"
            Parameter { name: "queries"; type: "Qt::InputMethodQueries" }
        }
        Method { name: "reset" }
        Method { name: "commit" }
        Method {
            name: "invokeAction"
            Parameter { name: "a"; type: "Action" }
            Parameter { name: "cursorPosition"; type: "int" }
        }
    }
    Component {
        file: "qvalidator.h"
        name: "QIntValidator"
        accessSemantics: "reference"
        prototype: "QValidator"
        Property { name: "bottom"; type: "int"; read: "bottom"; write: "setBottom" }
        Property { name: "top"; type: "int"; read: "top"; write: "setTop" }
        Signal {
            name: "bottomChanged"
            Parameter { name: "bottom"; type: "int" }
        }
        Signal {
            name: "topChanged"
            Parameter { name: "top"; type: "int" }
        }
    }
    Component {
        file: "private/qquickforeignutils_p.h"
        name: "QKeySequence"
        accessSemantics: "value"
        exports: ["QtQuick/StandardKey 2.2", "QtQuick/StandardKey 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [514, 1536]
        Enum {
            name: "StandardKey"
            values: [
                "UnknownKey",
                "HelpContents",
                "WhatsThis",
                "Open",
                "Close",
                "Save",
                "New",
                "Delete",
                "Cut",
                "Copy",
                "Paste",
                "Undo",
                "Redo",
                "Back",
                "Forward",
                "Refresh",
                "ZoomIn",
                "ZoomOut",
                "Print",
                "AddTab",
                "NextChild",
                "PreviousChild",
                "Find",
                "FindNext",
                "FindPrevious",
                "Replace",
                "SelectAll",
                "Bold",
                "Italic",
                "Underline",
                "MoveToNextChar",
                "MoveToPreviousChar",
                "MoveToNextWord",
                "MoveToPreviousWord",
                "MoveToNextLine",
                "MoveToPreviousLine",
                "MoveToNextPage",
                "MoveToPreviousPage",
                "MoveToStartOfLine",
                "MoveToEndOfLine",
                "MoveToStartOfBlock",
                "MoveToEndOfBlock",
                "MoveToStartOfDocument",
                "MoveToEndOfDocument",
                "SelectNextChar",
                "SelectPreviousChar",
                "SelectNextWord",
                "SelectPreviousWord",
                "SelectNextLine",
                "SelectPreviousLine",
                "SelectNextPage",
                "SelectPreviousPage",
                "SelectStartOfLine",
                "SelectEndOfLine",
                "SelectStartOfBlock",
                "SelectEndOfBlock",
                "SelectStartOfDocument",
                "SelectEndOfDocument",
                "DeleteStartOfWord",
                "DeleteEndOfWord",
                "DeleteEndOfLine",
                "InsertParagraphSeparator",
                "InsertLineSeparator",
                "SaveAs",
                "Preferences",
                "Quit",
                "FullScreen",
                "Deselect",
                "DeleteCompleteLine",
                "Backspace",
                "Cancel"
            ]
        }
    }
    Component {
        file: "private/qquickitemsmodule_p.h"
        name: "QPointingDevice"
        accessSemantics: "reference"
        prototype: "QInputDevice"
        exports: ["QtQuick/PointerDevice 2.12", "QtQuick/PointerDevice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [524, 1536]
        Enum {
            name: "PointerTypes"
            alias: "PointerType"
            isFlag: true
            values: [
                "Unknown",
                "Generic",
                "Finger",
                "Pen",
                "Eraser",
                "Cursor",
                "AllPointerTypes"
            ]
        }
        Enum {
            name: "GrabTransition"
            values: [
                "GrabPassive",
                "UngrabPassive",
                "CancelGrabPassive",
                "OverrideGrabPassive",
                "GrabExclusive",
                "UngrabExclusive",
                "CancelGrabExclusive"
            ]
        }
        Property { name: "pointerType"; type: "PointerType"; isReadonly: true; read: "pointerType" }
        Property { name: "maximumPoints"; type: "int"; isReadonly: true; read: "maximumPoints" }
        Property { name: "buttonCount"; type: "int"; isReadonly: true; read: "buttonCount" }
        Property { name: "uniqueId"; type: "QPointingDeviceUniqueId"; isReadonly: true; read: "uniqueId" }
        Signal {
            name: "grabChanged"
            Parameter { name: "grabber"; type: "QObject"; isPointer: true }
            Parameter { name: "transition"; type: "GrabTransition" }
            Parameter { name: "event"; type: "const QPointerEvent"; isPointer: true }
            Parameter { name: "point"; type: "QEventPoint" }
        }
    }
    Component {
        file: "private/qquickitemsmodule_p.h"
        name: "QPointingDeviceUniqueId"
        accessSemantics: "value"
        exports: [
            "QtQuick/pointingDeviceUniqueId 2.9",
            "QtQuick/pointingDeviceUniqueId 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [521, 1536]
        Property { name: "numericId"; type: "qlonglong"; isReadonly: true; read: "numericId" }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickAbstractAnimation"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus", "QQmlPropertyValueSource"]
        exports: [
            "QtQuick/Animation 2.0",
            "QtQuick/Animation 2.12",
            "QtQuick/Animation 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 524, 1536]
        Enum {
            name: "Loops"
            values: ["Infinite"]
        }
        Property { name: "running"; type: "bool"; read: "isRunning"; write: "setRunning" }
        Property { name: "paused"; type: "bool"; read: "isPaused"; write: "setPaused" }
        Property {
            name: "alwaysRunToEnd"
            type: "bool"
            read: "alwaysRunToEnd"
            write: "setAlwaysRunToEnd"
        }
        Property { name: "loops"; type: "int"; read: "loops"; write: "setLoops" }
        Signal { name: "started" }
        Signal { name: "stopped" }
        Signal {
            name: "runningChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "pausedChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "alwaysRunToEndChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "loopCountChanged"
            Parameter { type: "int" }
        }
        Signal { name: "finished"; revision: 524 }
        Method { name: "restart" }
        Method { name: "start" }
        Method { name: "pause" }
        Method { name: "resume" }
        Method { name: "stop" }
        Method { name: "complete" }
        Method { name: "componentFinalized" }
    }
    Component {
        file: "private/qquickaccessibleattached_p.h"
        name: "QQuickAccessibleAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/Accessible 2.0", "QtQuick/Accessible 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickAccessibleAttached"
        Property { name: "role"; type: "QAccessible::Role"; read: "role"; write: "setRole" }
        Property { name: "name"; type: "QString"; read: "name"; write: "setName" }
        Property { name: "description"; type: "QString"; read: "description"; write: "setDescription" }
        Property { name: "ignored"; type: "bool"; read: "ignored"; write: "setIgnored" }
        Property { name: "checkable"; type: "bool"; read: "checkable"; write: "set_checkable" }
        Property { name: "checked"; type: "bool"; read: "checked"; write: "set_checked" }
        Property { name: "editable"; type: "bool"; read: "editable"; write: "set_editable" }
        Property { name: "focusable"; type: "bool"; read: "focusable"; write: "set_focusable" }
        Property { name: "focused"; type: "bool"; read: "focused"; write: "set_focused" }
        Property { name: "multiLine"; type: "bool"; read: "multiLine"; write: "set_multiLine" }
        Property { name: "readOnly"; type: "bool"; read: "readOnly"; write: "set_readOnly" }
        Property { name: "selected"; type: "bool"; read: "selected"; write: "set_selected" }
        Property { name: "selectable"; type: "bool"; read: "selectable"; write: "set_selectable" }
        Property { name: "pressed"; type: "bool"; read: "pressed"; write: "set_pressed" }
        Property {
            name: "checkStateMixed"
            type: "bool"
            read: "checkStateMixed"
            write: "set_checkStateMixed"
        }
        Property {
            name: "defaultButton"
            type: "bool"
            read: "defaultButton"
            write: "set_defaultButton"
        }
        Property { name: "passwordEdit"; type: "bool"; read: "passwordEdit"; write: "set_passwordEdit" }
        Property {
            name: "selectableText"
            type: "bool"
            read: "selectableText"
            write: "set_selectableText"
        }
        Property { name: "searchEdit"; type: "bool"; read: "searchEdit"; write: "set_searchEdit" }
        Signal {
            name: "checkableChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "checkedChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "editableChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "focusableChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "focusedChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "multiLineChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "readOnlyChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "selectedChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "selectableChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "pressedChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "checkStateMixedChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "defaultButtonChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "passwordEditChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "selectableTextChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "searchEditChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal { name: "pressAction" }
        Signal { name: "toggleAction" }
        Signal { name: "increaseAction" }
        Signal { name: "decreaseAction" }
        Signal { name: "scrollUpAction" }
        Signal { name: "scrollDownAction" }
        Signal { name: "scrollLeftAction" }
        Signal { name: "scrollRightAction" }
        Signal { name: "previousPageAction" }
        Signal { name: "nextPageAction" }
        Method { name: "valueChanged" }
        Method { name: "cursorPositionChanged" }
        Method {
            name: "setIgnored"
            Parameter { name: "ignored"; type: "bool" }
        }
    }
    Component {
        file: "private/qquickitemanimation_p.h"
        name: "QQuickAnchorAnimation"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/AnchorAnimation 2.0",
            "QtQuick/AnchorAnimation 2.12",
            "QtQuick/AnchorAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "targets"; type: "QQuickItem"; isList: true; isReadonly: true; read: "targets" }
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Property { name: "easing"; type: "QEasingCurve"; read: "easing"; write: "setEasing" }
        Signal {
            name: "durationChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "easingChanged"
            Parameter { type: "QEasingCurve" }
        }
    }
    Component {
        file: "private/qquickstateoperations_p.h"
        name: "QQuickAnchorChanges"
        accessSemantics: "reference"
        prototype: "QQuickStateOperation"
        exports: ["QtQuick/AnchorChanges 2.0", "QtQuick/AnchorChanges 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "target"; type: "QQuickItem"; isPointer: true; read: "object"; write: "setObject" }
        Property {
            name: "anchors"
            type: "QQuickAnchorSet"
            isReadonly: true
            isPointer: true
            read: "anchors"
        }
    }
    Component {
        file: "private/qquickanchors_p_p.h"
        name: "QQuickAnchorLine"
        accessSemantics: "value"
    }
    Component {
        file: "private/qquickstateoperations_p.h"
        name: "QQuickAnchorSet"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "left"; type: "QQmlScriptString"; read: "left"; write: "setLeft" }
        Property { name: "right"; type: "QQmlScriptString"; read: "right"; write: "setRight" }
        Property {
            name: "horizontalCenter"
            type: "QQmlScriptString"
            read: "horizontalCenter"
            write: "setHorizontalCenter"
        }
        Property { name: "top"; type: "QQmlScriptString"; read: "top"; write: "setTop" }
        Property { name: "bottom"; type: "QQmlScriptString"; read: "bottom"; write: "setBottom" }
        Property {
            name: "verticalCenter"
            type: "QQmlScriptString"
            read: "verticalCenter"
            write: "setVerticalCenter"
        }
        Property { name: "baseline"; type: "QQmlScriptString"; read: "baseline"; write: "setBaseline" }
    }
    Component {
        file: "private/qquickanchors_p.h"
        name: "QQuickAnchors"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "Anchors"
            alias: "Anchor"
            isFlag: true
            values: [
                "InvalidAnchor",
                "LeftAnchor",
                "RightAnchor",
                "TopAnchor",
                "BottomAnchor",
                "HCenterAnchor",
                "VCenterAnchor",
                "BaselineAnchor",
                "Horizontal_Mask",
                "Vertical_Mask"
            ]
        }
        Property { name: "left"; type: "QQuickAnchorLine"; read: "left"; write: "setLeft" }
        Property { name: "right"; type: "QQuickAnchorLine"; read: "right"; write: "setRight" }
        Property {
            name: "horizontalCenter"
            type: "QQuickAnchorLine"
            read: "horizontalCenter"
            write: "setHorizontalCenter"
        }
        Property { name: "top"; type: "QQuickAnchorLine"; read: "top"; write: "setTop" }
        Property { name: "bottom"; type: "QQuickAnchorLine"; read: "bottom"; write: "setBottom" }
        Property {
            name: "verticalCenter"
            type: "QQuickAnchorLine"
            read: "verticalCenter"
            write: "setVerticalCenter"
        }
        Property { name: "baseline"; type: "QQuickAnchorLine"; read: "baseline"; write: "setBaseline" }
        Property { name: "margins"; type: "double"; read: "margins"; write: "setMargins" }
        Property { name: "leftMargin"; type: "double"; read: "leftMargin"; write: "setLeftMargin" }
        Property { name: "rightMargin"; type: "double"; read: "rightMargin"; write: "setRightMargin" }
        Property {
            name: "horizontalCenterOffset"
            type: "double"
            read: "horizontalCenterOffset"
            write: "setHorizontalCenterOffset"
        }
        Property { name: "topMargin"; type: "double"; read: "topMargin"; write: "setTopMargin" }
        Property { name: "bottomMargin"; type: "double"; read: "bottomMargin"; write: "setBottomMargin" }
        Property {
            name: "verticalCenterOffset"
            type: "double"
            read: "verticalCenterOffset"
            write: "setVerticalCenterOffset"
        }
        Property {
            name: "baselineOffset"
            type: "double"
            read: "baselineOffset"
            write: "setBaselineOffset"
        }
        Property { name: "fill"; type: "QQuickItem"; isPointer: true; read: "fill"; write: "setFill" }
        Property {
            name: "centerIn"
            type: "QQuickItem"
            isPointer: true
            read: "centerIn"
            write: "setCenterIn"
        }
        Property {
            name: "alignWhenCentered"
            type: "bool"
            read: "alignWhenCentered"
            write: "setAlignWhenCentered"
        }
        Signal { name: "centerAlignedChanged" }
    }
    Component {
        file: "private/qquickanimatedimage_p.h"
        name: "QQuickAnimatedImage"
        accessSemantics: "reference"
        prototype: "QQuickImage"
        exports: [
            "QtQuick/AnimatedImage 2.0",
            "QtQuick/AnimatedImage 2.1",
            "QtQuick/AnimatedImage 2.3",
            "QtQuick/AnimatedImage 2.4",
            "QtQuick/AnimatedImage 2.5",
            "QtQuick/AnimatedImage 2.7",
            "QtQuick/AnimatedImage 2.11",
            "QtQuick/AnimatedImage 2.14",
            "QtQuick/AnimatedImage 2.15",
            "QtQuick/AnimatedImage 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            515,
            516,
            517,
            519,
            523,
            526,
            527,
            1536
        ]
        Property { name: "playing"; type: "bool"; read: "isPlaying"; write: "setPlaying" }
        Property { name: "paused"; type: "bool"; read: "isPaused"; write: "setPaused" }
        Property { name: "currentFrame"; type: "int"; read: "currentFrame"; write: "setCurrentFrame" }
        Property { name: "frameCount"; type: "int"; isReadonly: true; read: "frameCount" }
        Property { name: "speed"; revision: 523; type: "double"; read: "speed"; write: "setSpeed" }
        Property { name: "sourceSize"; type: "QSize"; isReadonly: true; read: "sourceSize" }
        Signal { name: "frameChanged" }
        Signal { name: "currentFrameChanged" }
        Signal { name: "speedChanged"; revision: 523 }
        Method { name: "movieUpdate" }
        Method { name: "movieRequestFinished" }
        Method { name: "playingStatusChanged" }
        Method { name: "onCacheChanged" }
    }
    Component {
        file: "private/qquickanimatedsprite_p.h"
        name: "QQuickAnimatedSprite"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/AnimatedSprite 2.0",
            "QtQuick/AnimatedSprite 2.1",
            "QtQuick/AnimatedSprite 2.4",
            "QtQuick/AnimatedSprite 2.7",
            "QtQuick/AnimatedSprite 2.11",
            "QtQuick/AnimatedSprite 2.12",
            "QtQuick/AnimatedSprite 2.15",
            "QtQuick/AnimatedSprite 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 524, 527, 1536]
        Enum {
            name: "LoopParameters"
            values: ["Infinite"]
        }
        Enum {
            name: "FinishBehavior"
            values: ["FinishAtInitialFrame", "FinishAtFinalFrame"]
        }
        Property { name: "running"; type: "bool"; read: "running"; write: "setRunning" }
        Property { name: "interpolate"; type: "bool"; read: "interpolate"; write: "setInterpolate" }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource" }
        Property { name: "reverse"; type: "bool"; read: "reverse"; write: "setReverse" }
        Property { name: "frameSync"; type: "bool"; read: "frameSync"; write: "setFrameSync" }
        Property { name: "frameCount"; type: "int"; read: "frameCount"; write: "setFrameCount" }
        Property { name: "frameHeight"; type: "int"; read: "frameHeight"; write: "setFrameHeight" }
        Property { name: "frameWidth"; type: "int"; read: "frameWidth"; write: "setFrameWidth" }
        Property { name: "frameX"; type: "int"; read: "frameX"; write: "setFrameX" }
        Property { name: "frameY"; type: "int"; read: "frameY"; write: "setFrameY" }
        Property { name: "frameRate"; type: "double"; read: "frameRate"; write: "setFrameRate" }
        Property { name: "frameDuration"; type: "int"; read: "frameDuration"; write: "setFrameDuration" }
        Property { name: "loops"; type: "int"; read: "loops"; write: "setLoops" }
        Property { name: "paused"; type: "bool"; read: "paused"; write: "setPaused" }
        Property { name: "currentFrame"; type: "int"; read: "currentFrame"; write: "setCurrentFrame" }
        Property {
            name: "finishBehavior"
            revision: 527
            type: "FinishBehavior"
            read: "finishBehavior"
            write: "setFinishBehavior"
        }
        Signal {
            name: "pausedChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "runningChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "interpolateChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Signal {
            name: "reverseChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "frameSyncChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "frameCountChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameXChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameYChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameRateChanged"
            Parameter { name: "arg"; type: "double" }
        }
        Signal {
            name: "frameDurationChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "loopsChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "currentFrameChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "finishBehaviorChanged"
            revision: 527
            Parameter { name: "arg"; type: "FinishBehavior" }
        }
        Signal { name: "finished"; revision: 524 }
        Method { name: "start" }
        Method { name: "stop" }
        Method { name: "restart" }
        Method {
            name: "advance"
            Parameter { name: "frames"; type: "int" }
        }
        Method { name: "advance" }
        Method { name: "pause" }
        Method { name: "resume" }
        Method {
            name: "setRunning"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setPaused"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setInterpolate"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setSource"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Method {
            name: "setReverse"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setFrameSync"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setFrameCount"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameRate"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setFrameDuration"
            Parameter { name: "arg"; type: "int" }
        }
        Method { name: "resetFrameRate" }
        Method { name: "resetFrameDuration" }
        Method {
            name: "setLoops"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setCurrentFrame"
            Parameter { name: "arg"; type: "int" }
        }
        Method { name: "createEngine" }
        Method { name: "reset" }
    }
    Component {
        file: "private/qquickanimationcontroller_p.h"
        name: "QQuickAnimationController"
        accessSemantics: "reference"
        defaultProperty: "animation"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick/AnimationController 2.0",
            "QtQuick/AnimationController 6.0"
        ]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "progress"; type: "double"; read: "progress"; write: "setProgress" }
        Property {
            name: "animation"
            type: "QQuickAbstractAnimation"
            isPointer: true
            read: "animation"
            write: "setAnimation"
        }
        Method { name: "reload" }
        Method { name: "completeToBeginning" }
        Method { name: "completeToEnd" }
        Method { name: "componentFinalized" }
        Method { name: "updateProgress" }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickAnimationGroup"
        accessSemantics: "reference"
        defaultProperty: "animations"
        prototype: "QQuickAbstractAnimation"
        Property {
            name: "animations"
            type: "QQuickAbstractAnimation"
            isList: true
            isReadonly: true
            read: "animations"
        }
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/Animator 2.2",
            "QtQuick/Animator 2.12",
            "QtQuick/Animator 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [514, 524, 1536]
        Property {
            name: "target"
            type: "QQuickItem"
            isPointer: true
            read: "targetItem"
            write: "setTargetItem"
        }
        Property { name: "easing"; type: "QEasingCurve"; read: "easing"; write: "setEasing" }
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Signal {
            name: "targetItemChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "int" }
        }
        Signal {
            name: "easingChanged"
            Parameter { name: "curve"; type: "QEasingCurve" }
        }
        Signal {
            name: "toChanged"
            Parameter { name: "to"; type: "double" }
        }
        Signal {
            name: "fromChanged"
            Parameter { name: "from"; type: "double" }
        }
    }
    Component {
        file: "private/qquickapplication_p.h"
        name: "QQuickApplication"
        accessSemantics: "reference"
        prototype: "QQmlApplication"
        exports: ["QtQuick/Application 2.0", "QtQuick/Application 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "active"; type: "bool"; isReadonly: true; read: "active" }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            isReadonly: true
            read: "layoutDirection"
        }
        Property {
            name: "supportsMultipleWindows"
            type: "bool"
            isReadonly: true
            read: "supportsMultipleWindows"
        }
        Property { name: "state"; type: "Qt::ApplicationState"; isReadonly: true; read: "state" }
        Property { name: "font"; type: "QFont"; isReadonly: true; read: "font" }
        Property { name: "displayName"; type: "QString"; read: "displayName"; write: "setDisplayName" }
        Property {
            name: "screens"
            type: "QQuickScreenInfo"
            isList: true
            isReadonly: true
            read: "screens"
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "Qt::ApplicationState" }
        }
        Method { name: "updateScreens" }
    }
    Component {
        file: "private/qquickpositioners_p.h"
        name: "QQuickBasePositioner"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        exports: [
            "QtQuick/Positioner 2.0",
            "QtQuick/Positioner 2.1",
            "QtQuick/Positioner 2.4",
            "QtQuick/Positioner 2.6",
            "QtQuick/Positioner 2.7",
            "QtQuick/Positioner 2.9",
            "QtQuick/Positioner 2.11",
            "QtQuick/Positioner 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 513, 516, 518, 519, 521, 523, 1536]
        attachedType: "QQuickPositionerAttached"
        Property { name: "spacing"; type: "double"; read: "spacing"; write: "setSpacing" }
        Property {
            name: "populate"
            type: "QQuickTransition"
            isPointer: true
            read: "populate"
            write: "setPopulate"
        }
        Property { name: "move"; type: "QQuickTransition"; isPointer: true; read: "move"; write: "setMove" }
        Property { name: "add"; type: "QQuickTransition"; isPointer: true; read: "add"; write: "setAdd" }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Signal { name: "positioningComplete"; revision: 521 }
        Method { name: "prePositioning" }
        Method { name: "forceLayout"; revision: 521 }
    }
    Component {
        file: "private/qquickbehavior_p.h"
        name: "QQuickBehavior"
        accessSemantics: "reference"
        defaultProperty: "animation"
        prototype: "QObject"
        interfaces: ["QQmlPropertyValueInterceptor"]
        exports: [
            "QtQuick/Behavior 2.0",
            "QtQuick/Behavior 2.13",
            "QtQuick/Behavior 2.15",
            "QtQuick/Behavior 6.0"
        ]
        exportMetaObjectRevisions: [512, 525, 527, 1536]
        Property {
            name: "animation"
            type: "QQuickAbstractAnimation"
            isPointer: true
            read: "animation"
            write: "setAnimation"
        }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Property {
            name: "targetValue"
            revision: 525
            type: "QVariant"
            isReadonly: true
            read: "targetValue"
        }
        Property {
            name: "targetProperty"
            revision: 527
            type: "QQmlProperty"
            isReadonly: true
            read: "targetProperty"
        }
        Method { name: "componentFinalized" }
    }
    Component {
        file: "private/qquickborderimage_p.h"
        name: "QQuickBorderImage"
        accessSemantics: "reference"
        prototype: "QQuickImageBase"
        exports: [
            "QtQuick/BorderImage 2.0",
            "QtQuick/BorderImage 2.1",
            "QtQuick/BorderImage 2.4",
            "QtQuick/BorderImage 2.7",
            "QtQuick/BorderImage 2.11",
            "QtQuick/BorderImage 2.14",
            "QtQuick/BorderImage 2.15",
            "QtQuick/BorderImage 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 526, 527, 1536]
        Enum {
            name: "TileMode"
            values: ["Stretch", "Repeat", "Round"]
        }
        Property {
            name: "border"
            type: "QQuickScaleGrid"
            isReadonly: true
            isPointer: true
            read: "border"
        }
        Property {
            name: "horizontalTileMode"
            type: "TileMode"
            read: "horizontalTileMode"
            write: "setHorizontalTileMode"
        }
        Property {
            name: "verticalTileMode"
            type: "TileMode"
            read: "verticalTileMode"
            write: "setVerticalTileMode"
        }
        Property { name: "sourceSize"; type: "QSize"; isReadonly: true; read: "sourceSize" }
        Method { name: "doUpdate" }
        Method { name: "requestFinished" }
        Method { name: "sciRequestFinished" }
    }
    Component {
        file: "private/qquickshadereffectmesh_p.h"
        name: "QQuickBorderImageMesh"
        accessSemantics: "reference"
        prototype: "QQuickShaderEffectMesh"
        exports: [
            "QtQuick/BorderImageMesh 2.8",
            "QtQuick/BorderImageMesh 6.0"
        ]
        exportMetaObjectRevisions: [520, 1536]
        Enum {
            name: "TileMode"
            values: ["Stretch", "Repeat", "Round"]
        }
        Property {
            name: "border"
            type: "QQuickScaleGrid"
            isReadonly: true
            isPointer: true
            read: "border"
        }
        Property { name: "size"; type: "QSize"; read: "size"; write: "setSize" }
        Property {
            name: "horizontalTileMode"
            type: "TileMode"
            read: "horizontalTileMode"
            write: "setHorizontalTileMode"
        }
        Property {
            name: "verticalTileMode"
            type: "TileMode"
            read: "verticalTileMode"
            write: "setVerticalTileMode"
        }
    }
    Component {
        file: "private/qquickcanvasitem_p.h"
        name: "QQuickCanvasItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/Canvas 2.0",
            "QtQuick/Canvas 2.1",
            "QtQuick/Canvas 2.4",
            "QtQuick/Canvas 2.7",
            "QtQuick/Canvas 2.11",
            "QtQuick/Canvas 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Enum {
            name: "RenderTarget"
            values: ["Image", "FramebufferObject"]
        }
        Enum {
            name: "RenderStrategy"
            values: ["Immediate", "Threaded", "Cooperative"]
        }
        Property { name: "available"; type: "bool"; isReadonly: true; read: "isAvailable" }
        Property { name: "contextType"; type: "QString"; read: "contextType"; write: "setContextType" }
        Property { name: "context"; type: "QJSValue"; isReadonly: true; read: "context" }
        Property { name: "canvasSize"; type: "QSizeF"; read: "canvasSize"; write: "setCanvasSize" }
        Property { name: "tileSize"; type: "QSize"; read: "tileSize"; write: "setTileSize" }
        Property { name: "canvasWindow"; type: "QRectF"; read: "canvasWindow"; write: "setCanvasWindow" }
        Property {
            name: "renderTarget"
            type: "RenderTarget"
            read: "renderTarget"
            write: "setRenderTarget"
        }
        Property {
            name: "renderStrategy"
            type: "RenderStrategy"
            read: "renderStrategy"
            write: "setRenderStrategy"
        }
        Signal {
            name: "paint"
            Parameter { name: "region"; type: "QRect" }
        }
        Signal { name: "painted" }
        Signal { name: "imageLoaded" }
        Method {
            name: "loadImage"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "unloadImage"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isImageLoaded"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isImageLoading"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isImageError"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "sceneGraphInitialized" }
        Method { name: "checkAnimationCallbacks" }
        Method { name: "invalidateSceneGraph" }
        Method { name: "schedulePolish" }
        Method {
            name: "getContext"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "requestAnimationFrame"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "cancelRequestAnimationFrame"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "requestPaint" }
        Method {
            name: "markDirty"
            Parameter { name: "dirtyRect"; type: "QRectF" }
        }
        Method { name: "markDirty" }
        Method {
            name: "save"
            type: "bool"
            Parameter { name: "filename"; type: "QString" }
        }
        Method {
            name: "toDataURL"
            type: "QString"
            Parameter { name: "type"; type: "QString" }
        }
        Method { name: "toDataURL"; type: "QString" }
        Method { name: "delayedCreate" }
    }
    Component {
        file: "private/qquickevents_p_p.h"
        name: "QQuickCloseEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "accepted"; type: "bool"; read: "isAccepted"; write: "setAccepted" }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickColorAnimation"
        accessSemantics: "reference"
        prototype: "QQuickPropertyAnimation"
        exports: [
            "QtQuick/ColorAnimation 2.0",
            "QtQuick/ColorAnimation 2.12",
            "QtQuick/ColorAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "from"; type: "QColor"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "QColor"; read: "to"; write: "setTo" }
    }
    Component {
        file: "private/qquickcolorgroup_p.h"
        name: "QQuickColorGroup"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/ColorGroup 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "alternateBase"
            type: "QColor"
            read: "alternateBase"
            write: "setAlternateBase"
        }
        Property { name: "base"; type: "QColor"; read: "base"; write: "setBase" }
        Property { name: "brightText"; type: "QColor"; read: "brightText"; write: "setBrightText" }
        Property { name: "button"; type: "QColor"; read: "button"; write: "setButton" }
        Property { name: "buttonText"; type: "QColor"; read: "buttonText"; write: "setButtonText" }
        Property { name: "dark"; type: "QColor"; read: "dark"; write: "setDark" }
        Property { name: "highlight"; type: "QColor"; read: "highlight"; write: "setHighlight" }
        Property {
            name: "highlightedText"
            type: "QColor"
            read: "highlightedText"
            write: "setHighlightedText"
        }
        Property { name: "light"; type: "QColor"; read: "light"; write: "setLight" }
        Property { name: "link"; type: "QColor"; read: "link"; write: "setLink" }
        Property { name: "linkVisited"; type: "QColor"; read: "linkVisited"; write: "setLinkVisited" }
        Property { name: "mid"; type: "QColor"; read: "mid"; write: "setMid" }
        Property { name: "midlight"; type: "QColor"; read: "midlight"; write: "setMidlight" }
        Property { name: "shadow"; type: "QColor"; read: "shadow"; write: "setShadow" }
        Property { name: "text"; type: "QColor"; read: "text"; write: "setText" }
        Property { name: "toolTipBase"; type: "QColor"; read: "toolTipBase"; write: "setToolTipBase" }
        Property { name: "toolTipText"; type: "QColor"; read: "toolTipText"; write: "setToolTipText" }
        Property { name: "window"; type: "QColor"; read: "window"; write: "setWindow" }
        Property { name: "windowText"; type: "QColor"; read: "windowText"; write: "setWindowText" }
        Signal { name: "changed" }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickColorSpaceEnums"
        accessSemantics: "none"
        exports: ["QtQuick/ColorSpace 2.15", "QtQuick/ColorSpace 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [527, 1536]
        Enum {
            name: "NamedColorSpace"
            values: [
                "Unknown",
                "SRgb",
                "SRgbLinear",
                "AdobeRgb",
                "DisplayP3",
                "ProPhotoRgb"
            ]
        }
        Enum {
            name: "Primaries"
            values: ["Custom", "SRgb", "AdobeRgb", "DciP3D65", "ProPhotoRgb"]
        }
        Enum {
            name: "TransferFunction"
            values: ["Custom", "Linear", "Gamma", "SRgb", "ProPhotoRgb"]
        }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QColorSpace"
        accessSemantics: "value"
        extension: "QQuickColorSpaceValueType"
        Enum {
            name: "NamedColorSpace"
            values: [
                "SRgb",
                "SRgbLinear",
                "AdobeRgb",
                "DisplayP3",
                "ProPhotoRgb"
            ]
        }
        Enum {
            name: "Primaries"
            values: ["Custom", "SRgb", "AdobeRgb", "DciP3D65", "ProPhotoRgb"]
        }
        Enum {
            name: "TransferFunction"
            values: ["Custom", "Linear", "Gamma", "SRgb", "ProPhotoRgb"]
        }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickColorSpaceValueType"
        accessSemantics: "value"
        Property {
            name: "namedColorSpace"
            type: "QQuickColorSpaceEnums::NamedColorSpace"
            read: "namedColorSpace"
            write: "setNamedColorSpace"
        }
        Property {
            name: "primaries"
            type: "QQuickColorSpaceEnums::Primaries"
            read: "primaries"
            write: "setPrimaries"
        }
        Property {
            name: "transferFunction"
            type: "QQuickColorSpaceEnums::TransferFunction"
            read: "transferFunction"
            write: "setTransferFunction"
        }
        Property { name: "gamma"; type: "float"; read: "gamma"; write: "setGamma" }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QColor"
        accessSemantics: "value"
        extension: "QQuickColorValueType"
        exports: ["QtQuick/color 2.0", "QtQuick/color 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickColorValueType"
        accessSemantics: "value"
        Property { name: "r"; type: "double"; read: "r"; write: "setR" }
        Property { name: "g"; type: "double"; read: "g"; write: "setG" }
        Property { name: "b"; type: "double"; read: "b"; write: "setB" }
        Property { name: "a"; type: "double"; read: "a"; write: "setA" }
        Property { name: "hsvHue"; type: "double"; read: "hsvHue"; write: "setHsvHue" }
        Property {
            name: "hsvSaturation"
            type: "double"
            read: "hsvSaturation"
            write: "setHsvSaturation"
        }
        Property { name: "hsvValue"; type: "double"; read: "hsvValue"; write: "setHsvValue" }
        Property { name: "hslHue"; type: "double"; read: "hslHue"; write: "setHslHue" }
        Property {
            name: "hslSaturation"
            type: "double"
            read: "hslSaturation"
            write: "setHslSaturation"
        }
        Property { name: "hslLightness"; type: "double"; read: "hslLightness"; write: "setHslLightness" }
        Property { name: "valid"; type: "bool"; isReadonly: true; read: "isValid" }
        Method { name: "toString"; type: "QString" }
        Method {
            name: "alpha"
            type: "QVariant"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "lighter"
            type: "QVariant"
            Parameter { name: "factor"; type: "double" }
        }
        Method { name: "lighter"; type: "QVariant" }
        Method {
            name: "darker"
            type: "QVariant"
            Parameter { name: "factor"; type: "double" }
        }
        Method { name: "darker"; type: "QVariant" }
        Method {
            name: "tint"
            type: "QVariant"
            Parameter { name: "factor"; type: "QVariant" }
        }
    }
    Component {
        file: "private/qquickpositioners_p.h"
        name: "QQuickColumn"
        accessSemantics: "reference"
        prototype: "QQuickBasePositioner"
        exports: [
            "QtQuick/Column 2.0",
            "QtQuick/Column 2.1",
            "QtQuick/Column 2.4",
            "QtQuick/Column 2.6",
            "QtQuick/Column 2.7",
            "QtQuick/Column 2.9",
            "QtQuick/Column 2.11",
            "QtQuick/Column 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 518, 519, 521, 523, 1536]
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickCurve"
        accessSemantics: "reference"
        prototype: "QQuickPathElement"
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "relativeX"; type: "double"; read: "relativeX"; write: "setRelativeX" }
        Property { name: "relativeY"; type: "double"; read: "relativeY"; write: "setRelativeY" }
    }
    Component {
        file: "private/qquickvalidator_p.h"
        name: "QQuickDoubleValidator"
        accessSemantics: "reference"
        prototype: "QDoubleValidator"
        exports: [
            "QtQuick/DoubleValidator 2.0",
            "QtQuick/DoubleValidator 6.0"
        ]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "locale"; type: "QString"; read: "localeName"; write: "setLocaleName" }
        Signal { name: "localeNameChanged" }
    }
    Component {
        file: "private/qquickdrag_p.h"
        name: "QQuickDrag"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/Drag 2.0", "QtQuick/Drag 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickDragAttached"
        Enum {
            name: "DragType"
            values: ["None", "Automatic", "Internal"]
        }
        Enum {
            name: "Axis"
            values: ["XAxis", "YAxis", "XAndYAxis", "XandYAxis"]
        }
        Property { name: "target"; type: "QQuickItem"; isPointer: true; read: "target"; write: "setTarget" }
        Property { name: "axis"; type: "Axis"; read: "axis"; write: "setAxis" }
        Property { name: "minimumX"; type: "double"; read: "xmin"; write: "setXmin" }
        Property { name: "maximumX"; type: "double"; read: "xmax"; write: "setXmax" }
        Property { name: "minimumY"; type: "double"; read: "ymin"; write: "setYmin" }
        Property { name: "maximumY"; type: "double"; read: "ymax"; write: "setYmax" }
        Property { name: "active"; type: "bool"; isReadonly: true; read: "active" }
        Property {
            name: "filterChildren"
            type: "bool"
            read: "filterChildren"
            write: "setFilterChildren"
        }
        Property { name: "smoothed"; type: "bool"; read: "smoothed"; write: "setSmoothed" }
        Property { name: "threshold"; type: "double"; read: "threshold"; write: "setThreshold" }
    }
    Component {
        file: "private/qquickdrag_p.h"
        name: "QQuickDragAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "active"; type: "bool"; read: "isActive"; write: "setActive" }
        Property { name: "source"; type: "QObject"; isPointer: true; read: "source"; write: "setSource" }
        Property { name: "target"; type: "QObject"; isReadonly: true; isPointer: true; read: "target" }
        Property { name: "hotSpot"; type: "QPointF"; read: "hotSpot"; write: "setHotSpot" }
        Property { name: "imageSource"; type: "QUrl"; read: "imageSource"; write: "setImageSource" }
        Property { name: "keys"; type: "QStringList"; read: "keys"; write: "setKeys" }
        Property { name: "mimeData"; type: "QVariantMap"; read: "mimeData"; write: "setMimeData" }
        Property {
            name: "supportedActions"
            type: "Qt::DropActions"
            read: "supportedActions"
            write: "setSupportedActions"
        }
        Property {
            name: "proposedAction"
            type: "Qt::DropAction"
            read: "proposedAction"
            write: "setProposedAction"
        }
        Property {
            name: "dragType"
            type: "QQuickDrag::DragType"
            read: "dragType"
            write: "setDragType"
        }
        Signal { name: "dragStarted" }
        Signal {
            name: "dragFinished"
            Parameter { name: "dropAction"; type: "Qt::DropAction" }
        }
        Method {
            name: "start"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "startDrag"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "cancel" }
        Method { name: "drop"; type: "int" }
    }
    Component {
        file: "private/qquickdragaxis_p.h"
        name: "QQuickDragAxis"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/DragAxis 2.12", "QtQuick/DragAxis 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [524, 1536]
        Property { name: "minimum"; type: "double"; read: "minimum"; write: "setMinimum" }
        Property { name: "maximum"; type: "double"; read: "maximum"; write: "setMaximum" }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
    }
    Component {
        file: "private/qquickdraghandler_p.h"
        name: "QQuickDragHandler"
        accessSemantics: "reference"
        prototype: "QQuickMultiPointHandler"
        exports: [
            "QtQuick/DragHandler 2.12",
            "QtQuick/DragHandler 2.14",
            "QtQuick/DragHandler 2.15",
            "QtQuick/DragHandler 6.0"
        ]
        exportMetaObjectRevisions: [524, 526, 527, 1536]
        Enum {
            name: "SnapMode"
            values: [
                "NoSnap",
                "SnapAuto",
                "SnapIfPressedOutsideTarget",
                "SnapAlways"
            ]
        }
        Property { name: "xAxis"; type: "QQuickDragAxis"; isReadonly: true; isPointer: true; read: "xAxis" }
        Property { name: "yAxis"; type: "QQuickDragAxis"; isReadonly: true; isPointer: true; read: "yAxis" }
        Property { name: "translation"; type: "QVector2D"; isReadonly: true; read: "translation" }
        Property {
            name: "snapMode"
            revision: 526
            type: "SnapMode"
            read: "snapMode"
            write: "setSnapMode"
        }
        Signal { name: "snapModeChanged"; revision: 526 }
    }
    Component {
        file: "private/qquickdroparea_p.h"
        name: "QQuickDropArea"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/DropArea 2.0",
            "QtQuick/DropArea 2.1",
            "QtQuick/DropArea 2.4",
            "QtQuick/DropArea 2.7",
            "QtQuick/DropArea 2.11",
            "QtQuick/DropArea 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Property { name: "containsDrag"; type: "bool"; isReadonly: true; read: "containsDrag" }
        Property { name: "keys"; type: "QStringList"; read: "keys"; write: "setKeys" }
        Property {
            name: "drag"
            type: "QQuickDropAreaDrag"
            isReadonly: true
            isPointer: true
            read: "drag"
        }
        Signal { name: "sourceChanged" }
        Signal {
            name: "entered"
            Parameter { name: "drag"; type: "QQuickDropEvent"; isPointer: true }
        }
        Signal { name: "exited" }
        Signal {
            name: "positionChanged"
            Parameter { name: "drag"; type: "QQuickDropEvent"; isPointer: true }
        }
        Signal {
            name: "dropped"
            Parameter { name: "drop"; type: "QQuickDropEvent"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickdroparea_p.h"
        name: "QQuickDropAreaDrag"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "x"; type: "double"; isReadonly: true; read: "x" }
        Property { name: "y"; type: "double"; isReadonly: true; read: "y" }
        Property { name: "source"; type: "QObject"; isReadonly: true; isPointer: true; read: "source" }
        Signal { name: "positionChanged" }
    }
    Component {
        file: "private/qquickdroparea_p.h"
        name: "QQuickDropEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "x"; type: "double"; isReadonly: true; read: "x" }
        Property { name: "y"; type: "double"; isReadonly: true; read: "y" }
        Property { name: "source"; type: "QObject"; isReadonly: true; isPointer: true; read: "source" }
        Property { name: "keys"; type: "QStringList"; isReadonly: true; read: "keys" }
        Property {
            name: "supportedActions"
            type: "Qt::DropActions"
            isReadonly: true
            read: "supportedActions"
        }
        Property {
            name: "proposedAction"
            type: "Qt::DropActions"
            isReadonly: true
            read: "proposedAction"
        }
        Property { name: "action"; type: "Qt::DropAction"; read: "action"; write: "setAction" }
        Property { name: "accepted"; type: "bool"; read: "accepted"; write: "setAccepted" }
        Property { name: "hasColor"; type: "bool"; isReadonly: true; read: "hasColor" }
        Property { name: "hasHtml"; type: "bool"; isReadonly: true; read: "hasHtml" }
        Property { name: "hasText"; type: "bool"; isReadonly: true; read: "hasText" }
        Property { name: "hasUrls"; type: "bool"; isReadonly: true; read: "hasUrls" }
        Property { name: "colorData"; type: "QVariant"; isReadonly: true; read: "colorData" }
        Property { name: "html"; type: "QString"; isReadonly: true; read: "html" }
        Property { name: "text"; type: "QString"; isReadonly: true; read: "text" }
        Property { name: "urls"; type: "QList<QUrl>"; isReadonly: true; read: "urls" }
        Property { name: "formats"; type: "QStringList"; isReadonly: true; read: "formats" }
        Method {
            name: "getDataAsString"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "getDataAsArrayBuffer"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "acceptProposedAction"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "accept"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickitem_p.h"
        name: "QQuickEnterKeyAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/EnterKey 2.6", "QtQuick/EnterKey 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [518, 1536]
        attachedType: "QQuickEnterKeyAttached"
        Property { name: "type"; type: "Qt::EnterKeyType"; read: "type"; write: "setType" }
    }
    Component {
        file: "private/qquickflickable_p.h"
        name: "QQuickFlickable"
        accessSemantics: "reference"
        defaultProperty: "flickableData"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/Flickable 2.0",
            "QtQuick/Flickable 2.1",
            "QtQuick/Flickable 2.4",
            "QtQuick/Flickable 2.7",
            "QtQuick/Flickable 2.9",
            "QtQuick/Flickable 2.10",
            "QtQuick/Flickable 2.11",
            "QtQuick/Flickable 2.12",
            "QtQuick/Flickable 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            516,
            519,
            521,
            522,
            523,
            524,
            1536
        ]
        Enum {
            name: "BoundsBehavior"
            alias: "BoundsBehaviorFlag"
            isFlag: true
            values: [
                "StopAtBounds",
                "DragOverBounds",
                "OvershootBounds",
                "DragAndOvershootBounds"
            ]
        }
        Enum {
            name: "BoundsMovement"
            values: ["FollowBoundsBehavior"]
        }
        Enum {
            name: "FlickableDirection"
            values: [
                "AutoFlickDirection",
                "HorizontalFlick",
                "VerticalFlick",
                "HorizontalAndVerticalFlick",
                "AutoFlickIfNeeded"
            ]
        }
        Property { name: "contentWidth"; type: "double"; read: "contentWidth"; write: "setContentWidth" }
        Property {
            name: "contentHeight"
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property { name: "contentX"; type: "double"; read: "contentX"; write: "setContentX" }
        Property { name: "contentY"; type: "double"; read: "contentY"; write: "setContentY" }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "contentItem"
        }
        Property { name: "topMargin"; type: "double"; read: "topMargin"; write: "setTopMargin" }
        Property { name: "bottomMargin"; type: "double"; read: "bottomMargin"; write: "setBottomMargin" }
        Property { name: "originY"; type: "double"; isReadonly: true; read: "originY" }
        Property { name: "leftMargin"; type: "double"; read: "leftMargin"; write: "setLeftMargin" }
        Property { name: "rightMargin"; type: "double"; read: "rightMargin"; write: "setRightMargin" }
        Property { name: "originX"; type: "double"; isReadonly: true; read: "originX" }
        Property {
            name: "horizontalVelocity"
            type: "double"
            isReadonly: true
            read: "horizontalVelocity"
        }
        Property { name: "verticalVelocity"; type: "double"; isReadonly: true; read: "verticalVelocity" }
        Property {
            name: "boundsBehavior"
            type: "BoundsBehavior"
            read: "boundsBehavior"
            write: "setBoundsBehavior"
        }
        Property {
            name: "boundsMovement"
            revision: 522
            type: "BoundsMovement"
            read: "boundsMovement"
            write: "setBoundsMovement"
        }
        Property {
            name: "rebound"
            type: "QQuickTransition"
            isPointer: true
            read: "rebound"
            write: "setRebound"
        }
        Property {
            name: "maximumFlickVelocity"
            type: "double"
            read: "maximumFlickVelocity"
            write: "setMaximumFlickVelocity"
        }
        Property {
            name: "flickDeceleration"
            type: "double"
            read: "flickDeceleration"
            write: "setFlickDeceleration"
        }
        Property { name: "moving"; type: "bool"; isReadonly: true; read: "isMoving" }
        Property {
            name: "movingHorizontally"
            type: "bool"
            isReadonly: true
            read: "isMovingHorizontally"
        }
        Property { name: "movingVertically"; type: "bool"; isReadonly: true; read: "isMovingVertically" }
        Property { name: "flicking"; type: "bool"; isReadonly: true; read: "isFlicking" }
        Property {
            name: "flickingHorizontally"
            type: "bool"
            isReadonly: true
            read: "isFlickingHorizontally"
        }
        Property {
            name: "flickingVertically"
            type: "bool"
            isReadonly: true
            read: "isFlickingVertically"
        }
        Property { name: "dragging"; type: "bool"; isReadonly: true; read: "isDragging" }
        Property {
            name: "draggingHorizontally"
            type: "bool"
            isReadonly: true
            read: "isDraggingHorizontally"
        }
        Property {
            name: "draggingVertically"
            type: "bool"
            isReadonly: true
            read: "isDraggingVertically"
        }
        Property {
            name: "flickableDirection"
            type: "FlickableDirection"
            read: "flickableDirection"
            write: "setFlickableDirection"
        }
        Property { name: "interactive"; type: "bool"; read: "isInteractive"; write: "setInteractive" }
        Property { name: "pressDelay"; type: "int"; read: "pressDelay"; write: "setPressDelay" }
        Property { name: "atXEnd"; type: "bool"; isReadonly: true; read: "isAtXEnd" }
        Property { name: "atYEnd"; type: "bool"; isReadonly: true; read: "isAtYEnd" }
        Property { name: "atXBeginning"; type: "bool"; isReadonly: true; read: "isAtXBeginning" }
        Property { name: "atYBeginning"; type: "bool"; isReadonly: true; read: "isAtYBeginning" }
        Property {
            name: "visibleArea"
            type: "QQuickFlickableVisibleArea"
            isReadonly: true
            isPointer: true
            read: "visibleArea"
        }
        Property { name: "pixelAligned"; type: "bool"; read: "pixelAligned"; write: "setPixelAligned" }
        Property {
            name: "synchronousDrag"
            revision: 524
            type: "bool"
            read: "synchronousDrag"
            write: "setSynchronousDrag"
        }
        Property {
            name: "horizontalOvershoot"
            revision: 521
            type: "double"
            isReadonly: true
            read: "horizontalOvershoot"
        }
        Property {
            name: "verticalOvershoot"
            revision: 521
            type: "double"
            isReadonly: true
            read: "verticalOvershoot"
        }
        Property {
            name: "flickableData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "flickableData"
        }
        Property {
            name: "flickableChildren"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "flickableChildren"
        }
        Signal { name: "isAtBoundaryChanged" }
        Signal { name: "boundsMovementChanged"; revision: 522 }
        Signal { name: "movementStarted" }
        Signal { name: "movementEnded" }
        Signal { name: "flickStarted" }
        Signal { name: "flickEnded" }
        Signal { name: "dragStarted" }
        Signal { name: "dragEnded" }
        Signal { name: "synchronousDragChanged"; revision: 524 }
        Signal { name: "horizontalOvershootChanged"; revision: 521 }
        Signal { name: "verticalOvershootChanged"; revision: 521 }
        Method { name: "movementStarting" }
        Method { name: "movementEnding" }
        Method {
            name: "movementEnding"
            Parameter { name: "hMovementEnding"; type: "bool" }
            Parameter { name: "vMovementEnding"; type: "bool" }
        }
        Method { name: "velocityTimelineCompleted" }
        Method { name: "timelineCompleted" }
        Method {
            name: "resizeContent"
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "center"; type: "QPointF" }
        }
        Method { name: "returnToBounds" }
        Method {
            name: "flick"
            Parameter { name: "xVelocity"; type: "double" }
            Parameter { name: "yVelocity"; type: "double" }
        }
        Method { name: "cancelFlick" }
    }
    Component {
        file: "private/qquickflickable_p_p.h"
        name: "QQuickFlickableVisibleArea"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "xPosition"; type: "double"; isReadonly: true; read: "xPosition" }
        Property { name: "yPosition"; type: "double"; isReadonly: true; read: "yPosition" }
        Property { name: "widthRatio"; type: "double"; isReadonly: true; read: "widthRatio" }
        Property { name: "heightRatio"; type: "double"; isReadonly: true; read: "heightRatio" }
        Signal {
            name: "xPositionChanged"
            Parameter { name: "xPosition"; type: "double" }
        }
        Signal {
            name: "yPositionChanged"
            Parameter { name: "yPosition"; type: "double" }
        }
        Signal {
            name: "widthRatioChanged"
            Parameter { name: "widthRatio"; type: "double" }
        }
        Signal {
            name: "heightRatioChanged"
            Parameter { name: "heightRatio"; type: "double" }
        }
    }
    Component {
        file: "private/qquickflipable_p.h"
        name: "QQuickFlipable"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/Flipable 2.0",
            "QtQuick/Flipable 2.1",
            "QtQuick/Flipable 2.4",
            "QtQuick/Flipable 2.7",
            "QtQuick/Flipable 2.11",
            "QtQuick/Flipable 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Enum {
            name: "Side"
            values: ["Front", "Back"]
        }
        Property { name: "front"; type: "QQuickItem"; isPointer: true; read: "front"; write: "setFront" }
        Property { name: "back"; type: "QQuickItem"; isPointer: true; read: "back"; write: "setBack" }
        Property { name: "side"; type: "Side"; isReadonly: true; read: "side" }
        Method { name: "retransformBack" }
    }
    Component {
        file: "private/qquickpositioners_p.h"
        name: "QQuickFlow"
        accessSemantics: "reference"
        prototype: "QQuickBasePositioner"
        exports: [
            "QtQuick/Flow 2.0",
            "QtQuick/Flow 2.1",
            "QtQuick/Flow 2.4",
            "QtQuick/Flow 2.6",
            "QtQuick/Flow 2.7",
            "QtQuick/Flow 2.9",
            "QtQuick/Flow 2.11",
            "QtQuick/Flow 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 518, 519, 521, 523, 1536]
        Enum {
            name: "Flow"
            values: ["LeftToRight", "TopToBottom"]
        }
        Property { name: "flow"; type: "Flow"; read: "flow"; write: "setFlow" }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
        }
        Property {
            name: "effectiveLayoutDirection"
            type: "Qt::LayoutDirection"
            isReadonly: true
            read: "effectiveLayoutDirection"
        }
    }
    Component {
        file: "private/qquickfocusscope_p.h"
        name: "QQuickFocusScope"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/FocusScope 2.0",
            "QtQuick/FocusScope 2.1",
            "QtQuick/FocusScope 2.4",
            "QtQuick/FocusScope 2.7",
            "QtQuick/FocusScope 2.11",
            "QtQuick/FocusScope 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickFontEnums"
        accessSemantics: "none"
        exports: ["QtQuick/Font 2.0", "QtQuick/Font 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "FontWeight"
            values: [
                "Thin",
                "ExtraLight",
                "Light",
                "Normal",
                "Medium",
                "DemiBold",
                "Bold",
                "ExtraBold",
                "Black"
            ]
        }
        Enum {
            name: "Capitalization"
            values: [
                "MixedCase",
                "AllUppercase",
                "AllLowercase",
                "SmallCaps",
                "Capitalize"
            ]
        }
        Enum {
            name: "HintingPreference"
            values: [
                "PreferDefaultHinting",
                "PreferNoHinting",
                "PreferVerticalHinting",
                "PreferFullHinting"
            ]
        }
    }
    Component {
        file: "private/qquickfontloader_p.h"
        name: "QQuickFontLoader"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/FontLoader 2.0", "QtQuick/FontLoader 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource" }
        Property { name: "name"; type: "QString"; isReadonly: true; read: "name" }
        Property { name: "status"; type: "Status"; isReadonly: true; read: "status" }
        Property { name: "font"; type: "QFont"; isReadonly: true; read: "font" }
        Method {
            name: "updateFontInfo"
            Parameter { type: "int" }
        }
    }
    Component {
        file: "private/qquickfontmetrics_p.h"
        name: "QQuickFontMetrics"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/FontMetrics 2.4", "QtQuick/FontMetrics 6.0"]
        exportMetaObjectRevisions: [516, 1536]
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "ascent"; type: "double"; isReadonly: true; read: "ascent" }
        Property { name: "descent"; type: "double"; isReadonly: true; read: "descent" }
        Property { name: "height"; type: "double"; isReadonly: true; read: "height" }
        Property { name: "leading"; type: "double"; isReadonly: true; read: "leading" }
        Property { name: "lineSpacing"; type: "double"; isReadonly: true; read: "lineSpacing" }
        Property {
            name: "minimumLeftBearing"
            type: "double"
            isReadonly: true
            read: "minimumLeftBearing"
        }
        Property {
            name: "minimumRightBearing"
            type: "double"
            isReadonly: true
            read: "minimumRightBearing"
        }
        Property {
            name: "maximumCharacterWidth"
            type: "double"
            isReadonly: true
            read: "maximumCharacterWidth"
        }
        Property { name: "xHeight"; type: "double"; isReadonly: true; read: "xHeight" }
        Property {
            name: "averageCharacterWidth"
            type: "double"
            isReadonly: true
            read: "averageCharacterWidth"
        }
        Property {
            name: "underlinePosition"
            type: "double"
            isReadonly: true
            read: "underlinePosition"
        }
        Property { name: "overlinePosition"; type: "double"; isReadonly: true; read: "overlinePosition" }
        Property {
            name: "strikeOutPosition"
            type: "double"
            isReadonly: true
            read: "strikeOutPosition"
        }
        Property { name: "lineWidth"; type: "double"; isReadonly: true; read: "lineWidth" }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Method {
            name: "advanceWidth"
            type: "double"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "boundingRect"
            type: "QRectF"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "tightBoundingRect"
            type: "QRectF"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "elidedText"
            type: "QString"
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "mode"; type: "Qt::TextElideMode" }
            Parameter { name: "width"; type: "double" }
            Parameter { name: "flags"; type: "int" }
        }
        Method {
            name: "elidedText"
            type: "QString"
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "mode"; type: "Qt::TextElideMode" }
            Parameter { name: "width"; type: "double" }
        }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QFont"
        accessSemantics: "value"
        extension: "QQuickFontValueType"
        exports: ["QtQuick/font 2.0", "QtQuick/font 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "StyleHint"
            values: [
                "Helvetica",
                "SansSerif",
                "Times",
                "Serif",
                "Courier",
                "TypeWriter",
                "OldEnglish",
                "Decorative",
                "System",
                "AnyStyle",
                "Cursive",
                "Monospace",
                "Fantasy"
            ]
        }
        Enum {
            name: "StyleStrategy"
            values: [
                "PreferDefault",
                "PreferBitmap",
                "PreferDevice",
                "PreferOutline",
                "ForceOutline",
                "PreferMatch",
                "PreferQuality",
                "PreferAntialias",
                "NoAntialias",
                "NoSubpixelAntialias",
                "PreferNoShaping",
                "NoFontMerging"
            ]
        }
        Enum {
            name: "HintingPreference"
            values: [
                "PreferDefaultHinting",
                "PreferNoHinting",
                "PreferVerticalHinting",
                "PreferFullHinting"
            ]
        }
        Enum {
            name: "Weight"
            values: [
                "Thin",
                "ExtraLight",
                "Light",
                "Normal",
                "Medium",
                "DemiBold",
                "Bold",
                "ExtraBold",
                "Black"
            ]
        }
        Enum {
            name: "Style"
            values: ["StyleNormal", "StyleItalic", "StyleOblique"]
        }
        Enum {
            name: "Stretch"
            values: [
                "AnyStretch",
                "UltraCondensed",
                "ExtraCondensed",
                "Condensed",
                "SemiCondensed",
                "Unstretched",
                "SemiExpanded",
                "Expanded",
                "ExtraExpanded",
                "UltraExpanded"
            ]
        }
        Enum {
            name: "Capitalization"
            values: [
                "MixedCase",
                "AllUppercase",
                "AllLowercase",
                "SmallCaps",
                "Capitalize"
            ]
        }
        Enum {
            name: "SpacingType"
            values: ["PercentageSpacing", "AbsoluteSpacing"]
        }
        Enum {
            name: "ResolveProperties"
            values: [
                "NoPropertiesResolved",
                "FamilyResolved",
                "SizeResolved",
                "StyleHintResolved",
                "StyleStrategyResolved",
                "WeightResolved",
                "StyleResolved",
                "UnderlineResolved",
                "OverlineResolved",
                "StrikeOutResolved",
                "FixedPitchResolved",
                "StretchResolved",
                "KerningResolved",
                "CapitalizationResolved",
                "LetterSpacingResolved",
                "WordSpacingResolved",
                "HintingPreferenceResolved",
                "StyleNameResolved",
                "FamiliesResolved",
                "AllPropertiesResolved"
            ]
        }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickFontValueType"
        accessSemantics: "value"
        Property { name: "family"; type: "QString"; read: "family"; write: "setFamily" }
        Property { name: "styleName"; type: "QString"; read: "styleName"; write: "setStyleName" }
        Property { name: "bold"; type: "bool"; read: "bold"; write: "setBold" }
        Property { name: "weight"; type: "int"; read: "weight"; write: "setWeight" }
        Property { name: "italic"; type: "bool"; read: "italic"; write: "setItalic" }
        Property { name: "underline"; type: "bool"; read: "underline"; write: "setUnderline" }
        Property { name: "overline"; type: "bool"; read: "overline"; write: "setOverline" }
        Property { name: "strikeout"; type: "bool"; read: "strikeout"; write: "setStrikeout" }
        Property { name: "pointSize"; type: "double"; read: "pointSize"; write: "setPointSize" }
        Property { name: "pixelSize"; type: "int"; read: "pixelSize"; write: "setPixelSize" }
        Property {
            name: "capitalization"
            type: "QQuickFontEnums::Capitalization"
            read: "capitalization"
            write: "setCapitalization"
        }
        Property {
            name: "letterSpacing"
            type: "double"
            read: "letterSpacing"
            write: "setLetterSpacing"
        }
        Property { name: "wordSpacing"; type: "double"; read: "wordSpacing"; write: "setWordSpacing" }
        Property {
            name: "hintingPreference"
            type: "QQuickFontEnums::HintingPreference"
            read: "hintingPreference"
            write: "setHintingPreference"
        }
        Property { name: "kerning"; type: "bool"; read: "kerning"; write: "setKerning" }
        Property { name: "preferShaping"; type: "bool"; read: "preferShaping"; write: "setPreferShaping" }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "private/qquickmultipointtoucharea_p.h"
        name: "QQuickGrabGestureEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/GestureEvent 2.0", "QtQuick/GestureEvent 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Property {
            name: "touchPoints"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "touchPoints"
        }
        Property { name: "dragThreshold"; type: "double"; isReadonly: true; read: "dragThreshold" }
        Method { name: "grab" }
    }
    Component {
        file: "private/qquickrectangle_p.h"
        name: "QQuickGradient"
        accessSemantics: "reference"
        defaultProperty: "stops"
        prototype: "QObject"
        exports: [
            "QtQuick/Gradient 2.0",
            "QtQuick/Gradient 2.12",
            "QtQuick/Gradient 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Enum {
            name: "Orientation"
            values: ["Vertical", "Horizontal"]
        }
        Property {
            name: "stops"
            type: "QQuickGradientStop"
            isList: true
            isReadonly: true
            read: "stops"
        }
        Property {
            name: "orientation"
            revision: 524
            type: "Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Signal { name: "updated" }
    }
    Component {
        file: "private/qquickrectangle_p.h"
        name: "QQuickGradientStop"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/GradientStop 2.0", "QtQuick/GradientStop 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
    }
    Component {
        file: "private/qquickgraphicsinfo_p.h"
        name: "QQuickGraphicsInfo"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/GraphicsInfo 2.8", "QtQuick/GraphicsInfo 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [520, 1536]
        attachedType: "QQuickGraphicsInfo"
        Enum {
            name: "GraphicsApi"
            values: [
                "Unknown",
                "Software",
                "OpenVG",
                "OpenGL",
                "Direct3D11",
                "Vulkan",
                "Metal",
                "Null",
                "OpenGLRhi",
                "Direct3D11Rhi",
                "VulkanRhi",
                "MetalRhi",
                "NullRhi"
            ]
        }
        Enum {
            name: "ShaderType"
            values: ["UnknownShadingLanguage", "GLSL", "HLSL", "RhiShader"]
        }
        Enum {
            name: "ShaderCompilationType"
            values: ["RuntimeCompilation", "OfflineCompilation"]
        }
        Enum {
            name: "ShaderSourceType"
            values: [
                "ShaderSourceString",
                "ShaderSourceFile",
                "ShaderByteCode"
            ]
        }
        Enum {
            name: "OpenGLContextProfile"
            values: [
                "OpenGLNoProfile",
                "OpenGLCoreProfile",
                "OpenGLCompatibilityProfile"
            ]
        }
        Enum {
            name: "RenderableType"
            values: [
                "SurfaceFormatUnspecified",
                "SurfaceFormatOpenGL",
                "SurfaceFormatOpenGLES"
            ]
        }
        Property { name: "api"; type: "GraphicsApi"; isReadonly: true; read: "api" }
        Property { name: "shaderType"; type: "ShaderType"; isReadonly: true; read: "shaderType" }
        Property {
            name: "shaderCompilationType"
            type: "ShaderCompilationType"
            isReadonly: true
            read: "shaderCompilationType"
        }
        Property {
            name: "shaderSourceType"
            type: "ShaderSourceType"
            isReadonly: true
            read: "shaderSourceType"
        }
        Property { name: "majorVersion"; type: "int"; isReadonly: true; read: "majorVersion" }
        Property { name: "minorVersion"; type: "int"; isReadonly: true; read: "minorVersion" }
        Property { name: "profile"; type: "OpenGLContextProfile"; isReadonly: true; read: "profile" }
        Property {
            name: "renderableType"
            type: "RenderableType"
            isReadonly: true
            read: "renderableType"
        }
        Method { name: "updateInfo" }
        Method {
            name: "setWindow"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickpositioners_p.h"
        name: "QQuickGrid"
        accessSemantics: "reference"
        prototype: "QQuickBasePositioner"
        exports: [
            "QtQuick/Grid 2.0",
            "QtQuick/Grid 2.1",
            "QtQuick/Grid 2.4",
            "QtQuick/Grid 2.6",
            "QtQuick/Grid 2.7",
            "QtQuick/Grid 2.9",
            "QtQuick/Grid 2.11",
            "QtQuick/Grid 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 518, 519, 521, 523, 1536]
        Enum {
            name: "Flow"
            values: ["LeftToRight", "TopToBottom"]
        }
        Enum {
            name: "HAlignment"
            values: ["AlignLeft", "AlignRight", "AlignHCenter"]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Property { name: "rows"; type: "int"; read: "rows"; write: "setRows" }
        Property { name: "columns"; type: "int"; read: "columns"; write: "setColumns" }
        Property { name: "rowSpacing"; type: "double"; read: "rowSpacing"; write: "setRowSpacing" }
        Property {
            name: "columnSpacing"
            type: "double"
            read: "columnSpacing"
            write: "setColumnSpacing"
        }
        Property { name: "flow"; type: "Flow"; read: "flow"; write: "setFlow" }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
        }
        Property {
            name: "effectiveLayoutDirection"
            type: "Qt::LayoutDirection"
            isReadonly: true
            read: "effectiveLayoutDirection"
        }
        Property {
            name: "horizontalItemAlignment"
            revision: 513
            type: "HAlignment"
            read: "hItemAlign"
            write: "setHItemAlign"
        }
        Property {
            name: "effectiveHorizontalItemAlignment"
            revision: 513
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property {
            name: "verticalItemAlignment"
            revision: 513
            type: "VAlignment"
            read: "vItemAlign"
            write: "setVItemAlign"
        }
        Signal {
            name: "horizontalAlignmentChanged"
            revision: 513
            Parameter { name: "alignment"; type: "HAlignment" }
        }
        Signal {
            name: "effectiveHorizontalAlignmentChanged"
            revision: 513
            Parameter { name: "alignment"; type: "HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            revision: 513
            Parameter { name: "alignment"; type: "VAlignment" }
        }
    }
    Component {
        file: "private/qquickshadereffectmesh_p.h"
        name: "QQuickGridMesh"
        accessSemantics: "reference"
        prototype: "QQuickShaderEffectMesh"
        exports: ["QtQuick/GridMesh 2.0", "QtQuick/GridMesh 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "resolution"; type: "QSize"; read: "resolution"; write: "setResolution" }
    }
    Component {
        file: "private/qquickgridview_p.h"
        name: "QQuickGridView"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItemView"
        exports: [
            "QtQuick/GridView 2.0",
            "QtQuick/GridView 2.1",
            "QtQuick/GridView 2.3",
            "QtQuick/GridView 2.4",
            "QtQuick/GridView 2.7",
            "QtQuick/GridView 2.9",
            "QtQuick/GridView 2.10",
            "QtQuick/GridView 2.11",
            "QtQuick/GridView 2.12",
            "QtQuick/GridView 2.13",
            "QtQuick/GridView 2.15",
            "QtQuick/GridView 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            515,
            516,
            519,
            521,
            522,
            523,
            524,
            525,
            527,
            1536
        ]
        attachedType: "QQuickGridViewAttached"
        Enum {
            name: "Flow"
            values: ["FlowLeftToRight", "FlowTopToBottom"]
        }
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapToRow", "SnapOneRow"]
        }
        Property { name: "flow"; type: "Flow"; read: "flow"; write: "setFlow" }
        Property { name: "cellWidth"; type: "double"; read: "cellWidth"; write: "setCellWidth" }
        Property { name: "cellHeight"; type: "double"; read: "cellHeight"; write: "setCellHeight" }
        Property { name: "snapMode"; type: "SnapMode"; read: "snapMode"; write: "setSnapMode" }
        Signal { name: "highlightMoveDurationChanged" }
        Method { name: "moveCurrentIndexUp" }
        Method { name: "moveCurrentIndexDown" }
        Method { name: "moveCurrentIndexLeft" }
        Method { name: "moveCurrentIndexRight" }
    }
    Component {
        file: "private/qquickgridview_p.h"
        name: "QQuickGridViewAttached"
        accessSemantics: "reference"
        prototype: "QQuickItemViewAttached"
    }
    Component {
        file: "private/qquickhoverhandler_p.h"
        name: "QQuickHoverHandler"
        accessSemantics: "reference"
        prototype: "QQuickSinglePointHandler"
        exports: [
            "QtQuick/HoverHandler 2.12",
            "QtQuick/HoverHandler 2.15",
            "QtQuick/HoverHandler 6.0"
        ]
        exportMetaObjectRevisions: [524, 527, 1536]
        Property { name: "hovered"; type: "bool"; isReadonly: true; read: "isHovered" }
    }
    Component {
        file: "private/qquickimage_p.h"
        name: "QQuickImage"
        accessSemantics: "reference"
        prototype: "QQuickImageBase"
        exports: [
            "QtQuick/Image 2.0",
            "QtQuick/Image 2.1",
            "QtQuick/Image 2.3",
            "QtQuick/Image 2.4",
            "QtQuick/Image 2.5",
            "QtQuick/Image 2.7",
            "QtQuick/Image 2.11",
            "QtQuick/Image 2.14",
            "QtQuick/Image 2.15",
            "QtQuick/Image 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            515,
            516,
            517,
            519,
            523,
            526,
            527,
            1536
        ]
        Enum {
            name: "HAlignment"
            values: ["AlignLeft", "AlignRight", "AlignHCenter"]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "FillMode"
            values: [
                "Stretch",
                "PreserveAspectFit",
                "PreserveAspectCrop",
                "Tile",
                "TileVertically",
                "TileHorizontally",
                "Pad"
            ]
        }
        Property { name: "fillMode"; type: "FillMode"; read: "fillMode"; write: "setFillMode" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true; read: "paintedWidth" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true; read: "paintedHeight" }
        Property {
            name: "horizontalAlignment"
            type: "HAlignment"
            read: "horizontalAlignment"
            write: "setHorizontalAlignment"
        }
        Property {
            name: "verticalAlignment"
            type: "VAlignment"
            read: "verticalAlignment"
            write: "setVerticalAlignment"
        }
        Property { name: "mipmap"; revision: 515; type: "bool"; read: "mipmap"; write: "setMipmap" }
        Property {
            name: "autoTransform"
            revision: 517
            type: "bool"
            read: "autoTransform"
            write: "setAutoTransform"
        }
        Property {
            name: "sourceClipRect"
            revision: 527
            type: "QRectF"
            read: "sourceClipRect"
            write: "setSourceClipRect"
        }
        Signal { name: "paintedGeometryChanged" }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "VAlignment" }
        }
        Signal {
            name: "mipmapChanged"
            revision: 515
            Parameter { type: "bool" }
        }
        Signal { name: "autoTransformChanged"; revision: 517 }
        Method { name: "invalidateSceneGraph" }
    }
    Component {
        file: "private/qquickimagebase_p.h"
        name: "QQuickImageBase"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        exports: [
            "QtQuick/ImageBase 2.14",
            "QtQuick/ImageBase 2.15",
            "QtQuick/ImageBase 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [526, 527, 1536]
        Enum {
            name: "LoadPixmapOptions"
            alias: "LoadPixmapOption"
            isFlag: true
            values: ["NoOption", "HandleDPR", "UseProviderOptions"]
        }
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property { name: "status"; type: "Status"; isReadonly: true; read: "status" }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource" }
        Property { name: "progress"; type: "double"; isReadonly: true; read: "progress" }
        Property { name: "asynchronous"; type: "bool"; read: "asynchronous"; write: "setAsynchronous" }
        Property { name: "cache"; type: "bool"; read: "cache"; write: "setCache" }
        Property { name: "sourceSize"; type: "QSize"; read: "sourceSize"; write: "setSourceSize" }
        Property { name: "mirror"; type: "bool"; read: "mirror"; write: "setMirror" }
        Property {
            name: "currentFrame"
            revision: 526
            type: "int"
            read: "currentFrame"
            write: "setCurrentFrame"
        }
        Property { name: "frameCount"; revision: 526; type: "int"; isReadonly: true; read: "frameCount" }
        Property {
            name: "colorSpace"
            revision: 527
            type: "QColorSpace"
            read: "colorSpace"
            write: "setColorSpace"
        }
        Signal {
            name: "sourceChanged"
            Parameter { type: "QUrl" }
        }
        Signal {
            name: "statusChanged"
            Parameter { type: "QQuickImageBase::Status" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "progress"; type: "double" }
        }
        Signal { name: "currentFrameChanged"; revision: 526 }
        Signal { name: "frameCountChanged"; revision: 526 }
        Signal { name: "sourceClipRectChanged"; revision: 527 }
        Signal { name: "colorSpaceChanged"; revision: 527 }
        Method { name: "requestFinished" }
        Method {
            name: "requestProgress"
            Parameter { type: "qlonglong" }
            Parameter { type: "qlonglong" }
        }
    }
    Component {
        file: "private/qquickimplicitsizeitem_p.h"
        name: "QQuickImplicitSizeItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "implicitWidth"; type: "double"; isReadonly: true; read: "implicitWidth" }
        Property { name: "implicitHeight"; type: "double"; isReadonly: true; read: "implicitHeight" }
    }
    Component {
        file: "private/qquickvalidator_p.h"
        name: "QQuickIntValidator"
        accessSemantics: "reference"
        prototype: "QIntValidator"
        exports: ["QtQuick/IntValidator 2.0", "QtQuick/IntValidator 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "locale"; type: "QString"; read: "localeName"; write: "setLocaleName" }
        Signal { name: "localeNameChanged" }
    }
    Component {
        file: "qquickitem.h"
        name: "QQuickItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick/Item 2.0",
            "QtQuick/Item 2.1",
            "QtQuick/Item 2.4",
            "QtQuick/Item 2.7",
            "QtQuick/Item 2.11",
            "QtQuick/Item 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Enum {
            name: "Flags"
            alias: "Flag"
            isFlag: true
            values: [
                "ItemClipsChildrenToShape",
                "ItemAcceptsInputMethod",
                "ItemIsFocusScope",
                "ItemHasContents",
                "ItemAcceptsDrops"
            ]
        }
        Enum {
            name: "TransformOrigin"
            values: [
                "TopLeft",
                "Top",
                "TopRight",
                "Left",
                "Center",
                "Right",
                "BottomLeft",
                "Bottom",
                "BottomRight"
            ]
        }
        Property {
            name: "parent"
            type: "QQuickItem"
            isPointer: true
            read: "parentItem"
            write: "setParentItem"
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true; read: "data" }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true; read: "resources" }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true; read: "children" }
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "z"; type: "double"; read: "z"; write: "setZ" }
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "double"; read: "height"; write: "setHeight" }
        Property { name: "opacity"; type: "double"; read: "opacity"; write: "setOpacity" }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property {
            name: "palette"
            revision: 1536
            type: "QQuickPalette"
            isPointer: true
            read: "palette"
            write: "setPalette"
        }
        Property {
            name: "visibleChildren"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "visibleChildren"
        }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true; read: "states" }
        Property {
            name: "transitions"
            type: "QQuickTransition"
            isList: true
            isReadonly: true
            read: "transitions"
        }
        Property { name: "state"; type: "QString"; read: "state"; write: "setState" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true; read: "childrenRect" }
        Property {
            name: "anchors"
            type: "QQuickAnchors"
            isReadonly: true
            isPointer: true
            read: "anchors"
        }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true; read: "left" }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true; read: "right" }
        Property {
            name: "horizontalCenter"
            type: "QQuickAnchorLine"
            isReadonly: true
            read: "horizontalCenter"
        }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true; read: "top" }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true; read: "bottom" }
        Property {
            name: "verticalCenter"
            type: "QQuickAnchorLine"
            isReadonly: true
            read: "verticalCenter"
        }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true; read: "baseline" }
        Property {
            name: "baselineOffset"
            type: "double"
            read: "baselineOffset"
            write: "setBaselineOffset"
        }
        Property { name: "clip"; type: "bool"; read: "clip"; write: "setClip" }
        Property { name: "focus"; type: "bool"; read: "hasFocus"; write: "setFocus" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true; read: "hasActiveFocus" }
        Property {
            name: "activeFocusOnTab"
            revision: 513
            type: "bool"
            read: "activeFocusOnTab"
            write: "setActiveFocusOnTab"
        }
        Property { name: "rotation"; type: "double"; read: "rotation"; write: "setRotation" }
        Property { name: "scale"; type: "double"; read: "scale"; write: "setScale" }
        Property {
            name: "transformOrigin"
            type: "TransformOrigin"
            read: "transformOrigin"
            write: "setTransformOrigin"
        }
        Property {
            name: "transformOriginPoint"
            type: "QPointF"
            isReadonly: true
            read: "transformOriginPoint"
        }
        Property {
            name: "transform"
            type: "QQuickTransform"
            isList: true
            isReadonly: true
            read: "transform"
        }
        Property { name: "smooth"; type: "bool"; read: "smooth"; write: "setSmooth" }
        Property { name: "antialiasing"; type: "bool"; read: "antialiasing"; write: "setAntialiasing" }
        Property {
            name: "implicitWidth"
            type: "double"
            read: "implicitWidth"
            write: "setImplicitWidth"
        }
        Property {
            name: "implicitHeight"
            type: "double"
            read: "implicitHeight"
            write: "setImplicitHeight"
        }
        Property {
            name: "containmentMask"
            revision: 523
            type: "QObject"
            isPointer: true
            read: "containmentMask"
            write: "setContainmentMask"
        }
        Property {
            name: "layer"
            type: "QQuickItemLayer"
            isReadonly: true
            isPointer: true
            read: "layer"
        }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "QString" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 513
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 513
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "containmentMaskChanged"; revision: 523 }
        Signal { name: "paletteChanged"; revision: 1536 }
        Signal { name: "paletteCreated"; revision: 1536 }
        Method { name: "update" }
        Method {
            name: "_q_resourceObjectDeleted"
            Parameter { type: "QObject"; isPointer: true }
        }
        Method {
            name: "_q_createJSWrapper"
            type: "qulonglong"
            Parameter { type: "QV4::ExecutionEngine"; isPointer: true }
        }
        Method {
            name: "grabToImage"
            revision: 516
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 516
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapFromGlobal"
            revision: 519
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToGlobal"
            revision: 519
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 513
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 513; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "qquickitemgrabresult.h"
        name: "QQuickItemGrabResult"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "image"; type: "QImage"; isReadonly: true; read: "image" }
        Property { name: "url"; type: "QUrl"; isReadonly: true; read: "url" }
        Signal { name: "ready" }
        Method { name: "setup" }
        Method { name: "render" }
        Method {
            name: "saveToFile"
            type: "bool"
            Parameter { name: "fileName"; type: "QString" }
        }
    }
    Component {
        file: "private/qquickitem_p.h"
        name: "QQuickItemLayer"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Property { name: "textureSize"; type: "QSize"; read: "size"; write: "setSize" }
        Property { name: "sourceRect"; type: "QRectF"; read: "sourceRect"; write: "setSourceRect" }
        Property { name: "mipmap"; type: "bool"; read: "mipmap"; write: "setMipmap" }
        Property { name: "smooth"; type: "bool"; read: "smooth"; write: "setSmooth" }
        Property {
            name: "wrapMode"
            type: "QQuickShaderEffectSource::WrapMode"
            read: "wrapMode"
            write: "setWrapMode"
        }
        Property {
            name: "format"
            type: "QQuickShaderEffectSource::Format"
            read: "format"
            write: "setFormat"
        }
        Property { name: "samplerName"; type: "QByteArray"; read: "name"; write: "setName" }
        Property {
            name: "effect"
            type: "QQmlComponent"
            isPointer: true
            read: "effect"
            write: "setEffect"
        }
        Property {
            name: "textureMirroring"
            type: "QQuickShaderEffectSource::TextureMirroring"
            read: "textureMirroring"
            write: "setTextureMirroring"
        }
        Property { name: "samples"; type: "int"; read: "samples"; write: "setSamples" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "sizeChanged"
            Parameter { name: "size"; type: "QSize" }
        }
        Signal {
            name: "mipmapChanged"
            Parameter { name: "mipmap"; type: "bool" }
        }
        Signal {
            name: "wrapModeChanged"
            Parameter { name: "mode"; type: "QQuickShaderEffectSource::WrapMode" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "QByteArray" }
        }
        Signal {
            name: "effectChanged"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Signal {
            name: "smoothChanged"
            Parameter { name: "smooth"; type: "bool" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "QQuickShaderEffectSource::Format" }
        }
        Signal {
            name: "sourceRectChanged"
            Parameter { name: "sourceRect"; type: "QRectF" }
        }
        Signal {
            name: "textureMirroringChanged"
            Parameter { name: "mirroring"; type: "QQuickShaderEffectSource::TextureMirroring" }
        }
        Signal {
            name: "samplesChanged"
            Parameter { name: "count"; type: "int" }
        }
    }
    Component {
        file: "private/qquickitemview_p.h"
        name: "QQuickItemView"
        accessSemantics: "reference"
        defaultProperty: "flickableData"
        prototype: "QQuickFlickable"
        exports: [
            "QtQuick/ItemView 2.1",
            "QtQuick/ItemView 2.3",
            "QtQuick/ItemView 2.4",
            "QtQuick/ItemView 2.7",
            "QtQuick/ItemView 2.9",
            "QtQuick/ItemView 2.10",
            "QtQuick/ItemView 2.11",
            "QtQuick/ItemView 2.12",
            "QtQuick/ItemView 2.13",
            "QtQuick/ItemView 2.15",
            "QtQuick/ItemView 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [
            513,
            515,
            516,
            519,
            521,
            522,
            523,
            524,
            525,
            527,
            1536
        ]
        Enum {
            name: "LayoutDirection"
            values: [
                "LeftToRight",
                "RightToLeft",
                "VerticalTopToBottom",
                "VerticalBottomToTop"
            ]
        }
        Enum {
            name: "VerticalLayoutDirection"
            values: ["TopToBottom", "BottomToTop"]
        }
        Enum {
            name: "HighlightRangeMode"
            values: ["NoHighlightRange", "ApplyRange", "StrictlyEnforceRange"]
        }
        Enum {
            name: "PositionMode"
            values: [
                "Beginning",
                "Center",
                "End",
                "Visible",
                "Contain",
                "SnapPosition"
            ]
        }
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Property { name: "currentIndex"; type: "int"; read: "currentIndex"; write: "setCurrentIndex" }
        Property {
            name: "currentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "currentItem"
        }
        Property {
            name: "keyNavigationWraps"
            type: "bool"
            read: "isWrapEnabled"
            write: "setWrapEnabled"
        }
        Property {
            name: "keyNavigationEnabled"
            revision: 519
            type: "bool"
            read: "isKeyNavigationEnabled"
            write: "setKeyNavigationEnabled"
        }
        Property { name: "cacheBuffer"; type: "int"; read: "cacheBuffer"; write: "setCacheBuffer" }
        Property {
            name: "displayMarginBeginning"
            revision: 515
            type: "int"
            read: "displayMarginBeginning"
            write: "setDisplayMarginBeginning"
        }
        Property {
            name: "displayMarginEnd"
            revision: 515
            type: "int"
            read: "displayMarginEnd"
            write: "setDisplayMarginEnd"
        }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
        }
        Property {
            name: "effectiveLayoutDirection"
            type: "Qt::LayoutDirection"
            isReadonly: true
            read: "effectiveLayoutDirection"
        }
        Property {
            name: "verticalLayoutDirection"
            type: "VerticalLayoutDirection"
            read: "verticalLayoutDirection"
            write: "setVerticalLayoutDirection"
        }
        Property {
            name: "header"
            type: "QQmlComponent"
            isPointer: true
            read: "header"
            write: "setHeader"
        }
        Property {
            name: "headerItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "headerItem"
        }
        Property {
            name: "footer"
            type: "QQmlComponent"
            isPointer: true
            read: "footer"
            write: "setFooter"
        }
        Property {
            name: "footerItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "footerItem"
        }
        Property {
            name: "populate"
            type: "QQuickTransition"
            isPointer: true
            read: "populateTransition"
            write: "setPopulateTransition"
        }
        Property {
            name: "add"
            type: "QQuickTransition"
            isPointer: true
            read: "addTransition"
            write: "setAddTransition"
        }
        Property {
            name: "addDisplaced"
            type: "QQuickTransition"
            isPointer: true
            read: "addDisplacedTransition"
            write: "setAddDisplacedTransition"
        }
        Property {
            name: "move"
            type: "QQuickTransition"
            isPointer: true
            read: "moveTransition"
            write: "setMoveTransition"
        }
        Property {
            name: "moveDisplaced"
            type: "QQuickTransition"
            isPointer: true
            read: "moveDisplacedTransition"
            write: "setMoveDisplacedTransition"
        }
        Property {
            name: "remove"
            type: "QQuickTransition"
            isPointer: true
            read: "removeTransition"
            write: "setRemoveTransition"
        }
        Property {
            name: "removeDisplaced"
            type: "QQuickTransition"
            isPointer: true
            read: "removeDisplacedTransition"
            write: "setRemoveDisplacedTransition"
        }
        Property {
            name: "displaced"
            type: "QQuickTransition"
            isPointer: true
            read: "displacedTransition"
            write: "setDisplacedTransition"
        }
        Property {
            name: "highlight"
            type: "QQmlComponent"
            isPointer: true
            read: "highlight"
            write: "setHighlight"
        }
        Property {
            name: "highlightItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "highlightItem"
        }
        Property {
            name: "highlightFollowsCurrentItem"
            type: "bool"
            read: "highlightFollowsCurrentItem"
            write: "setHighlightFollowsCurrentItem"
        }
        Property {
            name: "highlightRangeMode"
            type: "HighlightRangeMode"
            read: "highlightRangeMode"
            write: "setHighlightRangeMode"
        }
        Property {
            name: "preferredHighlightBegin"
            type: "double"
            read: "preferredHighlightBegin"
            write: "setPreferredHighlightBegin"
        }
        Property {
            name: "preferredHighlightEnd"
            type: "double"
            read: "preferredHighlightEnd"
            write: "setPreferredHighlightEnd"
        }
        Property {
            name: "highlightMoveDuration"
            type: "int"
            read: "highlightMoveDuration"
            write: "setHighlightMoveDuration"
        }
        Property {
            name: "reuseItems"
            revision: 527
            type: "bool"
            read: "reuseItems"
            write: "setReuseItems"
        }
        Signal { name: "keyNavigationEnabledChanged"; revision: 519 }
        Signal { name: "populateTransitionChanged" }
        Signal { name: "addTransitionChanged" }
        Signal { name: "addDisplacedTransitionChanged" }
        Signal { name: "moveTransitionChanged" }
        Signal { name: "moveDisplacedTransitionChanged" }
        Signal { name: "removeTransitionChanged" }
        Signal { name: "removeDisplacedTransitionChanged" }
        Signal { name: "displacedTransitionChanged" }
        Signal { name: "reuseItemsChanged"; revision: 527 }
        Method { name: "destroyRemoved" }
        Method {
            name: "createdItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "initItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "modelUpdated"
            Parameter { name: "changeSet"; type: "QQmlChangeSet" }
            Parameter { name: "reset"; type: "bool" }
        }
        Method {
            name: "destroyingItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "onItemPooled"
            revision: 527
            Parameter { name: "modelIndex"; type: "int" }
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "onItemReused"
            revision: 527
            Parameter { name: "modelIndex"; type: "int" }
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method { name: "animStopped" }
        Method { name: "trackedPositionChanged" }
        Method {
            name: "positionViewAtIndex"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "mode"; type: "int" }
        }
        Method {
            name: "indexAt"
            type: "int"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "itemAtIndex"
            revision: 525
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "positionViewAtBeginning" }
        Method { name: "positionViewAtEnd" }
        Method { name: "forceLayout"; revision: 513 }
    }
    Component {
        file: "private/qquickitemview_p.h"
        name: "QQuickItemViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "view"; type: "QQuickItemView"; isReadonly: true; isPointer: true; read: "view" }
        Property { name: "isCurrentItem"; type: "bool"; isReadonly: true; read: "isCurrentItem" }
        Property { name: "delayRemove"; type: "bool"; read: "delayRemove"; write: "setDelayRemove" }
        Property { name: "section"; type: "QString"; isReadonly: true; read: "section" }
        Property { name: "previousSection"; type: "QString"; isReadonly: true; read: "prevSection" }
        Property { name: "nextSection"; type: "QString"; isReadonly: true; read: "nextSection" }
        Signal { name: "currentItemChanged" }
        Signal { name: "add" }
        Signal { name: "remove" }
        Signal { name: "prevSectionChanged" }
        Signal { name: "pooled" }
        Signal { name: "reused" }
    }
    Component {
        file: "private/qquickevents_p_p.h"
        name: "QQuickKeyEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "key"; type: "int"; isReadonly: true; read: "key" }
        Property { name: "text"; type: "QString"; isReadonly: true; read: "text" }
        Property { name: "modifiers"; type: "int"; isReadonly: true; read: "modifiers" }
        Property { name: "isAutoRepeat"; type: "bool"; isReadonly: true; read: "isAutoRepeat" }
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Property { name: "nativeScanCode"; type: "uint"; isReadonly: true; read: "nativeScanCode" }
        Property { name: "accepted"; type: "bool"; read: "isAccepted"; write: "setAccepted" }
        Method {
            name: "matches"
            revision: 514
            type: "bool"
            Parameter { name: "key"; type: "QKeySequence::StandardKey" }
        }
    }
    Component {
        file: "private/qquickitem_p.h"
        name: "QQuickKeyNavigationAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/KeyNavigation 2.0", "QtQuick/KeyNavigation 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickKeyNavigationAttached"
        Enum {
            name: "Priority"
            values: ["BeforeItem", "AfterItem"]
        }
        Property { name: "left"; type: "QQuickItem"; isPointer: true; read: "left"; write: "setLeft" }
        Property { name: "right"; type: "QQuickItem"; isPointer: true; read: "right"; write: "setRight" }
        Property { name: "up"; type: "QQuickItem"; isPointer: true; read: "up"; write: "setUp" }
        Property { name: "down"; type: "QQuickItem"; isPointer: true; read: "down"; write: "setDown" }
        Property { name: "tab"; type: "QQuickItem"; isPointer: true; read: "tab"; write: "setTab" }
        Property {
            name: "backtab"
            type: "QQuickItem"
            isPointer: true
            read: "backtab"
            write: "setBacktab"
        }
        Property { name: "priority"; type: "Priority"; read: "priority"; write: "setPriority" }
    }
    Component {
        file: "private/qquickitem_p.h"
        name: "QQuickKeysAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/Keys 2.0", "QtQuick/Keys 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickKeysAttached"
        Enum {
            name: "Priority"
            values: ["BeforeItem", "AfterItem"]
        }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Property {
            name: "forwardTo"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "forwardTo"
        }
        Property { name: "priority"; type: "Priority"; read: "priority"; write: "setPriority" }
        Signal {
            name: "pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "shortcutOverride"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit0Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit1Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit2Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit3Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit4Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit5Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit6Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit7Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit8Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "digit9Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "leftPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "rightPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "upPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "downPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "tabPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "backtabPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "asteriskPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "numberSignPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "escapePressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "returnPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "enterPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "deletePressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "spacePressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "backPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "cancelPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "selectPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "yesPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "noPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "context1Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "context2Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "context3Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "context4Pressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "callPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "hangupPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "flipPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "menuPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "volumeUpPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
        Signal {
            name: "volumeDownPressed"
            Parameter { name: "event"; type: "QQuickKeyEvent"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickitem_p.h"
        name: "QQuickLayoutMirroringAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick/LayoutMirroring 2.0",
            "QtQuick/LayoutMirroring 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickLayoutMirroringAttached"
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Property {
            name: "childrenInherit"
            type: "bool"
            read: "childrenInherit"
            write: "setChildrenInherit"
        }
    }
    Component {
        file: "private/qquicklistview_p.h"
        name: "QQuickListView"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItemView"
        exports: [
            "QtQuick/ListView 2.0",
            "QtQuick/ListView 2.1",
            "QtQuick/ListView 2.3",
            "QtQuick/ListView 2.4",
            "QtQuick/ListView 2.7",
            "QtQuick/ListView 2.9",
            "QtQuick/ListView 2.10",
            "QtQuick/ListView 2.11",
            "QtQuick/ListView 2.12",
            "QtQuick/ListView 2.13",
            "QtQuick/ListView 2.15",
            "QtQuick/ListView 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            515,
            516,
            519,
            521,
            522,
            523,
            524,
            525,
            527,
            1536
        ]
        attachedType: "QQuickListViewAttached"
        Enum {
            name: "Orientation"
            values: ["Horizontal", "Vertical"]
        }
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapToItem", "SnapOneItem"]
        }
        Enum {
            name: "HeaderPositioning"
            values: ["InlineHeader", "OverlayHeader", "PullBackHeader"]
        }
        Enum {
            name: "FooterPositioning"
            values: ["InlineFooter", "OverlayFooter", "PullBackFooter"]
        }
        Property {
            name: "highlightMoveVelocity"
            type: "double"
            read: "highlightMoveVelocity"
            write: "setHighlightMoveVelocity"
        }
        Property {
            name: "highlightResizeVelocity"
            type: "double"
            read: "highlightResizeVelocity"
            write: "setHighlightResizeVelocity"
        }
        Property {
            name: "highlightResizeDuration"
            type: "int"
            read: "highlightResizeDuration"
            write: "setHighlightResizeDuration"
        }
        Property { name: "spacing"; type: "double"; read: "spacing"; write: "setSpacing" }
        Property {
            name: "orientation"
            type: "Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property {
            name: "section"
            type: "QQuickViewSection"
            isReadonly: true
            isPointer: true
            read: "sectionCriteria"
        }
        Property { name: "currentSection"; type: "QString"; isReadonly: true; read: "currentSection" }
        Property { name: "snapMode"; type: "SnapMode"; read: "snapMode"; write: "setSnapMode" }
        Property {
            name: "headerPositioning"
            revision: 516
            type: "HeaderPositioning"
            read: "headerPositioning"
            write: "setHeaderPositioning"
        }
        Property {
            name: "footerPositioning"
            revision: 516
            type: "FooterPositioning"
            read: "footerPositioning"
            write: "setFooterPositioning"
        }
        Signal { name: "headerPositioningChanged"; revision: 516 }
        Signal { name: "footerPositioningChanged"; revision: 516 }
        Method { name: "incrementCurrentIndex" }
        Method { name: "decrementCurrentIndex" }
    }
    Component {
        file: "private/qquicklistview_p.h"
        name: "QQuickListViewAttached"
        accessSemantics: "reference"
        prototype: "QQuickItemViewAttached"
    }
    Component {
        file: "private/qquickloader_p.h"
        name: "QQuickLoader"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        exports: [
            "QtQuick/Loader 2.0",
            "QtQuick/Loader 2.1",
            "QtQuick/Loader 2.4",
            "QtQuick/Loader 2.7",
            "QtQuick/Loader 2.11",
            "QtQuick/Loader 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property { name: "active"; type: "bool"; read: "active"; write: "setActive" }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource" }
        Property {
            name: "sourceComponent"
            type: "QQmlComponent"
            isPointer: true
            read: "sourceComponent"
            write: "setSourceComponent"
        }
        Property { name: "item"; type: "QObject"; isReadonly: true; isPointer: true; read: "item" }
        Property { name: "status"; type: "Status"; isReadonly: true; read: "status" }
        Property { name: "progress"; type: "double"; isReadonly: true; read: "progress" }
        Property { name: "asynchronous"; type: "bool"; read: "asynchronous"; write: "setAsynchronous" }
        Signal { name: "loaded" }
        Method { name: "_q_sourceLoaded" }
        Method { name: "_q_updateSize" }
        Method {
            name: "setSource"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
    }
    Component {
        file: "private/qquicktranslate_p.h"
        name: "QQuickMatrix4x4"
        accessSemantics: "reference"
        prototype: "QQuickTransform"
        exports: ["QtQuick/Matrix4x4 2.3", "QtQuick/Matrix4x4 6.0"]
        exportMetaObjectRevisions: [515, 1536]
        Property { name: "matrix"; type: "QMatrix4x4"; read: "matrix"; write: "setMatrix" }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QMatrix4x4"
        accessSemantics: "value"
        extension: "QQuickMatrix4x4ValueType"
        exports: ["QtQuick/matrix4x4 2.0", "QtQuick/matrix4x4 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickMatrix4x4ValueType"
        accessSemantics: "value"
        Property { name: "m11"; type: "double"; read: "m11"; write: "setM11" }
        Property { name: "m12"; type: "double"; read: "m12"; write: "setM12" }
        Property { name: "m13"; type: "double"; read: "m13"; write: "setM13" }
        Property { name: "m14"; type: "double"; read: "m14"; write: "setM14" }
        Property { name: "m21"; type: "double"; read: "m21"; write: "setM21" }
        Property { name: "m22"; type: "double"; read: "m22"; write: "setM22" }
        Property { name: "m23"; type: "double"; read: "m23"; write: "setM23" }
        Property { name: "m24"; type: "double"; read: "m24"; write: "setM24" }
        Property { name: "m31"; type: "double"; read: "m31"; write: "setM31" }
        Property { name: "m32"; type: "double"; read: "m32"; write: "setM32" }
        Property { name: "m33"; type: "double"; read: "m33"; write: "setM33" }
        Property { name: "m34"; type: "double"; read: "m34"; write: "setM34" }
        Property { name: "m41"; type: "double"; read: "m41"; write: "setM41" }
        Property { name: "m42"; type: "double"; read: "m42"; write: "setM42" }
        Property { name: "m43"; type: "double"; read: "m43"; write: "setM43" }
        Property { name: "m44"; type: "double"; read: "m44"; write: "setM44" }
        Method {
            name: "translate"
            Parameter { name: "t"; type: "QVector3D" }
        }
        Method {
            name: "rotate"
            Parameter { name: "angle"; type: "float" }
            Parameter { name: "axis"; type: "QVector3D" }
        }
        Method {
            name: "scale"
            Parameter { name: "s"; type: "float" }
        }
        Method {
            name: "scale"
            Parameter { name: "sx"; type: "float" }
            Parameter { name: "sy"; type: "float" }
            Parameter { name: "sz"; type: "float" }
        }
        Method {
            name: "scale"
            Parameter { name: "s"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            Parameter { name: "eye"; type: "QVector3D" }
            Parameter { name: "center"; type: "QVector3D" }
            Parameter { name: "up"; type: "QVector3D" }
        }
        Method {
            name: "times"
            type: "QMatrix4x4"
            Parameter { name: "m"; type: "QMatrix4x4" }
        }
        Method {
            name: "times"
            type: "QVector4D"
            Parameter { name: "vec"; type: "QVector4D" }
        }
        Method {
            name: "times"
            type: "QVector3D"
            Parameter { name: "vec"; type: "QVector3D" }
        }
        Method {
            name: "times"
            type: "QMatrix4x4"
            Parameter { name: "factor"; type: "double" }
        }
        Method {
            name: "plus"
            type: "QMatrix4x4"
            Parameter { name: "m"; type: "QMatrix4x4" }
        }
        Method {
            name: "minus"
            type: "QMatrix4x4"
            Parameter { name: "m"; type: "QMatrix4x4" }
        }
        Method {
            name: "row"
            type: "QVector4D"
            Parameter { name: "n"; type: "int" }
        }
        Method {
            name: "column"
            type: "QVector4D"
            Parameter { name: "m"; type: "int" }
        }
        Method { name: "determinant"; type: "double" }
        Method { name: "inverted"; type: "QMatrix4x4" }
        Method { name: "transposed"; type: "QMatrix4x4" }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "m"; type: "QMatrix4x4" }
            Parameter { name: "epsilon"; type: "double" }
        }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "m"; type: "QMatrix4x4" }
        }
    }
    Component {
        file: "private/qquickmousearea_p.h"
        name: "QQuickMouseArea"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/MouseArea 2.0",
            "QtQuick/MouseArea 2.1",
            "QtQuick/MouseArea 2.4",
            "QtQuick/MouseArea 2.5",
            "QtQuick/MouseArea 2.7",
            "QtQuick/MouseArea 2.9",
            "QtQuick/MouseArea 2.11",
            "QtQuick/MouseArea 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 521, 523, 1536]
        Property { name: "mouseX"; type: "double"; isReadonly: true; read: "mouseX" }
        Property { name: "mouseY"; type: "double"; isReadonly: true; read: "mouseY" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true; read: "hovered" }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "pressed" }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property {
            name: "scrollGestureEnabled"
            revision: 517
            type: "bool"
            read: "isScrollGestureEnabled"
            write: "setScrollGestureEnabled"
        }
        Property {
            name: "pressedButtons"
            type: "Qt::MouseButtons"
            isReadonly: true
            read: "pressedButtons"
        }
        Property {
            name: "acceptedButtons"
            type: "Qt::MouseButtons"
            read: "acceptedButtons"
            write: "setAcceptedButtons"
        }
        Property { name: "hoverEnabled"; type: "bool"; read: "hoverEnabled"; write: "setHoverEnabled" }
        Property { name: "drag"; type: "QQuickDrag"; isReadonly: true; isPointer: true; read: "drag" }
        Property {
            name: "preventStealing"
            type: "bool"
            read: "preventStealing"
            write: "setPreventStealing"
        }
        Property {
            name: "propagateComposedEvents"
            type: "bool"
            read: "propagateComposedEvents"
            write: "setPropagateComposedEvents"
        }
        Property {
            name: "cursorShape"
            type: "Qt::CursorShape"
            read: "cursorShape"
            write: "setCursorShape"
        }
        Property {
            name: "containsPress"
            revision: 516
            type: "bool"
            isReadonly: true
            read: "containsPress"
        }
        Property {
            name: "pressAndHoldInterval"
            revision: 521
            type: "int"
            read: "pressAndHoldInterval"
            write: "setPressAndHoldInterval"
        }
        Signal { name: "hoveredChanged" }
        Signal { name: "scrollGestureEnabledChanged"; revision: 517 }
        Signal {
            name: "positionChanged"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mouseXChanged"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mouseYChanged"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "pressed"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "pressAndHold"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "clicked"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "wheel"
            Parameter { name: "wheel"; type: "QQuickWheelEvent"; isPointer: true }
        }
        Signal { name: "entered" }
        Signal { name: "exited" }
        Signal { name: "canceled" }
        Signal { name: "containsPressChanged"; revision: 516 }
        Signal { name: "pressAndHoldIntervalChanged"; revision: 521 }
    }
    Component {
        file: "private/qquickevents_p_p.h"
        name: "QQuickMouseEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "x"; type: "double"; isReadonly: true; read: "x" }
        Property { name: "y"; type: "double"; isReadonly: true; read: "y" }
        Property { name: "button"; type: "int"; isReadonly: true; read: "button" }
        Property { name: "buttons"; type: "int"; isReadonly: true; read: "buttons" }
        Property { name: "modifiers"; type: "int"; isReadonly: true; read: "modifiers" }
        Property { name: "source"; revision: 519; type: "int"; isReadonly: true; read: "source" }
        Property { name: "wasHeld"; type: "bool"; isReadonly: true; read: "wasHeld" }
        Property { name: "isClick"; type: "bool"; isReadonly: true; read: "isClick" }
        Property { name: "accepted"; type: "bool"; read: "isAccepted"; write: "setAccepted" }
        Property { name: "flags"; revision: 523; type: "int"; isReadonly: true; read: "flags" }
    }
    Component {
        file: "private/qquickmultipointhandler_p.h"
        name: "QQuickMultiPointHandler"
        accessSemantics: "reference"
        prototype: "QQuickPointerDeviceHandler"
        Property {
            name: "minimumPointCount"
            type: "int"
            read: "minimumPointCount"
            write: "setMinimumPointCount"
        }
        Property {
            name: "maximumPointCount"
            type: "int"
            read: "maximumPointCount"
            write: "setMaximumPointCount"
        }
        Property { name: "centroid"; type: "QQuickHandlerPoint"; isReadonly: true; read: "centroid" }
    }
    Component {
        file: "private/qquickmultipointtoucharea_p.h"
        name: "QQuickMultiPointTouchArea"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/MultiPointTouchArea 2.0",
            "QtQuick/MultiPointTouchArea 2.1",
            "QtQuick/MultiPointTouchArea 2.4",
            "QtQuick/MultiPointTouchArea 2.7",
            "QtQuick/MultiPointTouchArea 2.11",
            "QtQuick/MultiPointTouchArea 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Property {
            name: "touchPoints"
            type: "QQuickTouchPoint"
            isList: true
            isReadonly: true
            read: "touchPoints"
        }
        Property {
            name: "minimumTouchPoints"
            type: "int"
            read: "minimumTouchPoints"
            write: "setMinimumTouchPoints"
        }
        Property {
            name: "maximumTouchPoints"
            type: "int"
            read: "maximumTouchPoints"
            write: "setMaximumTouchPoints"
        }
        Property { name: "mouseEnabled"; type: "bool"; read: "mouseEnabled"; write: "setMouseEnabled" }
        Signal {
            name: "pressed"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "updated"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "released"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "canceled"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "gestureStarted"
            Parameter { name: "gesture"; type: "QQuickGrabGestureEvent"; isPointer: true }
        }
        Signal {
            name: "touchUpdated"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickNumberAnimation"
        accessSemantics: "reference"
        prototype: "QQuickPropertyAnimation"
        exports: [
            "QtQuick/NumberAnimation 2.0",
            "QtQuick/NumberAnimation 2.12",
            "QtQuick/NumberAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickOpacityAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAnimator"
        exports: [
            "QtQuick/OpacityAnimator 2.2",
            "QtQuick/OpacityAnimator 2.12",
            "QtQuick/OpacityAnimator 6.0"
        ]
        exportMetaObjectRevisions: [514, 524, 1536]
    }
    Component {
        file: "qquickpainteditem.h"
        name: "QQuickPaintedItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/PaintedItem 2.0",
            "QtQuick/PaintedItem 2.1",
            "QtQuick/PaintedItem 2.4",
            "QtQuick/PaintedItem 2.7",
            "QtQuick/PaintedItem 2.11",
            "QtQuick/PaintedItem 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Enum {
            name: "RenderTarget"
            values: [
                "Image",
                "FramebufferObject",
                "InvertedYFramebufferObject"
            ]
        }
        Enum {
            name: "PerformanceHints"
            alias: "PerformanceHint"
            isFlag: true
            values: ["FastFBOResizing"]
        }
        Property { name: "contentsSize"; type: "QSize"; read: "contentsSize"; write: "setContentsSize" }
        Property { name: "fillColor"; type: "QColor"; read: "fillColor"; write: "setFillColor" }
        Property {
            name: "contentsScale"
            type: "double"
            read: "contentsScale"
            write: "setContentsScale"
        }
        Property {
            name: "renderTarget"
            type: "RenderTarget"
            read: "renderTarget"
            write: "setRenderTarget"
        }
        Property { name: "textureSize"; type: "QSize"; read: "textureSize"; write: "setTextureSize" }
        Method { name: "invalidateSceneGraph" }
    }
    Component {
        file: "private/qquickpalette_p.h"
        name: "QQuickPalette"
        accessSemantics: "reference"
        prototype: "QQuickColorGroup"
        exports: ["QtQuick/Palette 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "active"
            type: "QQuickColorGroup"
            isPointer: true
            read: "active"
            write: "setActive"
        }
        Property {
            name: "inactive"
            type: "QQuickColorGroup"
            isPointer: true
            read: "inactive"
            write: "setInactive"
        }
        Property {
            name: "disabled"
            type: "QQuickColorGroup"
            isPointer: true
            read: "disabled"
            write: "setDisabled"
        }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "QQuickColorGroup"; isPointer: true }
        }
        Method {
            name: "setInactive"
            Parameter { name: "inactive"; type: "QQuickColorGroup"; isPointer: true }
        }
        Method {
            name: "setDisabled"
            Parameter { name: "disabled"; type: "QQuickColorGroup"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickParallelAnimation"
        accessSemantics: "reference"
        defaultProperty: "animations"
        prototype: "QQuickAnimationGroup"
        exports: [
            "QtQuick/ParallelAnimation 2.0",
            "QtQuick/ParallelAnimation 2.12",
            "QtQuick/ParallelAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
    }
    Component {
        file: "private/qquickitemanimation_p.h"
        name: "QQuickParentAnimation"
        accessSemantics: "reference"
        defaultProperty: "animations"
        prototype: "QQuickAnimationGroup"
        exports: [
            "QtQuick/ParentAnimation 2.0",
            "QtQuick/ParentAnimation 2.12",
            "QtQuick/ParentAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property {
            name: "target"
            type: "QQuickItem"
            isPointer: true
            read: "target"
            write: "setTargetObject"
        }
        Property {
            name: "newParent"
            type: "QQuickItem"
            isPointer: true
            read: "newParent"
            write: "setNewParent"
        }
        Property { name: "via"; type: "QQuickItem"; isPointer: true; read: "via"; write: "setVia" }
    }
    Component {
        file: "private/qquickstateoperations_p.h"
        name: "QQuickParentChange"
        accessSemantics: "reference"
        prototype: "QQuickStateOperation"
        exports: ["QtQuick/ParentChange 2.0", "QtQuick/ParentChange 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "target"; type: "QQuickItem"; isPointer: true; read: "object"; write: "setObject" }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true; read: "parent"; write: "setParent" }
        Property { name: "x"; type: "QQmlScriptString"; read: "x"; write: "setX" }
        Property { name: "y"; type: "QQmlScriptString"; read: "y"; write: "setY" }
        Property { name: "width"; type: "QQmlScriptString"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "QQmlScriptString"; read: "height"; write: "setHeight" }
        Property { name: "scale"; type: "QQmlScriptString"; read: "scale"; write: "setScale" }
        Property { name: "rotation"; type: "QQmlScriptString"; read: "rotation"; write: "setRotation" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPath"
        accessSemantics: "reference"
        defaultProperty: "pathElements"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus", "QQmlParserStatus"]
        exports: ["QtQuick/Path 2.0", "QtQuick/Path 2.14", "QtQuick/Path 6.0"]
        exportMetaObjectRevisions: [512, 526, 1536]
        Property {
            name: "pathElements"
            type: "QQuickPathElement"
            isList: true
            isReadonly: true
            read: "pathElements"
        }
        Property { name: "startX"; type: "double"; read: "startX"; write: "setStartX" }
        Property { name: "startY"; type: "double"; read: "startY"; write: "setStartY" }
        Property { name: "closed"; type: "bool"; isReadonly: true; read: "isClosed" }
        Property { name: "scale"; revision: 526; type: "QSizeF"; read: "scale"; write: "setScale" }
        Signal { name: "changed" }
        Signal { name: "scaleChanged"; revision: 526 }
        Method { name: "processPath" }
        Method {
            name: "pointAtPercent"
            revision: 526
            type: "QPointF"
            Parameter { name: "t"; type: "double" }
        }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathAngleArc"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathAngleArc 2.11", "QtQuick/PathAngleArc 6.0"]
        exportMetaObjectRevisions: [523, 1536]
        Property { name: "centerX"; type: "double"; read: "centerX"; write: "setCenterX" }
        Property { name: "centerY"; type: "double"; read: "centerY"; write: "setCenterY" }
        Property { name: "radiusX"; type: "double"; read: "radiusX"; write: "setRadiusX" }
        Property { name: "radiusY"; type: "double"; read: "radiusY"; write: "setRadiusY" }
        Property { name: "startAngle"; type: "double"; read: "startAngle"; write: "setStartAngle" }
        Property { name: "sweepAngle"; type: "double"; read: "sweepAngle"; write: "setSweepAngle" }
        Property { name: "moveToStart"; type: "bool"; read: "moveToStart"; write: "setMoveToStart" }
    }
    Component {
        file: "private/qquickitemanimation_p.h"
        name: "QQuickPathAnimation"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/PathAnimation 2.0",
            "QtQuick/PathAnimation 2.12",
            "QtQuick/PathAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Enum {
            name: "Orientation"
            values: [
                "Fixed",
                "RightFirst",
                "LeftFirst",
                "BottomFirst",
                "TopFirst"
            ]
        }
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Property { name: "easing"; type: "QEasingCurve"; read: "easing"; write: "setEasing" }
        Property { name: "path"; type: "QQuickPath"; isPointer: true; read: "path"; write: "setPath" }
        Property {
            name: "target"
            type: "QQuickItem"
            isPointer: true
            read: "target"
            write: "setTargetObject"
        }
        Property {
            name: "orientation"
            type: "Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "anchorPoint"; type: "QPointF"; read: "anchorPoint"; write: "setAnchorPoint" }
        Property {
            name: "orientationEntryDuration"
            type: "int"
            read: "orientationEntryDuration"
            write: "setOrientationEntryDuration"
        }
        Property {
            name: "orientationExitDuration"
            type: "int"
            read: "orientationExitDuration"
            write: "setOrientationExitDuration"
        }
        Property { name: "endRotation"; type: "double"; read: "endRotation"; write: "setEndRotation" }
        Signal {
            name: "durationChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "easingChanged"
            Parameter { type: "QEasingCurve" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { type: "Orientation" }
        }
        Signal {
            name: "anchorPointChanged"
            Parameter { type: "QPointF" }
        }
        Signal {
            name: "orientationEntryDurationChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "orientationExitDurationChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "endRotationChanged"
            Parameter { type: "double" }
        }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathArc"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: [
            "QtQuick/PathArc 2.0",
            "QtQuick/PathArc 2.9",
            "QtQuick/PathArc 6.0"
        ]
        exportMetaObjectRevisions: [512, 521, 1536]
        Enum {
            name: "ArcDirection"
            values: ["Clockwise", "Counterclockwise"]
        }
        Property { name: "radiusX"; type: "double"; read: "radiusX"; write: "setRadiusX" }
        Property { name: "radiusY"; type: "double"; read: "radiusY"; write: "setRadiusY" }
        Property { name: "useLargeArc"; type: "bool"; read: "useLargeArc"; write: "setUseLargeArc" }
        Property { name: "direction"; type: "ArcDirection"; read: "direction"; write: "setDirection" }
        Property {
            name: "xAxisRotation"
            revision: 521
            type: "double"
            read: "xAxisRotation"
            write: "setXAxisRotation"
        }
        Signal { name: "xAxisRotationChanged"; revision: 521 }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathAttribute"
        accessSemantics: "reference"
        prototype: "QQuickPathElement"
        exports: ["QtQuick/PathAttribute 2.0", "QtQuick/PathAttribute 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "name"; type: "QString"; read: "name"; write: "setName" }
        Property { name: "value"; type: "double"; read: "value"; write: "setValue" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathCatmullRomCurve"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathCurve 2.0", "QtQuick/PathCurve 6.0"]
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathCubic"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathCubic 2.0", "QtQuick/PathCubic 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "control1X"; type: "double"; read: "control1X"; write: "setControl1X" }
        Property { name: "control1Y"; type: "double"; read: "control1Y"; write: "setControl1Y" }
        Property { name: "control2X"; type: "double"; read: "control2X"; write: "setControl2X" }
        Property { name: "control2Y"; type: "double"; read: "control2Y"; write: "setControl2Y" }
        Property {
            name: "relativeControl1X"
            type: "double"
            read: "relativeControl1X"
            write: "setRelativeControl1X"
        }
        Property {
            name: "relativeControl1Y"
            type: "double"
            read: "relativeControl1Y"
            write: "setRelativeControl1Y"
        }
        Property {
            name: "relativeControl2X"
            type: "double"
            read: "relativeControl2X"
            write: "setRelativeControl2X"
        }
        Property {
            name: "relativeControl2Y"
            type: "double"
            read: "relativeControl2Y"
            write: "setRelativeControl2Y"
        }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathElement"
        accessSemantics: "reference"
        prototype: "QObject"
        Signal { name: "changed" }
    }
    Component {
        file: "private/qquickpathinterpolator_p.h"
        name: "QQuickPathInterpolator"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick/PathInterpolator 2.0",
            "QtQuick/PathInterpolator 6.0"
        ]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "path"; type: "QQuickPath"; isPointer: true; read: "path"; write: "setPath" }
        Property { name: "progress"; type: "double"; read: "progress"; write: "setProgress" }
        Property { name: "x"; type: "double"; isReadonly: true; read: "x" }
        Property { name: "y"; type: "double"; isReadonly: true; read: "y" }
        Property { name: "angle"; type: "double"; isReadonly: true; read: "angle" }
        Method { name: "_q_pathUpdated" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathLine"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathLine 2.0", "QtQuick/PathLine 6.0"]
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathMove"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathMove 2.9", "QtQuick/PathMove 6.0"]
        exportMetaObjectRevisions: [521, 1536]
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathMultiline"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathMultiline 2.14", "QtQuick/PathMultiline 6.0"]
        exportMetaObjectRevisions: [526, 1536]
        Property { name: "start"; type: "QPointF"; isReadonly: true; read: "start" }
        Property { name: "paths"; type: "QVariant"; read: "paths"; write: "setPaths" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathPercent"
        accessSemantics: "reference"
        prototype: "QQuickPathElement"
        exports: ["QtQuick/PathPercent 2.0", "QtQuick/PathPercent 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "value"; type: "double"; read: "value"; write: "setValue" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathPolyline"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathPolyline 2.14", "QtQuick/PathPolyline 6.0"]
        exportMetaObjectRevisions: [526, 1536]
        Property { name: "start"; type: "QPointF"; isReadonly: true; read: "start" }
        Property { name: "path"; type: "QVariant"; read: "path"; write: "setPath" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathQuad"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathQuad 2.0", "QtQuick/PathQuad 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "controlX"; type: "double"; read: "controlX"; write: "setControlX" }
        Property { name: "controlY"; type: "double"; read: "controlY"; write: "setControlY" }
        Property {
            name: "relativeControlX"
            type: "double"
            read: "relativeControlX"
            write: "setRelativeControlX"
        }
        Property {
            name: "relativeControlY"
            type: "double"
            read: "relativeControlY"
            write: "setRelativeControlY"
        }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathSvg"
        accessSemantics: "reference"
        prototype: "QQuickCurve"
        exports: ["QtQuick/PathSvg 2.0", "QtQuick/PathSvg 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "path"; type: "QString"; read: "path"; write: "setPath" }
    }
    Component {
        file: "private/qquickpath_p.h"
        name: "QQuickPathText"
        accessSemantics: "reference"
        prototype: "QQuickPathElement"
        exports: ["QtQuick/PathText 2.15", "QtQuick/PathText 6.0"]
        exportMetaObjectRevisions: [527, 1536]
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "width"; type: "double"; isReadonly: true; read: "width" }
        Property { name: "height"; type: "double"; isReadonly: true; read: "height" }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Method { name: "invalidate" }
    }
    Component {
        file: "private/qquickpathview_p.h"
        name: "QQuickPathView"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/PathView 2.0",
            "QtQuick/PathView 2.1",
            "QtQuick/PathView 2.4",
            "QtQuick/PathView 2.7",
            "QtQuick/PathView 2.11",
            "QtQuick/PathView 2.13",
            "QtQuick/PathView 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 525, 1536]
        attachedType: "QQuickPathViewAttached"
        Enum {
            name: "HighlightRangeMode"
            values: ["NoHighlightRange", "ApplyRange", "StrictlyEnforceRange"]
        }
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapToItem", "SnapOneItem"]
        }
        Enum {
            name: "MovementDirection"
            values: ["Shortest", "Negative", "Positive"]
        }
        Enum {
            name: "PositionMode"
            values: ["Beginning", "Center", "End", "Contain", "SnapPosition"]
        }
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property { name: "path"; type: "QQuickPath"; isPointer: true; read: "path"; write: "setPath" }
        Property { name: "currentIndex"; type: "int"; read: "currentIndex"; write: "setCurrentIndex" }
        Property {
            name: "currentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "currentItem"
        }
        Property { name: "offset"; type: "double"; read: "offset"; write: "setOffset" }
        Property {
            name: "highlight"
            type: "QQmlComponent"
            isPointer: true
            read: "highlight"
            write: "setHighlight"
        }
        Property {
            name: "highlightItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "highlightItem"
        }
        Property {
            name: "preferredHighlightBegin"
            type: "double"
            read: "preferredHighlightBegin"
            write: "setPreferredHighlightBegin"
        }
        Property {
            name: "preferredHighlightEnd"
            type: "double"
            read: "preferredHighlightEnd"
            write: "setPreferredHighlightEnd"
        }
        Property {
            name: "highlightRangeMode"
            type: "HighlightRangeMode"
            read: "highlightRangeMode"
            write: "setHighlightRangeMode"
        }
        Property {
            name: "highlightMoveDuration"
            type: "int"
            read: "highlightMoveDuration"
            write: "setHighlightMoveDuration"
        }
        Property { name: "dragMargin"; type: "double"; read: "dragMargin"; write: "setDragMargin" }
        Property {
            name: "maximumFlickVelocity"
            type: "double"
            read: "maximumFlickVelocity"
            write: "setMaximumFlickVelocity"
        }
        Property {
            name: "flickDeceleration"
            type: "double"
            read: "flickDeceleration"
            write: "setFlickDeceleration"
        }
        Property { name: "interactive"; type: "bool"; read: "isInteractive"; write: "setInteractive" }
        Property { name: "moving"; type: "bool"; isReadonly: true; read: "isMoving" }
        Property { name: "flicking"; type: "bool"; isReadonly: true; read: "isFlicking" }
        Property { name: "dragging"; type: "bool"; isReadonly: true; read: "isDragging" }
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property { name: "pathItemCount"; type: "int"; read: "pathItemCount"; write: "setPathItemCount" }
        Property { name: "snapMode"; type: "SnapMode"; read: "snapMode"; write: "setSnapMode" }
        Property {
            name: "movementDirection"
            revision: 519
            type: "MovementDirection"
            read: "movementDirection"
            write: "setMovementDirection"
        }
        Property {
            name: "cacheItemCount"
            type: "int"
            read: "cacheItemCount"
            write: "setCacheItemCount"
        }
        Signal { name: "snapPositionChanged" }
        Signal { name: "movementStarted" }
        Signal { name: "movementEnded" }
        Signal { name: "movementDirectionChanged"; revision: 519 }
        Signal { name: "flickStarted" }
        Signal { name: "flickEnded" }
        Signal { name: "dragStarted" }
        Signal { name: "dragEnded" }
        Method { name: "incrementCurrentIndex" }
        Method { name: "decrementCurrentIndex" }
        Method { name: "refill" }
        Method { name: "ticked" }
        Method { name: "movementEnding" }
        Method {
            name: "modelUpdated"
            Parameter { name: "changeSet"; type: "QQmlChangeSet" }
            Parameter { name: "reset"; type: "bool" }
        }
        Method {
            name: "createdItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "initItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "destroyingItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method { name: "pathUpdated" }
        Method {
            name: "positionViewAtIndex"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "mode"; type: "int" }
        }
        Method {
            name: "indexAt"
            type: "int"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "itemAtIndex"
            revision: 525
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquickpathview_p.h"
        name: "QQuickPathViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "view"; type: "QQuickPathView"; isReadonly: true; isPointer: true; read: "view" }
        Property { name: "isCurrentItem"; type: "bool"; isReadonly: true; read: "isCurrentItem" }
        Property { name: "onPath"; type: "bool"; isReadonly: true; read: "isOnPath" }
        Signal { name: "currentItemChanged" }
        Signal { name: "pathChanged" }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickPauseAnimation"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/PauseAnimation 2.0",
            "QtQuick/PauseAnimation 2.12",
            "QtQuick/PauseAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Signal {
            name: "durationChanged"
            Parameter { type: "int" }
        }
    }
    Component {
        file: "private/qquickrectangle_p.h"
        name: "QQuickPen"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property { name: "pixelAligned"; type: "bool"; read: "pixelAligned"; write: "setPixelAligned" }
        Signal { name: "penChanged" }
    }
    Component {
        file: "private/qquickpincharea_p.h"
        name: "QQuickPinch"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/Pinch 2.0", "QtQuick/Pinch 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "Axis"
            values: ["NoDrag", "XAxis", "YAxis", "XAndYAxis", "XandYAxis"]
        }
        Property { name: "target"; type: "QQuickItem"; isPointer: true; read: "target"; write: "setTarget" }
        Property { name: "minimumScale"; type: "double"; read: "minimumScale"; write: "setMinimumScale" }
        Property { name: "maximumScale"; type: "double"; read: "maximumScale"; write: "setMaximumScale" }
        Property {
            name: "minimumRotation"
            type: "double"
            read: "minimumRotation"
            write: "setMinimumRotation"
        }
        Property {
            name: "maximumRotation"
            type: "double"
            read: "maximumRotation"
            write: "setMaximumRotation"
        }
        Property { name: "dragAxis"; type: "Axis"; read: "axis"; write: "setAxis" }
        Property { name: "minimumX"; type: "double"; read: "xmin"; write: "setXmin" }
        Property { name: "maximumX"; type: "double"; read: "xmax"; write: "setXmax" }
        Property { name: "minimumY"; type: "double"; read: "ymin"; write: "setYmin" }
        Property { name: "maximumY"; type: "double"; read: "ymax"; write: "setYmax" }
        Property { name: "active"; type: "bool"; isReadonly: true; read: "active" }
    }
    Component {
        file: "private/qquickpincharea_p.h"
        name: "QQuickPinchArea"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/PinchArea 2.0",
            "QtQuick/PinchArea 2.1",
            "QtQuick/PinchArea 2.4",
            "QtQuick/PinchArea 2.5",
            "QtQuick/PinchArea 2.7",
            "QtQuick/PinchArea 2.11",
            "QtQuick/PinchArea 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property { name: "pinch"; type: "QQuickPinch"; isReadonly: true; isPointer: true; read: "pinch" }
        Signal {
            name: "pinchStarted"
            Parameter { name: "pinch"; type: "QQuickPinchEvent"; isPointer: true }
        }
        Signal {
            name: "pinchUpdated"
            Parameter { name: "pinch"; type: "QQuickPinchEvent"; isPointer: true }
        }
        Signal {
            name: "pinchFinished"
            Parameter { name: "pinch"; type: "QQuickPinchEvent"; isPointer: true }
        }
        Signal {
            name: "smartZoom"
            revision: 517
            Parameter { name: "pinch"; type: "QQuickPinchEvent"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickpincharea_p.h"
        name: "QQuickPinchEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "center"; type: "QPointF"; isReadonly: true; read: "center" }
        Property { name: "startCenter"; type: "QPointF"; isReadonly: true; read: "startCenter" }
        Property { name: "previousCenter"; type: "QPointF"; isReadonly: true; read: "previousCenter" }
        Property { name: "scale"; type: "double"; isReadonly: true; read: "scale" }
        Property { name: "previousScale"; type: "double"; isReadonly: true; read: "previousScale" }
        Property { name: "angle"; type: "double"; isReadonly: true; read: "angle" }
        Property { name: "previousAngle"; type: "double"; isReadonly: true; read: "previousAngle" }
        Property { name: "rotation"; type: "double"; isReadonly: true; read: "rotation" }
        Property { name: "point1"; type: "QPointF"; isReadonly: true; read: "point1" }
        Property { name: "startPoint1"; type: "QPointF"; isReadonly: true; read: "startPoint1" }
        Property { name: "point2"; type: "QPointF"; isReadonly: true; read: "point2" }
        Property { name: "startPoint2"; type: "QPointF"; isReadonly: true; read: "startPoint2" }
        Property { name: "pointCount"; type: "int"; isReadonly: true; read: "pointCount" }
        Property { name: "accepted"; type: "bool"; read: "accepted"; write: "setAccepted" }
    }
    Component {
        file: "private/qquickpinchhandler_p.h"
        name: "QQuickPinchHandler"
        accessSemantics: "reference"
        prototype: "QQuickMultiPointHandler"
        exports: [
            "QtQuick/PinchHandler 2.12",
            "QtQuick/PinchHandler 2.15",
            "QtQuick/PinchHandler 6.0"
        ]
        exportMetaObjectRevisions: [524, 527, 1536]
        Property { name: "minimumScale"; type: "double"; read: "minimumScale"; write: "setMinimumScale" }
        Property { name: "maximumScale"; type: "double"; read: "maximumScale"; write: "setMaximumScale" }
        Property {
            name: "minimumRotation"
            type: "double"
            read: "minimumRotation"
            write: "setMinimumRotation"
        }
        Property {
            name: "maximumRotation"
            type: "double"
            read: "maximumRotation"
            write: "setMaximumRotation"
        }
        Property { name: "scale"; type: "double"; isReadonly: true; read: "scale" }
        Property { name: "activeScale"; type: "double"; isReadonly: true; read: "activeScale" }
        Property { name: "rotation"; type: "double"; isReadonly: true; read: "rotation" }
        Property { name: "translation"; type: "QVector2D"; isReadonly: true; read: "translation" }
        Property { name: "xAxis"; type: "QQuickDragAxis"; isReadonly: true; isPointer: true; read: "xAxis" }
        Property { name: "yAxis"; type: "QQuickDragAxis"; isReadonly: true; isPointer: true; read: "yAxis" }
        Signal { name: "updated" }
    }
    Component {
        file: "private/qquickpointhandler_p.h"
        name: "QQuickPointHandler"
        accessSemantics: "reference"
        prototype: "QQuickSinglePointHandler"
        exports: [
            "QtQuick/PointHandler 2.12",
            "QtQuick/PointHandler 2.15",
            "QtQuick/PointHandler 6.0"
        ]
        exportMetaObjectRevisions: [524, 527, 1536]
        Property { name: "translation"; type: "QVector2D"; isReadonly: true; read: "translation" }
    }
    Component {
        file: "private/qquickpointerdevicehandler_p.h"
        name: "QQuickPointerDeviceHandler"
        accessSemantics: "reference"
        prototype: "QQuickPointerHandler"
        Property {
            name: "acceptedDevices"
            type: "QPointingDevice::DeviceTypes"
            read: "acceptedDevices"
            write: "setAcceptedDevices"
        }
        Property {
            name: "acceptedPointerTypes"
            type: "QPointingDevice::PointerTypes"
            read: "acceptedPointerTypes"
            write: "setAcceptedPointerTypes"
        }
        Property {
            name: "acceptedButtons"
            type: "Qt::MouseButtons"
            read: "acceptedButtons"
            write: "setAcceptedButtons"
        }
        Property {
            name: "acceptedModifiers"
            type: "Qt::KeyboardModifiers"
            read: "acceptedModifiers"
            write: "setAcceptedModifiers"
        }
        Method {
            name: "setAcceptedDevices"
            Parameter { name: "acceptedDevices"; type: "QPointingDevice::DeviceTypes" }
        }
        Method {
            name: "setAcceptedPointerTypes"
            Parameter { name: "acceptedPointerTypes"; type: "QPointingDevice::PointerTypes" }
        }
        Method {
            name: "setAcceptedButtons"
            Parameter { name: "buttons"; type: "Qt::MouseButtons" }
        }
        Method {
            name: "setAcceptedModifiers"
            Parameter { name: "acceptedModifiers"; type: "Qt::KeyboardModifiers" }
        }
    }
    Component {
        file: "private/qquickpointerhandler_p.h"
        name: "QQuickPointerHandler"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick/PointerHandler 2.12",
            "QtQuick/PointerHandler 2.15",
            "QtQuick/PointerHandler 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [524, 527, 1536]
        Enum {
            name: "GrabPermissions"
            alias: "GrabPermission"
            isFlag: true
            values: [
                "TakeOverForbidden",
                "CanTakeOverFromHandlersOfSameType",
                "CanTakeOverFromHandlersOfDifferentType",
                "CanTakeOverFromItems",
                "CanTakeOverFromAnything",
                "ApprovesTakeOverByHandlersOfSameType",
                "ApprovesTakeOverByHandlersOfDifferentType",
                "ApprovesTakeOverByItems",
                "ApprovesCancellation",
                "ApprovesTakeOverByAnything"
            ]
        }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Property { name: "active"; type: "bool"; isReadonly: true; read: "active" }
        Property { name: "target"; type: "QQuickItem"; isPointer: true; read: "target"; write: "setTarget" }
        Property {
            name: "parent"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "parentItem"
        }
        Property {
            name: "grabPermissions"
            type: "GrabPermissions"
            read: "grabPermissions"
            write: "setGrabPermissions"
        }
        Property { name: "margin"; type: "double"; read: "margin"; write: "setMargin" }
        Property {
            name: "dragThreshold"
            revision: 527
            type: "int"
            read: "dragThreshold"
            write: "setDragThreshold"
        }
        Property {
            name: "cursorShape"
            revision: 527
            type: "Qt::CursorShape"
            read: "cursorShape"
            write: "setCursorShape"
        }
        Signal { name: "dragThresholdChanged"; revision: 527 }
        Signal {
            name: "grabChanged"
            Parameter { name: "transition"; type: "QPointingDevice::GrabTransition" }
            Parameter { name: "point"; type: "QEventPoint" }
        }
        Signal { name: "grabPermissionChanged" }
        Signal {
            name: "canceled"
            Parameter { name: "point"; type: "QEventPoint" }
        }
        Signal { name: "cursorShapeChanged"; revision: 527 }
    }
    Component {
        file: "private/qquickpositioners_p.h"
        name: "QQuickPositionerAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "index"; type: "int"; isReadonly: true; read: "index" }
        Property { name: "isFirstItem"; type: "bool"; isReadonly: true; read: "isFirstItem" }
        Property { name: "isLastItem"; type: "bool"; isReadonly: true; read: "isLastItem" }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickPropertyAction"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/PropertyAction 2.0",
            "QtQuick/PropertyAction 2.12",
            "QtQuick/PropertyAction 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property {
            name: "target"
            type: "QObject"
            isPointer: true
            read: "target"
            write: "setTargetObject"
        }
        Property { name: "property"; type: "QString"; read: "property"; write: "setProperty" }
        Property { name: "properties"; type: "QString"; read: "properties"; write: "setProperties" }
        Property { name: "targets"; type: "QObject"; isList: true; isReadonly: true; read: "targets" }
        Property { name: "exclude"; type: "QObject"; isList: true; isReadonly: true; read: "exclude" }
        Property { name: "value"; type: "QVariant"; read: "value"; write: "setValue" }
        Signal {
            name: "valueChanged"
            Parameter { type: "QVariant" }
        }
        Signal {
            name: "propertiesChanged"
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickPropertyAnimation"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/PropertyAnimation 2.0",
            "QtQuick/PropertyAnimation 2.12",
            "QtQuick/PropertyAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Property { name: "from"; type: "QVariant"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "QVariant"; read: "to"; write: "setTo" }
        Property { name: "easing"; type: "QEasingCurve"; read: "easing"; write: "setEasing" }
        Property {
            name: "target"
            type: "QObject"
            isPointer: true
            read: "target"
            write: "setTargetObject"
        }
        Property { name: "property"; type: "QString"; read: "property"; write: "setProperty" }
        Property { name: "properties"; type: "QString"; read: "properties"; write: "setProperties" }
        Property { name: "targets"; type: "QObject"; isList: true; isReadonly: true; read: "targets" }
        Property { name: "exclude"; type: "QObject"; isList: true; isReadonly: true; read: "exclude" }
        Signal {
            name: "durationChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "easingChanged"
            Parameter { type: "QEasingCurve" }
        }
        Signal {
            name: "propertiesChanged"
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "private/qquickpropertychanges_p.h"
        name: "QQuickPropertyChanges"
        accessSemantics: "reference"
        prototype: "QQuickStateOperation"
        exports: [
            "QtQuick/PropertyChanges 2.0",
            "QtQuick/PropertyChanges 6.0"
        ]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "target"; type: "QObject"; isPointer: true; read: "object"; write: "setObject" }
        Property {
            name: "restoreEntryValues"
            type: "bool"
            read: "restoreEntryValues"
            write: "setRestoreEntryValues"
        }
        Property { name: "explicit"; type: "bool"; read: "isExplicit"; write: "setIsExplicit" }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuaternion"
        accessSemantics: "value"
        extension: "QQuickQuaternionValueType"
        exports: ["QtQuick/quaternion 2.0", "QtQuick/quaternion 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickQuaternionValueType"
        accessSemantics: "value"
        Property { name: "scalar"; type: "double"; read: "scalar"; write: "setScalar" }
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "z"; type: "double"; read: "z"; write: "setZ" }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "private/qquickrectangle_p.h"
        name: "QQuickRectangle"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/Rectangle 2.0",
            "QtQuick/Rectangle 2.1",
            "QtQuick/Rectangle 2.4",
            "QtQuick/Rectangle 2.7",
            "QtQuick/Rectangle 2.11",
            "QtQuick/Rectangle 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property { name: "gradient"; type: "QJSValue"; read: "gradient"; write: "setGradient" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true; read: "border" }
        Property { name: "radius"; type: "double"; read: "radius"; write: "setRadius" }
        Method { name: "doUpdate" }
    }
    Component {
        file: "private/qquickrepeater_p.h"
        name: "QQuickRepeater"
        accessSemantics: "reference"
        defaultProperty: "delegate"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/Repeater 2.0",
            "QtQuick/Repeater 2.1",
            "QtQuick/Repeater 2.4",
            "QtQuick/Repeater 2.7",
            "QtQuick/Repeater 2.11",
            "QtQuick/Repeater 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Signal {
            name: "itemAdded"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "createdItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "initItem"
            Parameter { type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "modelUpdated"
            Parameter { name: "changeSet"; type: "QQmlChangeSet" }
            Parameter { name: "reset"; type: "bool" }
        }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquickwindow_p.h"
        name: "QQuickRootItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Method {
            name: "setWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "h"; type: "int" }
        }
    }
    Component {
        file: "private/qquicktranslate_p.h"
        name: "QQuickRotation"
        accessSemantics: "reference"
        prototype: "QQuickTransform"
        exports: ["QtQuick/Rotation 2.0", "QtQuick/Rotation 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "origin"; type: "QVector3D"; read: "origin"; write: "setOrigin" }
        Property { name: "angle"; type: "double"; read: "angle"; write: "setAngle" }
        Property { name: "axis"; type: "QVector3D"; read: "axis"; write: "setAxis" }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickRotationAnimation"
        accessSemantics: "reference"
        prototype: "QQuickPropertyAnimation"
        exports: [
            "QtQuick/RotationAnimation 2.0",
            "QtQuick/RotationAnimation 2.12",
            "QtQuick/RotationAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Enum {
            name: "RotationDirection"
            values: ["Numerical", "Shortest", "Clockwise", "Counterclockwise"]
        }
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
        Property {
            name: "direction"
            type: "RotationDirection"
            read: "direction"
            write: "setDirection"
        }
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickRotationAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAnimator"
        exports: [
            "QtQuick/RotationAnimator 2.2",
            "QtQuick/RotationAnimator 2.12",
            "QtQuick/RotationAnimator 6.0"
        ]
        exportMetaObjectRevisions: [514, 524, 1536]
        Enum {
            name: "RotationDirection"
            values: ["Numerical", "Shortest", "Clockwise", "Counterclockwise"]
        }
        Property {
            name: "direction"
            type: "RotationDirection"
            read: "direction"
            write: "setDirection"
        }
        Signal {
            name: "directionChanged"
            Parameter { name: "dir"; type: "RotationDirection" }
        }
    }
    Component {
        file: "private/qquickpositioners_p.h"
        name: "QQuickRow"
        accessSemantics: "reference"
        prototype: "QQuickBasePositioner"
        exports: [
            "QtQuick/Row 2.0",
            "QtQuick/Row 2.1",
            "QtQuick/Row 2.4",
            "QtQuick/Row 2.6",
            "QtQuick/Row 2.7",
            "QtQuick/Row 2.9",
            "QtQuick/Row 2.11",
            "QtQuick/Row 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 518, 519, 521, 523, 1536]
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
        }
        Property {
            name: "effectiveLayoutDirection"
            type: "Qt::LayoutDirection"
            isReadonly: true
            read: "effectiveLayoutDirection"
        }
    }
    Component {
        file: "private/qquicktranslate_p.h"
        name: "QQuickScale"
        accessSemantics: "reference"
        prototype: "QQuickTransform"
        exports: ["QtQuick/Scale 2.0", "QtQuick/Scale 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "origin"; type: "QVector3D"; read: "origin"; write: "setOrigin" }
        Property { name: "xScale"; type: "double"; read: "xScale"; write: "setXScale" }
        Property { name: "yScale"; type: "double"; read: "yScale"; write: "setYScale" }
        Property { name: "zScale"; type: "double"; read: "zScale"; write: "setZScale" }
        Signal { name: "scaleChanged" }
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickScaleAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAnimator"
        exports: [
            "QtQuick/ScaleAnimator 2.2",
            "QtQuick/ScaleAnimator 2.12",
            "QtQuick/ScaleAnimator 6.0"
        ]
        exportMetaObjectRevisions: [514, 524, 1536]
    }
    Component {
        file: "private/qquickscalegrid_p_p.h"
        name: "QQuickScaleGrid"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "left"; type: "int"; read: "left"; write: "setLeft" }
        Property { name: "top"; type: "int"; read: "top"; write: "setTop" }
        Property { name: "right"; type: "int"; read: "right"; write: "setRight" }
        Property { name: "bottom"; type: "int"; read: "bottom"; write: "setBottom" }
        Signal { name: "borderChanged" }
        Signal { name: "leftBorderChanged" }
        Signal { name: "topBorderChanged" }
        Signal { name: "rightBorderChanged" }
        Signal { name: "bottomBorderChanged" }
    }
    Component {
        file: "private/qquickscreen_p.h"
        name: "QQuickScreen"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick/Screen 2.0",
            "QtQuick/Screen 2.3",
            "QtQuick/Screen 2.10",
            "QtQuick/Screen 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 515, 522, 1536]
        attachedType: "QQuickScreenAttached"
    }
    Component {
        file: "private/qquickscreen_p.h"
        name: "QQuickScreenAttached"
        accessSemantics: "reference"
        prototype: "QQuickScreenInfo"
        Method {
            name: "screenChanged"
            Parameter { type: "QScreen"; isPointer: true }
        }
        Method {
            name: "angleBetween"
            type: "int"
            Parameter { name: "a"; type: "int" }
            Parameter { name: "b"; type: "int" }
        }
    }
    Component {
        file: "private/qquickscreen_p.h"
        name: "QQuickScreenInfo"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick/ScreenInfo 2.3",
            "QtQuick/ScreenInfo 2.10",
            "QtQuick/ScreenInfo 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [515, 522, 1536]
        Property { name: "name"; type: "QString"; isReadonly: true; read: "name" }
        Property {
            name: "manufacturer"
            revision: 522
            type: "QString"
            isReadonly: true
            read: "manufacturer"
        }
        Property { name: "model"; revision: 522; type: "QString"; isReadonly: true; read: "model" }
        Property {
            name: "serialNumber"
            revision: 522
            type: "QString"
            isReadonly: true
            read: "serialNumber"
        }
        Property { name: "width"; type: "int"; isReadonly: true; read: "width" }
        Property { name: "height"; type: "int"; isReadonly: true; read: "height" }
        Property {
            name: "desktopAvailableWidth"
            type: "int"
            isReadonly: true
            read: "desktopAvailableWidth"
        }
        Property {
            name: "desktopAvailableHeight"
            type: "int"
            isReadonly: true
            read: "desktopAvailableHeight"
        }
        Property {
            name: "logicalPixelDensity"
            type: "double"
            isReadonly: true
            read: "logicalPixelDensity"
        }
        Property { name: "pixelDensity"; type: "double"; isReadonly: true; read: "pixelDensity" }
        Property { name: "devicePixelRatio"; type: "double"; isReadonly: true; read: "devicePixelRatio" }
        Property {
            name: "primaryOrientation"
            type: "Qt::ScreenOrientation"
            isReadonly: true
            read: "primaryOrientation"
        }
        Property {
            name: "orientation"
            type: "Qt::ScreenOrientation"
            isReadonly: true
            read: "orientation"
        }
        Property { name: "virtualX"; revision: 515; type: "int"; isReadonly: true; read: "virtualX" }
        Property { name: "virtualY"; revision: 515; type: "int"; isReadonly: true; read: "virtualY" }
        Signal { name: "manufacturerChanged"; revision: 522 }
        Signal { name: "modelChanged"; revision: 522 }
        Signal { name: "serialNumberChanged"; revision: 522 }
        Signal { name: "desktopGeometryChanged" }
        Signal { name: "virtualXChanged"; revision: 515 }
        Signal { name: "virtualYChanged"; revision: 515 }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickScriptAction"
        accessSemantics: "reference"
        prototype: "QQuickAbstractAnimation"
        exports: [
            "QtQuick/ScriptAction 2.0",
            "QtQuick/ScriptAction 2.12",
            "QtQuick/ScriptAction 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "script"; type: "QQmlScriptString"; read: "script"; write: "setScript" }
        Property {
            name: "scriptName"
            type: "QString"
            read: "stateChangeScriptName"
            write: "setStateChangeScriptName"
        }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickSequentialAnimation"
        accessSemantics: "reference"
        defaultProperty: "animations"
        prototype: "QQuickAnimationGroup"
        exports: [
            "QtQuick/SequentialAnimation 2.0",
            "QtQuick/SequentialAnimation 2.12",
            "QtQuick/SequentialAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
    }
    Component {
        file: "private/qquickshadereffect_p.h"
        name: "QQuickShaderEffect"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/ShaderEffect 2.0",
            "QtQuick/ShaderEffect 2.1",
            "QtQuick/ShaderEffect 2.4",
            "QtQuick/ShaderEffect 2.7",
            "QtQuick/ShaderEffect 2.11",
            "QtQuick/ShaderEffect 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Enum {
            name: "CullMode"
            values: ["NoCulling", "BackFaceCulling", "FrontFaceCulling"]
        }
        Enum {
            name: "Status"
            values: ["Compiled", "Uncompiled", "Error"]
        }
        Property {
            name: "fragmentShader"
            type: "QUrl"
            read: "fragmentShader"
            write: "setFragmentShader"
        }
        Property { name: "vertexShader"; type: "QUrl"; read: "vertexShader"; write: "setVertexShader" }
        Property { name: "blending"; type: "bool"; read: "blending"; write: "setBlending" }
        Property { name: "mesh"; type: "QVariant"; read: "mesh"; write: "setMesh" }
        Property { name: "cullMode"; type: "CullMode"; read: "cullMode"; write: "setCullMode" }
        Property { name: "log"; type: "QString"; isReadonly: true; read: "log" }
        Property { name: "status"; type: "Status"; isReadonly: true; read: "status" }
        Property {
            name: "supportsAtlasTextures"
            revision: 516
            type: "bool"
            read: "supportsAtlasTextures"
            write: "setSupportsAtlasTextures"
        }
    }
    Component {
        file: "private/qquickshadereffectmesh_p.h"
        name: "QQuickShaderEffectMesh"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick/ShaderEffectMesh 2.0",
            "QtQuick/ShaderEffectMesh 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Signal { name: "geometryChanged" }
    }
    Component {
        file: "private/qquickshadereffectsource_p.h"
        name: "QQuickShaderEffectSource"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/ShaderEffectSource 2.0",
            "QtQuick/ShaderEffectSource 2.1",
            "QtQuick/ShaderEffectSource 2.4",
            "QtQuick/ShaderEffectSource 2.6",
            "QtQuick/ShaderEffectSource 2.7",
            "QtQuick/ShaderEffectSource 2.9",
            "QtQuick/ShaderEffectSource 2.11",
            "QtQuick/ShaderEffectSource 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 518, 519, 521, 523, 1536]
        Enum {
            name: "WrapMode"
            values: [
                "ClampToEdge",
                "RepeatHorizontally",
                "RepeatVertically",
                "Repeat"
            ]
        }
        Enum {
            name: "Format"
            values: ["Alpha", "RGB", "RGBA"]
        }
        Enum {
            name: "TextureMirroring"
            values: ["NoMirroring", "MirrorHorizontally", "MirrorVertically"]
        }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property {
            name: "sourceItem"
            type: "QQuickItem"
            isPointer: true
            read: "sourceItem"
            write: "setSourceItem"
        }
        Property { name: "sourceRect"; type: "QRectF"; read: "sourceRect"; write: "setSourceRect" }
        Property { name: "textureSize"; type: "QSize"; read: "textureSize"; write: "setTextureSize" }
        Property { name: "format"; type: "Format"; read: "format"; write: "setFormat" }
        Property { name: "live"; type: "bool"; read: "live"; write: "setLive" }
        Property { name: "hideSource"; type: "bool"; read: "hideSource"; write: "setHideSource" }
        Property { name: "mipmap"; type: "bool"; read: "mipmap"; write: "setMipmap" }
        Property { name: "recursive"; type: "bool"; read: "recursive"; write: "setRecursive" }
        Property {
            name: "textureMirroring"
            revision: 518
            type: "TextureMirroring"
            read: "textureMirroring"
            write: "setTextureMirroring"
        }
        Property { name: "samples"; revision: 521; type: "int"; read: "samples"; write: "setSamples" }
        Signal { name: "scheduledUpdateCompleted" }
        Method {
            name: "sourceItemDestroyed"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method { name: "invalidateSceneGraph" }
        Method {
            name: "sourceItemParentChanged"
            Parameter { name: "parent"; type: "QQuickItem"; isPointer: true }
        }
        Method { name: "scheduleUpdate" }
    }
    Component {
        file: "private/qquickshortcut_p.h"
        name: "QQuickShortcut"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick/Shortcut 2.5",
            "QtQuick/Shortcut 2.6",
            "QtQuick/Shortcut 2.9",
            "QtQuick/Shortcut 6.0"
        ]
        exportMetaObjectRevisions: [517, 518, 521, 1536]
        Property { name: "sequence"; type: "QVariant"; read: "sequence"; write: "setSequence" }
        Property {
            name: "sequences"
            revision: 521
            type: "QVariantList"
            read: "sequences"
            write: "setSequences"
        }
        Property {
            name: "nativeText"
            revision: 518
            type: "QString"
            isReadonly: true
            read: "nativeText"
        }
        Property {
            name: "portableText"
            revision: 518
            type: "QString"
            isReadonly: true
            read: "portableText"
        }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property { name: "autoRepeat"; type: "bool"; read: "autoRepeat"; write: "setAutoRepeat" }
        Property { name: "context"; type: "Qt::ShortcutContext"; read: "context"; write: "setContext" }
        Signal { name: "sequencesChanged"; revision: 521 }
        Signal { name: "activated" }
        Signal { name: "activatedAmbiguously" }
    }
    Component {
        file: "private/qquicksinglepointhandler_p.h"
        name: "QQuickSinglePointHandler"
        accessSemantics: "reference"
        prototype: "QQuickPointerDeviceHandler"
        Property { name: "point"; type: "QQuickHandlerPoint"; isReadonly: true; read: "point" }
    }
    Component {
        file: "private/qquicksmoothedanimation_p.h"
        name: "QQuickSmoothedAnimation"
        accessSemantics: "reference"
        prototype: "QQuickNumberAnimation"
        exports: [
            "QtQuick/SmoothedAnimation 2.0",
            "QtQuick/SmoothedAnimation 2.12",
            "QtQuick/SmoothedAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Enum {
            name: "ReversingMode"
            values: ["Eased", "Immediate", "Sync"]
        }
        Property { name: "velocity"; type: "double"; read: "velocity"; write: "setVelocity" }
        Property {
            name: "reversingMode"
            type: "ReversingMode"
            read: "reversingMode"
            write: "setReversingMode"
        }
        Property {
            name: "maximumEasingTime"
            type: "double"
            read: "maximumEasingTime"
            write: "setMaximumEasingTime"
        }
    }
    Component {
        file: "private/qquickspringanimation_p.h"
        name: "QQuickSpringAnimation"
        accessSemantics: "reference"
        prototype: "QQuickNumberAnimation"
        interfaces: ["QQmlPropertyValueSource"]
        exports: [
            "QtQuick/SpringAnimation 2.0",
            "QtQuick/SpringAnimation 2.12",
            "QtQuick/SpringAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "velocity"; type: "double"; read: "velocity"; write: "setVelocity" }
        Property { name: "spring"; type: "double"; read: "spring"; write: "setSpring" }
        Property { name: "damping"; type: "double"; read: "damping"; write: "setDamping" }
        Property { name: "epsilon"; type: "double"; read: "epsilon"; write: "setEpsilon" }
        Property { name: "modulus"; type: "double"; read: "modulus"; write: "setModulus" }
        Property { name: "mass"; type: "double"; read: "mass"; write: "setMass" }
        Signal { name: "syncChanged" }
    }
    Component {
        file: "private/qquicksprite_p.h"
        name: "QQuickSprite"
        accessSemantics: "reference"
        prototype: "QQuickStochasticState"
        exports: ["QtQuick/Sprite 2.0", "QtQuick/Sprite 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource" }
        Property { name: "reverse"; type: "bool"; read: "reverse"; write: "setReverse" }
        Property { name: "frameSync"; type: "bool"; read: "frameSync"; write: "setFrameSync" }
        Property { name: "frames"; type: "int"; read: "frames"; write: "setFrames" }
        Property { name: "frameCount"; type: "int"; read: "frameCount"; write: "setFrameCount" }
        Property { name: "frameHeight"; type: "int"; read: "frameHeight"; write: "setFrameHeight" }
        Property { name: "frameWidth"; type: "int"; read: "frameWidth"; write: "setFrameWidth" }
        Property { name: "frameX"; type: "int"; read: "frameX"; write: "setFrameX" }
        Property { name: "frameY"; type: "int"; read: "frameY"; write: "setFrameY" }
        Property { name: "frameRate"; type: "double"; read: "frameRate"; write: "setFrameRate" }
        Property {
            name: "frameRateVariation"
            type: "double"
            read: "frameRateVariation"
            write: "setFrameRateVariation"
        }
        Property { name: "frameDuration"; type: "int"; read: "frameDuration"; write: "setFrameDuration" }
        Property {
            name: "frameDurationVariation"
            type: "int"
            read: "frameDurationVariation"
            write: "setFrameDurationVariation"
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Signal {
            name: "frameHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "reverseChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "frameCountChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameXChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameYChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameRateChanged"
            Parameter { name: "arg"; type: "double" }
        }
        Signal {
            name: "frameRateVariationChanged"
            Parameter { name: "arg"; type: "double" }
        }
        Signal {
            name: "frameDurationChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameDurationVariationChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "frameSyncChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setSource"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Method {
            name: "setFrameHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setReverse"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setFrames"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameCount"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameRate"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setFrameRateVariation"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setFrameDuration"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameDurationVariation"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setFrameSync"
            Parameter { name: "arg"; type: "bool" }
        }
        Method { name: "startImageLoading" }
    }
    Component {
        file: "private/qquickspritesequence_p.h"
        name: "QQuickSpriteSequence"
        accessSemantics: "reference"
        defaultProperty: "sprites"
        prototype: "QQuickItem"
        exports: [
            "QtQuick/SpriteSequence 2.0",
            "QtQuick/SpriteSequence 2.1",
            "QtQuick/SpriteSequence 2.4",
            "QtQuick/SpriteSequence 2.7",
            "QtQuick/SpriteSequence 2.11",
            "QtQuick/SpriteSequence 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523, 1536]
        Property { name: "running"; type: "bool"; read: "running"; write: "setRunning" }
        Property { name: "interpolate"; type: "bool"; read: "interpolate"; write: "setInterpolate" }
        Property { name: "goalSprite"; type: "QString"; read: "goalSprite"; write: "setGoalSprite" }
        Property { name: "currentSprite"; type: "QString"; isReadonly: true; read: "currentSprite" }
        Property { name: "sprites"; type: "QQuickSprite"; isList: true; isReadonly: true; read: "sprites" }
        Signal {
            name: "runningChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "interpolateChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "goalSpriteChanged"
            Parameter { name: "arg"; type: "QString" }
        }
        Signal {
            name: "currentSpriteChanged"
            Parameter { name: "arg"; type: "QString" }
        }
        Method {
            name: "jumpTo"
            Parameter { name: "sprite"; type: "QString" }
        }
        Method {
            name: "setGoalSprite"
            Parameter { name: "sprite"; type: "QString" }
        }
        Method {
            name: "setRunning"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setInterpolate"
            Parameter { name: "arg"; type: "bool" }
        }
        Method { name: "createEngine" }
    }
    Component {
        file: "private/qquickstate_p.h"
        name: "QQuickState"
        accessSemantics: "reference"
        defaultProperty: "changes"
        prototype: "QObject"
        exports: ["QtQuick/State 2.0", "QtQuick/State 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "name"; type: "QString"; read: "name"; write: "setName" }
        Property { name: "when"; type: "bool"; read: "when"; write: "setWhen" }
        Property { name: "extend"; type: "QString"; read: "extends"; write: "setExtends" }
        Property {
            name: "changes"
            type: "QQuickStateOperation"
            isList: true
            isReadonly: true
            read: "changes"
        }
        Signal { name: "completed" }
    }
    Component {
        file: "private/qquickstatechangescript_p.h"
        name: "QQuickStateChangeScript"
        accessSemantics: "reference"
        prototype: "QQuickStateOperation"
        exports: [
            "QtQuick/StateChangeScript 2.0",
            "QtQuick/StateChangeScript 6.0"
        ]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "script"; type: "QQmlScriptString"; read: "script"; write: "setScript" }
        Property { name: "name"; type: "QString"; read: "name"; write: "setName" }
    }
    Component {
        file: "private/qquickstategroup_p.h"
        name: "QQuickStateGroup"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtQuick/StateGroup 2.0", "QtQuick/StateGroup 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "state"; type: "QString"; read: "state"; write: "setState" }
        Property {
            name: "states"
            type: "QQuickState"
            isList: true
            isReadonly: true
            read: "statesProperty"
        }
        Property {
            name: "transitions"
            type: "QQuickTransition"
            isList: true
            isReadonly: true
            read: "transitionsProperty"
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "private/qquickstate_p.h"
        name: "QQuickStateOperation"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "private/qquickspriteengine_p.h"
        name: "QQuickStochasticState"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Property {
            name: "durationVariation"
            type: "int"
            read: "durationVariation"
            write: "setDurationVariation"
        }
        Property { name: "randomStart"; type: "bool"; read: "randomStart"; write: "setRandomStart" }
        Property { name: "to"; type: "QVariantMap"; read: "to"; write: "setTo" }
        Property { name: "name"; type: "QString"; read: "name"; write: "setName" }
        Signal {
            name: "durationChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "arg"; type: "QString" }
        }
        Signal {
            name: "toChanged"
            Parameter { name: "arg"; type: "QVariantMap" }
        }
        Signal {
            name: "durationVariationChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal { name: "entered" }
        Signal {
            name: "randomStartChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setDuration"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setName"
            Parameter { name: "arg"; type: "QString" }
        }
        Method {
            name: "setTo"
            Parameter { name: "arg"; type: "QVariantMap" }
        }
        Method {
            name: "setDurationVariation"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setRandomStart"
            Parameter { name: "arg"; type: "bool" }
        }
    }
    Component {
        file: "private/qquicksystempalette_p.h"
        name: "QQuickSystemPalette"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/SystemPalette 2.0", "QtQuick/SystemPalette 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "ColorGroup"
            values: ["Active", "Inactive", "Disabled"]
        }
        Property {
            name: "colorGroup"
            type: "QQuickSystemPalette::ColorGroup"
            read: "colorGroup"
            write: "setColorGroup"
        }
        Property { name: "window"; type: "QColor"; isReadonly: true; read: "window" }
        Property { name: "windowText"; type: "QColor"; isReadonly: true; read: "windowText" }
        Property { name: "base"; type: "QColor"; isReadonly: true; read: "base" }
        Property { name: "text"; type: "QColor"; isReadonly: true; read: "text" }
        Property { name: "alternateBase"; type: "QColor"; isReadonly: true; read: "alternateBase" }
        Property { name: "button"; type: "QColor"; isReadonly: true; read: "button" }
        Property { name: "buttonText"; type: "QColor"; isReadonly: true; read: "buttonText" }
        Property { name: "light"; type: "QColor"; isReadonly: true; read: "light" }
        Property { name: "midlight"; type: "QColor"; isReadonly: true; read: "midlight" }
        Property { name: "dark"; type: "QColor"; isReadonly: true; read: "dark" }
        Property { name: "mid"; type: "QColor"; isReadonly: true; read: "mid" }
        Property { name: "shadow"; type: "QColor"; isReadonly: true; read: "shadow" }
        Property { name: "highlight"; type: "QColor"; isReadonly: true; read: "highlight" }
        Property { name: "highlightedText"; type: "QColor"; isReadonly: true; read: "highlightedText" }
        Signal { name: "paletteChanged" }
    }
    Component {
        file: "private/qquicktableview_p.h"
        name: "QQuickTableView"
        accessSemantics: "reference"
        defaultProperty: "flickableData"
        prototype: "QQuickFlickable"
        exports: [
            "QtQuick/TableView 2.12",
            "QtQuick/TableView 2.14",
            "QtQuick/TableView 6.0"
        ]
        exportMetaObjectRevisions: [524, 526, 1536]
        attachedType: "QQuickTableViewAttached"
        Property { name: "rows"; type: "int"; isReadonly: true; read: "rows" }
        Property { name: "columns"; type: "int"; isReadonly: true; read: "columns" }
        Property { name: "rowSpacing"; type: "double"; read: "rowSpacing"; write: "setRowSpacing" }
        Property {
            name: "columnSpacing"
            type: "double"
            read: "columnSpacing"
            write: "setColumnSpacing"
        }
        Property {
            name: "rowHeightProvider"
            type: "QJSValue"
            read: "rowHeightProvider"
            write: "setRowHeightProvider"
        }
        Property {
            name: "columnWidthProvider"
            type: "QJSValue"
            read: "columnWidthProvider"
            write: "setColumnWidthProvider"
        }
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property { name: "reuseItems"; type: "bool"; read: "reuseItems"; write: "setReuseItems" }
        Property { name: "contentWidth"; type: "double"; read: "contentWidth"; write: "setContentWidth" }
        Property {
            name: "contentHeight"
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property {
            name: "syncView"
            revision: 526
            type: "QQuickTableView"
            isPointer: true
            read: "syncView"
            write: "setSyncView"
        }
        Property {
            name: "syncDirection"
            revision: 526
            type: "Qt::Orientations"
            read: "syncDirection"
            write: "setSyncDirection"
        }
        Property { name: "leftColumn"; revision: 1536; type: "int"; isReadonly: true; read: "leftColumn" }
        Property { name: "rightColumn"; revision: 1536; type: "int"; isReadonly: true; read: "rightColumn" }
        Property { name: "topRow"; revision: 1536; type: "int"; isReadonly: true; read: "topRow" }
        Property { name: "bottomRow"; revision: 1536; type: "int"; isReadonly: true; read: "bottomRow" }
        Signal { name: "syncViewChanged"; revision: 526 }
        Signal { name: "syncDirectionChanged"; revision: 526 }
        Signal { name: "leftColumnChanged"; revision: 1536 }
        Signal { name: "rightColumnChanged"; revision: 1536 }
        Signal { name: "topRowChanged"; revision: 1536 }
        Signal { name: "bottomRowChanged"; revision: 1536 }
        Method { name: "_q_componentFinalized" }
        Method { name: "forceLayout" }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "cell"; type: "QPoint" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "cell"; type: "QPoint" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "positionViewAtRow"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "positionViewAtRow"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "positionViewAtColumn"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "positionViewAtColumn"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "itemAtCell"
            type: "QQuickItem*"
            Parameter { name: "cell"; type: "QPoint" }
        }
        Method {
            name: "itemAtCell"
            type: "QQuickItem*"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "includeSpacing"; type: "bool" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "includeSpacing"; type: "bool" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "private/qquicktableview_p.h"
        name: "QQuickTableViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "view"; type: "QQuickTableView"; isReadonly: true; isPointer: true; read: "view" }
        Signal { name: "pooled" }
        Signal { name: "reused" }
    }
    Component {
        file: "private/qquicktaphandler_p.h"
        name: "QQuickTapHandler"
        accessSemantics: "reference"
        prototype: "QQuickSinglePointHandler"
        exports: [
            "QtQuick/TapHandler 2.12",
            "QtQuick/TapHandler 2.15",
            "QtQuick/TapHandler 6.0"
        ]
        exportMetaObjectRevisions: [524, 527, 1536]
        Enum {
            name: "GesturePolicy"
            values: ["DragThreshold", "WithinBounds", "ReleaseWithinBounds"]
        }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "isPressed" }
        Property { name: "tapCount"; type: "int"; isReadonly: true; read: "tapCount" }
        Property { name: "timeHeld"; type: "double"; isReadonly: true; read: "timeHeld" }
        Property {
            name: "longPressThreshold"
            type: "double"
            read: "longPressThreshold"
            write: "setLongPressThreshold"
        }
        Property {
            name: "gesturePolicy"
            type: "GesturePolicy"
            read: "gesturePolicy"
            write: "setGesturePolicy"
        }
        Signal {
            name: "tapped"
            Parameter { name: "eventPoint"; type: "QEventPoint" }
        }
        Signal {
            name: "singleTapped"
            Parameter { name: "eventPoint"; type: "QEventPoint" }
        }
        Signal {
            name: "doubleTapped"
            Parameter { name: "eventPoint"; type: "QEventPoint" }
        }
        Signal { name: "longPressed" }
    }
    Component {
        file: "private/qquicktext_p.h"
        name: "QQuickText"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        exports: [
            "QtQuick/Text 2.0",
            "QtQuick/Text 2.1",
            "QtQuick/Text 2.2",
            "QtQuick/Text 2.3",
            "QtQuick/Text 2.4",
            "QtQuick/Text 2.6",
            "QtQuick/Text 2.7",
            "QtQuick/Text 2.9",
            "QtQuick/Text 2.10",
            "QtQuick/Text 2.11",
            "QtQuick/Text 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            518,
            519,
            521,
            522,
            523,
            1536
        ]
        Enum {
            name: "HAlignment"
            values: [
                "AlignLeft",
                "AlignRight",
                "AlignHCenter",
                "AlignJustify"
            ]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "TextStyle"
            values: ["Normal", "Outline", "Raised", "Sunken"]
        }
        Enum {
            name: "TextFormat"
            values: [
                "PlainText",
                "RichText",
                "MarkdownText",
                "AutoText",
                "StyledText"
            ]
        }
        Enum {
            name: "TextElideMode"
            values: ["ElideLeft", "ElideRight", "ElideMiddle", "ElideNone"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Enum {
            name: "RenderType"
            values: ["QtRendering", "NativeRendering"]
        }
        Enum {
            name: "RenderTypeQuality"
            values: [
                "DefaultRenderTypeQuality",
                "LowRenderTypeQuality",
                "NormalRenderTypeQuality",
                "HighRenderTypeQuality",
                "VeryHighRenderTypeQuality"
            ]
        }
        Enum {
            name: "LineHeightMode"
            values: ["ProportionalHeight", "FixedHeight"]
        }
        Enum {
            name: "FontSizeMode"
            values: ["FixedSize", "HorizontalFit", "VerticalFit", "Fit"]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property { name: "linkColor"; type: "QColor"; read: "linkColor"; write: "setLinkColor" }
        Property { name: "style"; type: "TextStyle"; read: "style"; write: "setStyle" }
        Property { name: "styleColor"; type: "QColor"; read: "styleColor"; write: "setStyleColor" }
        Property { name: "horizontalAlignment"; type: "HAlignment"; read: "hAlign"; write: "setHAlign" }
        Property {
            name: "effectiveHorizontalAlignment"
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property { name: "verticalAlignment"; type: "VAlignment"; read: "vAlign"; write: "setVAlign" }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property { name: "lineCount"; type: "int"; isReadonly: true; read: "lineCount" }
        Property { name: "truncated"; type: "bool"; isReadonly: true; read: "truncated" }
        Property {
            name: "maximumLineCount"
            type: "int"
            read: "maximumLineCount"
            write: "setMaximumLineCount"
        }
        Property { name: "textFormat"; type: "TextFormat"; read: "textFormat"; write: "setTextFormat" }
        Property { name: "elide"; type: "TextElideMode"; read: "elideMode"; write: "setElideMode" }
        Property { name: "contentWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "contentHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "lineHeight"; type: "double"; read: "lineHeight"; write: "setLineHeight" }
        Property {
            name: "lineHeightMode"
            type: "LineHeightMode"
            read: "lineHeightMode"
            write: "setLineHeightMode"
        }
        Property { name: "baseUrl"; type: "QUrl"; read: "baseUrl"; write: "setBaseUrl" }
        Property {
            name: "minimumPixelSize"
            type: "int"
            read: "minimumPixelSize"
            write: "setMinimumPixelSize"
        }
        Property {
            name: "minimumPointSize"
            type: "int"
            read: "minimumPointSize"
            write: "setMinimumPointSize"
        }
        Property {
            name: "fontSizeMode"
            type: "FontSizeMode"
            read: "fontSizeMode"
            write: "setFontSizeMode"
        }
        Property { name: "renderType"; type: "RenderType"; read: "renderType"; write: "setRenderType" }
        Property {
            name: "hoveredLink"
            revision: 514
            type: "QString"
            isReadonly: true
            read: "hoveredLink"
        }
        Property {
            name: "renderTypeQuality"
            revision: 1536
            type: "int"
            read: "renderTypeQuality"
            write: "setRenderTypeQuality"
        }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Property { name: "fontInfo"; revision: 521; type: "QJSValue"; isReadonly: true; read: "fontInfo" }
        Property { name: "advance"; revision: 522; type: "QSizeF"; isReadonly: true; read: "advance" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "linkActivated"
            Parameter { name: "link"; type: "QString" }
        }
        Signal {
            name: "linkHovered"
            revision: 514
            Parameter { name: "link"; type: "QString" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "styleChanged"
            Parameter { name: "style"; type: "QQuickText::TextStyle" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickText::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickText::VAlignment" }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "textFormat"; type: "QQuickText::TextFormat" }
        }
        Signal {
            name: "elideModeChanged"
            Parameter { name: "mode"; type: "QQuickText::TextElideMode" }
        }
        Signal { name: "contentSizeChanged" }
        Signal {
            name: "contentWidthChanged"
            Parameter { name: "contentWidth"; type: "double" }
        }
        Signal {
            name: "contentHeightChanged"
            Parameter { name: "contentHeight"; type: "double" }
        }
        Signal {
            name: "lineHeightChanged"
            Parameter { name: "lineHeight"; type: "double" }
        }
        Signal {
            name: "lineHeightModeChanged"
            Parameter { name: "mode"; type: "LineHeightMode" }
        }
        Signal {
            name: "lineLaidOut"
            Parameter { name: "line"; type: "QQuickTextLine"; isPointer: true }
        }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Signal { name: "fontInfoChanged"; revision: 521 }
        Signal { name: "renderTypeQualityChanged"; revision: 1536 }
        Method { name: "q_updateLayout" }
        Method { name: "triggerPreprocess" }
        Method { name: "imageDownloadFinished" }
        Method { name: "forceLayout"; revision: 521 }
        Method {
            name: "linkAt"
            revision: 515
            type: "QString"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "qquicktextdocument.h"
        name: "QQuickTextDocument"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "private/qquicktextedit_p.h"
        name: "QQuickTextEdit"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        exports: [
            "QtQuick/TextEdit 2.0",
            "QtQuick/TextEdit 2.1",
            "QtQuick/TextEdit 2.2",
            "QtQuick/TextEdit 2.3",
            "QtQuick/TextEdit 2.4",
            "QtQuick/TextEdit 2.6",
            "QtQuick/TextEdit 2.7",
            "QtQuick/TextEdit 2.10",
            "QtQuick/TextEdit 2.11",
            "QtQuick/TextEdit 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            518,
            519,
            522,
            523,
            1536
        ]
        Enum {
            name: "HAlignment"
            values: [
                "AlignLeft",
                "AlignRight",
                "AlignHCenter",
                "AlignJustify"
            ]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "TextFormat"
            values: ["PlainText", "RichText", "AutoText", "MarkdownText"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Enum {
            name: "SelectionMode"
            values: ["SelectCharacters", "SelectWords"]
        }
        Enum {
            name: "RenderType"
            values: ["QtRendering", "NativeRendering"]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "selectionColor"
            type: "QColor"
            read: "selectionColor"
            write: "setSelectionColor"
        }
        Property {
            name: "selectedTextColor"
            type: "QColor"
            read: "selectedTextColor"
            write: "setSelectedTextColor"
        }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "horizontalAlignment"; type: "HAlignment"; read: "hAlign"; write: "setHAlign" }
        Property {
            name: "effectiveHorizontalAlignment"
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property { name: "verticalAlignment"; type: "VAlignment"; read: "vAlign"; write: "setVAlign" }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property { name: "lineCount"; type: "int"; isReadonly: true; read: "lineCount" }
        Property { name: "length"; type: "int"; isReadonly: true; read: "length" }
        Property { name: "contentWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "contentHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "textFormat"; type: "TextFormat"; read: "textFormat"; write: "setTextFormat" }
        Property { name: "readOnly"; type: "bool"; read: "isReadOnly"; write: "setReadOnly" }
        Property {
            name: "cursorVisible"
            type: "bool"
            read: "isCursorVisible"
            write: "setCursorVisible"
        }
        Property {
            name: "cursorPosition"
            type: "int"
            read: "cursorPosition"
            write: "setCursorPosition"
        }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true; read: "cursorRectangle" }
        Property {
            name: "cursorDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "cursorDelegate"
            write: "setCursorDelegate"
        }
        Property { name: "overwriteMode"; type: "bool"; read: "overwriteMode"; write: "setOverwriteMode" }
        Property { name: "selectionStart"; type: "int"; isReadonly: true; read: "selectionStart" }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true; read: "selectionEnd" }
        Property { name: "selectedText"; type: "QString"; isReadonly: true; read: "selectedText" }
        Property {
            name: "activeFocusOnPress"
            type: "bool"
            read: "focusOnPress"
            write: "setFocusOnPress"
        }
        Property {
            name: "persistentSelection"
            type: "bool"
            read: "persistentSelection"
            write: "setPersistentSelection"
        }
        Property { name: "textMargin"; type: "double"; read: "textMargin"; write: "setTextMargin" }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
        }
        Property {
            name: "selectByKeyboard"
            revision: 513
            type: "bool"
            read: "selectByKeyboard"
            write: "setSelectByKeyboard"
        }
        Property { name: "selectByMouse"; type: "bool"; read: "selectByMouse"; write: "setSelectByMouse" }
        Property {
            name: "mouseSelectionMode"
            type: "SelectionMode"
            read: "mouseSelectionMode"
            write: "setMouseSelectionMode"
        }
        Property { name: "canPaste"; type: "bool"; isReadonly: true; read: "canPaste" }
        Property { name: "canUndo"; type: "bool"; isReadonly: true; read: "canUndo" }
        Property { name: "canRedo"; type: "bool"; isReadonly: true; read: "canRedo" }
        Property {
            name: "inputMethodComposing"
            type: "bool"
            isReadonly: true
            read: "isInputMethodComposing"
        }
        Property { name: "baseUrl"; type: "QUrl"; read: "baseUrl"; write: "setBaseUrl" }
        Property { name: "renderType"; type: "RenderType"; read: "renderType"; write: "setRenderType" }
        Property {
            name: "textDocument"
            revision: 513
            type: "QQuickTextDocument"
            isReadonly: true
            isPointer: true
            read: "textDocument"
        }
        Property {
            name: "hoveredLink"
            revision: 514
            type: "QString"
            isReadonly: true
            read: "hoveredLink"
        }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Property {
            name: "preeditText"
            revision: 519
            type: "QString"
            isReadonly: true
            read: "preeditText"
        }
        Property {
            name: "tabStopDistance"
            revision: 522
            type: "double"
            read: "tabStopDistance"
            write: "setTabStopDistance"
        }
        Signal { name: "preeditTextChanged"; revision: 519 }
        Signal { name: "contentSizeChanged" }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "selectionColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "selectedTextColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextEdit::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextEdit::VAlignment" }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "textFormat"; type: "QQuickTextEdit::TextFormat" }
        }
        Signal {
            name: "readOnlyChanged"
            Parameter { name: "isReadOnly"; type: "bool" }
        }
        Signal {
            name: "cursorVisibleChanged"
            Parameter { name: "isCursorVisible"; type: "bool" }
        }
        Signal {
            name: "overwriteModeChanged"
            Parameter { name: "overwriteMode"; type: "bool" }
        }
        Signal {
            name: "activeFocusOnPressChanged"
            Parameter { name: "activeFocusOnPressed"; type: "bool" }
        }
        Signal {
            name: "persistentSelectionChanged"
            Parameter { name: "isPersistentSelection"; type: "bool" }
        }
        Signal {
            name: "textMarginChanged"
            Parameter { name: "textMargin"; type: "double" }
        }
        Signal {
            name: "selectByKeyboardChanged"
            revision: 513
            Parameter { name: "selectByKeyboard"; type: "bool" }
        }
        Signal {
            name: "selectByMouseChanged"
            Parameter { name: "selectByMouse"; type: "bool" }
        }
        Signal {
            name: "mouseSelectionModeChanged"
            Parameter { name: "mode"; type: "QQuickTextEdit::SelectionMode" }
        }
        Signal {
            name: "linkActivated"
            Parameter { name: "link"; type: "QString" }
        }
        Signal {
            name: "linkHovered"
            revision: 514
            Parameter { name: "link"; type: "QString" }
        }
        Signal { name: "editingFinished"; revision: 518 }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Signal {
            name: "tabStopDistanceChanged"
            revision: 522
            Parameter { name: "distance"; type: "double" }
        }
        Method { name: "selectAll" }
        Method { name: "selectWord" }
        Method {
            name: "select"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "deselect" }
        Method {
            name: "isRightToLeft"
            type: "bool"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method {
            name: "insert"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "remove"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "append"
            revision: 514
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "clear"; revision: 519 }
        Method { name: "q_textChanged" }
        Method {
            name: "q_contentsChange"
            Parameter { type: "int" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method { name: "updateSelection" }
        Method { name: "moveCursorDelegate" }
        Method { name: "createCursor" }
        Method { name: "q_canPasteChanged" }
        Method { name: "updateWholeDocument" }
        Method {
            name: "invalidateBlock"
            Parameter { name: "block"; type: "QTextBlock" }
        }
        Method { name: "updateCursor" }
        Method {
            name: "q_linkHovered"
            Parameter { name: "link"; type: "QString" }
        }
        Method {
            name: "q_markerHovered"
            Parameter { name: "hovered"; type: "bool" }
        }
        Method { name: "q_updateAlignment" }
        Method { name: "updateSize" }
        Method { name: "triggerPreprocess" }
        Method {
            name: "inputMethodQuery"
            revision: 516
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Method {
            name: "positionToRectangle"
            type: "QRectF"
            Parameter { type: "int" }
        }
        Method {
            name: "positionAt"
            type: "int"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
            Parameter { name: "mode"; type: "SelectionMode" }
        }
        Method {
            name: "getText"
            type: "QString"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "getFormattedText"
            type: "QString"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "linkAt"
            revision: 515
            type: "QString"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "private/qquicktextinput_p.h"
        name: "QQuickTextInput"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        exports: [
            "QtQuick/TextInput 2.0",
            "QtQuick/TextInput 2.1",
            "QtQuick/TextInput 2.2",
            "QtQuick/TextInput 2.4",
            "QtQuick/TextInput 2.6",
            "QtQuick/TextInput 2.7",
            "QtQuick/TextInput 2.9",
            "QtQuick/TextInput 2.11",
            "QtQuick/TextInput 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            516,
            518,
            519,
            521,
            523,
            1536
        ]
        Enum {
            name: "EchoMode"
            values: ["Normal", "NoEcho", "Password", "PasswordEchoOnEdit"]
        }
        Enum {
            name: "HAlignment"
            values: ["AlignLeft", "AlignRight", "AlignHCenter"]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Enum {
            name: "SelectionMode"
            values: ["SelectCharacters", "SelectWords"]
        }
        Enum {
            name: "CursorPosition"
            values: ["CursorBetweenCharacters", "CursorOnCharacter"]
        }
        Enum {
            name: "RenderType"
            values: ["QtRendering", "NativeRendering"]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "length"; type: "int"; isReadonly: true; read: "length" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "selectionColor"
            type: "QColor"
            read: "selectionColor"
            write: "setSelectionColor"
        }
        Property {
            name: "selectedTextColor"
            type: "QColor"
            read: "selectedTextColor"
            write: "setSelectedTextColor"
        }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "horizontalAlignment"; type: "HAlignment"; read: "hAlign"; write: "setHAlign" }
        Property {
            name: "effectiveHorizontalAlignment"
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property { name: "verticalAlignment"; type: "VAlignment"; read: "vAlign"; write: "setVAlign" }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property { name: "readOnly"; type: "bool"; read: "isReadOnly"; write: "setReadOnly" }
        Property {
            name: "cursorVisible"
            type: "bool"
            read: "isCursorVisible"
            write: "setCursorVisible"
        }
        Property {
            name: "cursorPosition"
            type: "int"
            read: "cursorPosition"
            write: "setCursorPosition"
        }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true; read: "cursorRectangle" }
        Property {
            name: "cursorDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "cursorDelegate"
            write: "setCursorDelegate"
        }
        Property { name: "overwriteMode"; type: "bool"; read: "overwriteMode"; write: "setOverwriteMode" }
        Property { name: "selectionStart"; type: "int"; isReadonly: true; read: "selectionStart" }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true; read: "selectionEnd" }
        Property { name: "selectedText"; type: "QString"; isReadonly: true; read: "selectedText" }
        Property { name: "maximumLength"; type: "int"; read: "maxLength"; write: "setMaxLength" }
        Property {
            name: "validator"
            type: "QValidator"
            isPointer: true
            read: "validator"
            write: "setValidator"
        }
        Property { name: "inputMask"; type: "QString"; read: "inputMask"; write: "setInputMask" }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
        }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true; read: "hasAcceptableInput" }
        Property { name: "echoMode"; type: "EchoMode"; read: "echoMode"; write: "setEchoMode" }
        Property {
            name: "activeFocusOnPress"
            type: "bool"
            read: "focusOnPress"
            write: "setFocusOnPress"
        }
        Property {
            name: "passwordCharacter"
            type: "QString"
            read: "passwordCharacter"
            write: "setPasswordCharacter"
        }
        Property {
            name: "passwordMaskDelay"
            revision: 516
            type: "int"
            read: "passwordMaskDelay"
            write: "setPasswordMaskDelay"
        }
        Property { name: "displayText"; type: "QString"; isReadonly: true; read: "displayText" }
        Property {
            name: "preeditText"
            revision: 519
            type: "QString"
            isReadonly: true
            read: "preeditText"
        }
        Property { name: "autoScroll"; type: "bool"; read: "autoScroll"; write: "setAutoScroll" }
        Property { name: "selectByMouse"; type: "bool"; read: "selectByMouse"; write: "setSelectByMouse" }
        Property {
            name: "mouseSelectionMode"
            type: "SelectionMode"
            read: "mouseSelectionMode"
            write: "setMouseSelectionMode"
        }
        Property {
            name: "persistentSelection"
            type: "bool"
            read: "persistentSelection"
            write: "setPersistentSelection"
        }
        Property { name: "canPaste"; type: "bool"; isReadonly: true; read: "canPaste" }
        Property { name: "canUndo"; type: "bool"; isReadonly: true; read: "canUndo" }
        Property { name: "canRedo"; type: "bool"; isReadonly: true; read: "canRedo" }
        Property {
            name: "inputMethodComposing"
            type: "bool"
            isReadonly: true
            read: "isInputMethodComposing"
        }
        Property { name: "contentWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "contentHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "renderType"; type: "RenderType"; read: "renderType"; write: "setRenderType" }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Signal { name: "accepted" }
        Signal { name: "editingFinished"; revision: 514 }
        Signal { name: "textEdited"; revision: 521 }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextInput::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextInput::VAlignment" }
        }
        Signal {
            name: "readOnlyChanged"
            Parameter { name: "isReadOnly"; type: "bool" }
        }
        Signal {
            name: "cursorVisibleChanged"
            Parameter { name: "isCursorVisible"; type: "bool" }
        }
        Signal {
            name: "overwriteModeChanged"
            Parameter { name: "overwriteMode"; type: "bool" }
        }
        Signal {
            name: "maximumLengthChanged"
            Parameter { name: "maximumLength"; type: "int" }
        }
        Signal {
            name: "inputMaskChanged"
            Parameter { name: "inputMask"; type: "QString" }
        }
        Signal {
            name: "echoModeChanged"
            Parameter { name: "echoMode"; type: "QQuickTextInput::EchoMode" }
        }
        Signal {
            name: "passwordMaskDelayChanged"
            revision: 516
            Parameter { name: "delay"; type: "int" }
        }
        Signal { name: "preeditTextChanged"; revision: 519 }
        Signal {
            name: "activeFocusOnPressChanged"
            Parameter { name: "activeFocusOnPress"; type: "bool" }
        }
        Signal {
            name: "autoScrollChanged"
            Parameter { name: "autoScroll"; type: "bool" }
        }
        Signal {
            name: "selectByMouseChanged"
            Parameter { name: "selectByMouse"; type: "bool" }
        }
        Signal {
            name: "mouseSelectionModeChanged"
            Parameter { name: "mode"; type: "QQuickTextInput::SelectionMode" }
        }
        Signal { name: "contentSizeChanged" }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Method { name: "selectAll" }
        Method { name: "selectWord" }
        Method {
            name: "select"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "deselect" }
        Method {
            name: "isRightToLeft"
            type: "bool"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method {
            name: "insert"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "remove"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "ensureVisible"
            revision: 516
            Parameter { name: "position"; type: "int" }
        }
        Method { name: "clear"; revision: 519 }
        Method { name: "selectionChanged" }
        Method { name: "createCursor" }
        Method {
            name: "updateCursorRectangle"
            Parameter { name: "scroll"; type: "bool" }
        }
        Method { name: "updateCursorRectangle" }
        Method { name: "q_canPasteChanged" }
        Method { name: "q_updateAlignment" }
        Method { name: "triggerPreprocess" }
        Method { name: "q_validatorChanged" }
        Method {
            name: "positionAt"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "positionToRectangle"
            type: "QRectF"
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
            Parameter { name: "mode"; type: "SelectionMode" }
        }
        Method {
            name: "inputMethodQuery"
            revision: 516
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Method {
            name: "getText"
            type: "QString"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
    }
    Component {
        file: "private/qquicktext_p.h"
        name: "QQuickTextLine"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "number"; type: "int"; isReadonly: true; read: "number" }
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "double"; read: "height"; write: "setHeight" }
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property {
            name: "implicitWidth"
            revision: 527
            type: "double"
            isReadonly: true
            read: "implicitWidth"
        }
        Property { name: "isLast"; revision: 527; type: "bool"; isReadonly: true; read: "isLast" }
    }
    Component {
        file: "private/qquicktextmetrics_p.h"
        name: "QQuickTextMetrics"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/TextMetrics 2.4", "QtQuick/TextMetrics 6.0"]
        exportMetaObjectRevisions: [516, 1536]
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "advanceWidth"; type: "double"; isReadonly: true; read: "advanceWidth" }
        Property { name: "boundingRect"; type: "QRectF"; isReadonly: true; read: "boundingRect" }
        Property { name: "width"; type: "double"; isReadonly: true; read: "width" }
        Property { name: "height"; type: "double"; isReadonly: true; read: "height" }
        Property {
            name: "tightBoundingRect"
            type: "QRectF"
            isReadonly: true
            read: "tightBoundingRect"
        }
        Property { name: "elidedText"; type: "QString"; isReadonly: true; read: "elidedText" }
        Property { name: "elide"; type: "Qt::TextElideMode"; read: "elide"; write: "setElide" }
        Property { name: "elideWidth"; type: "double"; read: "elideWidth"; write: "setElideWidth" }
        Signal { name: "metricsChanged" }
    }
    Component {
        file: "private/qquickmultipointtoucharea_p.h"
        name: "QQuickTouchPoint"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick/TouchPoint 2.0",
            "QtQuick/TouchPoint 2.9",
            "QtQuick/TouchPoint 6.0"
        ]
        exportMetaObjectRevisions: [512, 521, 1536]
        Property { name: "pointId"; type: "int"; isReadonly: true; read: "pointId" }
        Property {
            name: "uniqueId"
            revision: 521
            type: "QPointingDeviceUniqueId"
            isReadonly: true
            read: "uniqueId"
        }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "pressed" }
        Property { name: "x"; type: "double"; isReadonly: true; read: "x" }
        Property { name: "y"; type: "double"; isReadonly: true; read: "y" }
        Property {
            name: "ellipseDiameters"
            revision: 521
            type: "QSizeF"
            isReadonly: true
            read: "ellipseDiameters"
        }
        Property { name: "pressure"; type: "double"; isReadonly: true; read: "pressure" }
        Property { name: "rotation"; revision: 521; type: "double"; isReadonly: true; read: "rotation" }
        Property { name: "velocity"; type: "QVector2D"; isReadonly: true; read: "velocity" }
        Property { name: "area"; type: "QRectF"; isReadonly: true; read: "area" }
        Property { name: "startX"; type: "double"; isReadonly: true; read: "startX" }
        Property { name: "startY"; type: "double"; isReadonly: true; read: "startY" }
        Property { name: "previousX"; type: "double"; isReadonly: true; read: "previousX" }
        Property { name: "previousY"; type: "double"; isReadonly: true; read: "previousY" }
        Property { name: "sceneX"; type: "double"; isReadonly: true; read: "sceneX" }
        Property { name: "sceneY"; type: "double"; isReadonly: true; read: "sceneY" }
        Signal { name: "uniqueIdChanged"; revision: 521 }
        Signal { name: "ellipseDiametersChanged"; revision: 521 }
        Signal { name: "rotationChanged"; revision: 521 }
    }
    Component {
        file: "qquickitem.h"
        name: "QQuickTransform"
        accessSemantics: "reference"
        prototype: "QObject"
        Method { name: "update" }
    }
    Component {
        file: "private/qquicktransition_p.h"
        name: "QQuickTransition"
        accessSemantics: "reference"
        defaultProperty: "animations"
        prototype: "QObject"
        exports: ["QtQuick/Transition 2.0", "QtQuick/Transition 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "from"; type: "QString"; read: "fromState"; write: "setFromState" }
        Property { name: "to"; type: "QString"; read: "toState"; write: "setToState" }
        Property { name: "reversible"; type: "bool"; read: "reversible"; write: "setReversible" }
        Property { name: "running"; type: "bool"; isReadonly: true; read: "running" }
        Property {
            name: "animations"
            type: "QQuickAbstractAnimation"
            isList: true
            isReadonly: true
            read: "animations"
        }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
    }
    Component {
        file: "private/qquicktranslate_p.h"
        name: "QQuickTranslate"
        accessSemantics: "reference"
        prototype: "QQuickTransform"
        exports: ["QtQuick/Translate 2.0", "QtQuick/Translate 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickUniformAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAnimator"
        exports: [
            "QtQuick/UniformAnimator 2.2",
            "QtQuick/UniformAnimator 2.12",
            "QtQuick/UniformAnimator 6.0"
        ]
        exportMetaObjectRevisions: [514, 524, 1536]
        Property { name: "uniform"; type: "QString"; read: "uniform"; write: "setUniform" }
        Signal {
            name: "uniformChanged"
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QVector2D"
        accessSemantics: "value"
        extension: "QQuickVector2DValueType"
        exports: ["QtQuick/vector2d 2.0", "QtQuick/vector2d 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickVector2DValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Method { name: "toString"; type: "QString" }
        Method {
            name: "dotProduct"
            type: "double"
            Parameter { name: "vec"; type: "QVector2D" }
        }
        Method {
            name: "times"
            type: "QVector2D"
            Parameter { name: "vec"; type: "QVector2D" }
        }
        Method {
            name: "times"
            type: "QVector2D"
            Parameter { name: "scalar"; type: "double" }
        }
        Method {
            name: "plus"
            type: "QVector2D"
            Parameter { name: "vec"; type: "QVector2D" }
        }
        Method {
            name: "minus"
            type: "QVector2D"
            Parameter { name: "vec"; type: "QVector2D" }
        }
        Method { name: "normalized"; type: "QVector2D" }
        Method { name: "length"; type: "double" }
        Method { name: "toVector3d"; type: "QVector3D" }
        Method { name: "toVector4d"; type: "QVector4D" }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "vec"; type: "QVector2D" }
            Parameter { name: "epsilon"; type: "double" }
        }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "vec"; type: "QVector2D" }
        }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QVector3D"
        accessSemantics: "value"
        extension: "QQuickVector3DValueType"
        exports: ["QtQuick/vector3d 2.0", "QtQuick/vector3d 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickVector3DValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "z"; type: "double"; read: "z"; write: "setZ" }
        Method { name: "toString"; type: "QString" }
        Method {
            name: "crossProduct"
            type: "QVector3D"
            Parameter { name: "vec"; type: "QVector3D" }
        }
        Method {
            name: "dotProduct"
            type: "double"
            Parameter { name: "vec"; type: "QVector3D" }
        }
        Method {
            name: "times"
            type: "QVector3D"
            Parameter { name: "m"; type: "QMatrix4x4" }
        }
        Method {
            name: "times"
            type: "QVector3D"
            Parameter { name: "vec"; type: "QVector3D" }
        }
        Method {
            name: "times"
            type: "QVector3D"
            Parameter { name: "scalar"; type: "double" }
        }
        Method {
            name: "plus"
            type: "QVector3D"
            Parameter { name: "vec"; type: "QVector3D" }
        }
        Method {
            name: "minus"
            type: "QVector3D"
            Parameter { name: "vec"; type: "QVector3D" }
        }
        Method { name: "normalized"; type: "QVector3D" }
        Method { name: "length"; type: "double" }
        Method { name: "toVector2d"; type: "QVector2D" }
        Method { name: "toVector4d"; type: "QVector4D" }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "vec"; type: "QVector3D" }
            Parameter { name: "epsilon"; type: "double" }
        }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "vec"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquickanimation_p.h"
        name: "QQuickVector3dAnimation"
        accessSemantics: "reference"
        prototype: "QQuickPropertyAnimation"
        exports: [
            "QtQuick/Vector3dAnimation 2.0",
            "QtQuick/Vector3dAnimation 2.12",
            "QtQuick/Vector3dAnimation 6.0"
        ]
        exportMetaObjectRevisions: [512, 524, 1536]
        Property { name: "from"; type: "QVector3D"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "QVector3D"; read: "to"; write: "setTo" }
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QVector4D"
        accessSemantics: "value"
        extension: "QQuickVector4DValueType"
        exports: ["QtQuick/vector4d 2.0", "QtQuick/vector4d 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qquickvaluetypes_p.h"
        name: "QQuickVector4DValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "z"; type: "double"; read: "z"; write: "setZ" }
        Property { name: "w"; type: "double"; read: "w"; write: "setW" }
        Method { name: "toString"; type: "QString" }
        Method {
            name: "dotProduct"
            type: "double"
            Parameter { name: "vec"; type: "QVector4D" }
        }
        Method {
            name: "times"
            type: "QVector4D"
            Parameter { name: "vec"; type: "QVector4D" }
        }
        Method {
            name: "times"
            type: "QVector4D"
            Parameter { name: "m"; type: "QMatrix4x4" }
        }
        Method {
            name: "times"
            type: "QVector4D"
            Parameter { name: "scalar"; type: "double" }
        }
        Method {
            name: "plus"
            type: "QVector4D"
            Parameter { name: "vec"; type: "QVector4D" }
        }
        Method {
            name: "minus"
            type: "QVector4D"
            Parameter { name: "vec"; type: "QVector4D" }
        }
        Method { name: "normalized"; type: "QVector4D" }
        Method { name: "length"; type: "double" }
        Method { name: "toVector2d"; type: "QVector2D" }
        Method { name: "toVector3d"; type: "QVector3D" }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "vec"; type: "QVector4D" }
            Parameter { name: "epsilon"; type: "double" }
        }
        Method {
            name: "fuzzyEquals"
            type: "bool"
            Parameter { name: "vec"; type: "QVector4D" }
        }
    }
    Component {
        file: "private/qquicklistview_p.h"
        name: "QQuickViewSection"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/ViewSection 2.0", "QtQuick/ViewSection 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "SectionCriteria"
            values: ["FullString", "FirstCharacter"]
        }
        Enum {
            name: "LabelPositioning"
            values: ["InlineLabels", "CurrentLabelAtStart", "NextLabelAtEnd"]
        }
        Property { name: "property"; type: "QString"; read: "property"; write: "setProperty" }
        Property { name: "criteria"; type: "SectionCriteria"; read: "criteria"; write: "setCriteria" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property {
            name: "labelPositioning"
            type: "int"
            read: "labelPositioning"
            write: "setLabelPositioning"
        }
        Signal { name: "sectionsChanged" }
    }
    Component {
        file: "private/qquickitemviewtransition_p.h"
        name: "QQuickViewTransitionAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick/ViewTransition 2.0", "QtQuick/ViewTransition 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickViewTransitionAttached"
        Property { name: "index"; type: "int"; isReadonly: true; read: "index" }
        Property { name: "item"; type: "QQuickItem"; isReadonly: true; isPointer: true; read: "item" }
        Property { name: "destination"; type: "QPointF"; isReadonly: true; read: "destination" }
        Property { name: "targetIndexes"; type: "QList<int>"; isReadonly: true; read: "targetIndexes" }
        Property {
            name: "targetItems"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "targetItems"
        }
    }
    Component {
        file: "private/qquickevents_p_p.h"
        name: "QQuickWheelEvent"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "device"
            type: "const QPointingDevice"
            isReadonly: true
            isPointer: true
            read: "pointingDevice"
        }
        Property { name: "x"; type: "double"; isReadonly: true; read: "x" }
        Property { name: "y"; type: "double"; isReadonly: true; read: "y" }
        Property { name: "angleDelta"; type: "QPoint"; isReadonly: true; read: "angleDelta" }
        Property { name: "pixelDelta"; type: "QPoint"; isReadonly: true; read: "pixelDelta" }
        Property { name: "phase"; type: "Qt::ScrollPhase"; isReadonly: true; read: "phase" }
        Property { name: "buttons"; type: "int"; isReadonly: true; read: "buttons" }
        Property { name: "modifiers"; type: "int"; isReadonly: true; read: "modifiers" }
        Property { name: "inverted"; type: "bool"; isReadonly: true; read: "inverted" }
        Property { name: "accepted"; type: "bool"; read: "isAccepted"; write: "setAccepted" }
    }
    Component {
        file: "private/qquickwheelhandler_p.h"
        name: "QQuickWheelHandler"
        accessSemantics: "reference"
        prototype: "QQuickSinglePointHandler"
        exports: [
            "QtQuick/WheelHandler 2.14",
            "QtQuick/WheelHandler 2.15",
            "QtQuick/WheelHandler 6.0"
        ]
        exportMetaObjectRevisions: [526, 527, 1536]
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "invertible"; type: "bool"; read: "isInvertible"; write: "setInvertible" }
        Property {
            name: "activeTimeout"
            type: "double"
            read: "activeTimeout"
            write: "setActiveTimeout"
        }
        Property { name: "rotation"; type: "double"; read: "rotation"; write: "setRotation" }
        Property {
            name: "rotationScale"
            type: "double"
            read: "rotationScale"
            write: "setRotationScale"
        }
        Property { name: "property"; type: "QString"; read: "property"; write: "setProperty" }
        Property {
            name: "targetScaleMultiplier"
            type: "double"
            read: "targetScaleMultiplier"
            write: "setTargetScaleMultiplier"
        }
        Property {
            name: "targetTransformAroundCursor"
            type: "bool"
            read: "isTargetTransformAroundCursor"
            write: "setTargetTransformAroundCursor"
        }
        Signal {
            name: "wheel"
            Parameter { name: "event"; type: "QQuickWheelEvent"; isPointer: true }
        }
    }
    Component {
        file: "qquickwindow.h"
        name: "QQuickWindow"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWindow"
        exports: ["QtQuick/Window 2.0"]
        exportMetaObjectRevisions: [512]
        Enum {
            name: "CreateTextureOptions"
            alias: "CreateTextureOption"
            isFlag: true
            values: [
                "TextureHasAlphaChannel",
                "TextureHasMipmaps",
                "TextureOwnsGLTexture",
                "TextureCanUseAtlas",
                "TextureIsOpaque"
            ]
        }
        Enum {
            name: "SceneGraphError"
            values: ["ContextNotAvailable"]
        }
        Enum {
            name: "TextRenderType"
            values: ["QtTextRendering", "NativeTextRendering"]
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true; read: "data" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "contentItem"
        }
        Property {
            name: "activeFocusItem"
            revision: 513
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "activeFocusItem"
        }
        Signal { name: "frameSwapped" }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 514 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 514 }
        Signal { name: "sceneGraphAboutToStop"; revision: 514 }
        Signal {
            name: "closing"
            revision: 513
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 513 }
        Signal {
            name: "sceneGraphError"
            revision: 514
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "QString" }
        }
        Signal { name: "beforeRenderPassRecording"; revision: 526 }
        Signal { name: "afterRenderPassRecording"; revision: 526 }
        Signal { name: "paletteChanged"; revision: 1536 }
        Signal { name: "paletteCreated"; revision: 1536 }
        Signal { name: "beforeFrameBegin"; revision: 1536 }
        Signal { name: "afterFrameEnd"; revision: 1536 }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Method { name: "maybeUpdate" }
        Method { name: "cleanupSceneGraph" }
        Method { name: "physicalDpiChanged" }
        Method {
            name: "handleScreenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Method {
            name: "setTransientParent_helper"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "runJobsAfterSwap" }
        Method {
            name: "handleApplicationStateChanged"
            Parameter { name: "state"; type: "Qt::ApplicationState" }
        }
    }
    Component {
        file: "private/qquickwindowattached_p.h"
        name: "QQuickWindowAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "visibility"; type: "QWindow::Visibility"; isReadonly: true; read: "visibility" }
        Property { name: "active"; type: "bool"; isReadonly: true; read: "isActive" }
        Property {
            name: "activeFocusItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "activeFocusItem"
        }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "contentItem"
        }
        Property { name: "width"; type: "int"; isReadonly: true; read: "width" }
        Property { name: "height"; type: "int"; isReadonly: true; read: "height" }
        Property { name: "window"; type: "QQuickWindow"; isReadonly: true; isPointer: true; read: "window" }
        Method {
            name: "windowChange"
            Parameter { type: "QQuickWindow"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickwindowmodule_p.h"
        name: "QQuickWindowQmlImpl"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick/Window 2.1",
            "QtQuick/Window 2.2",
            "QtQuick/Window 2.3",
            "QtQuick/Window 2.13",
            "QtQuick/Window 2.14",
            "QtQuick/Window 6.0"
        ]
        exportMetaObjectRevisions: [513, 514, 515, 525, 526, 1536]
        attachedType: "QQuickWindowAttached"
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property { name: "visibility"; type: "Visibility"; read: "visibility"; write: "setVisibility" }
        Property {
            name: "screen"
            revision: 515
            type: "QObject"
            isPointer: true
            read: "screen"
            write: "setScreen"
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "screenChanged"; revision: 515 }
        Method { name: "setWindowVisibility" }
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickXAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAnimator"
        exports: [
            "QtQuick/XAnimator 2.2",
            "QtQuick/XAnimator 2.12",
            "QtQuick/XAnimator 6.0"
        ]
        exportMetaObjectRevisions: [514, 524, 1536]
    }
    Component {
        file: "private/qquickanimator_p.h"
        name: "QQuickYAnimator"
        accessSemantics: "reference"
        prototype: "QQuickAnimator"
        exports: [
            "QtQuick/YAnimator 2.2",
            "QtQuick/YAnimator 2.12",
            "QtQuick/YAnimator 6.0"
        ]
        exportMetaObjectRevisions: [514, 524, 1536]
    }
    Component {
        file: "private/qquickforeignutils_p.h"
        name: "QRegularExpressionValidator"
        accessSemantics: "reference"
        prototype: "QValidator"
        exports: [
            "QtQuick/RegularExpressionValidator 2.14",
            "QtQuick/RegularExpressionValidator 6.0"
        ]
        exportMetaObjectRevisions: [526, 1536]
        Property {
            name: "regularExpression"
            type: "QRegularExpression"
            read: "regularExpression"
            write: "setRegularExpression"
        }
        Signal {
            name: "regularExpressionChanged"
            Parameter { name: "re"; type: "QRegularExpression" }
        }
        Method {
            name: "setRegularExpression"
            Parameter { name: "re"; type: "QRegularExpression" }
        }
    }
    Component {
        file: "private/qquickforeignutils_p.h"
        name: "QValidator"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "State"
            values: ["Invalid", "Intermediate", "Acceptable"]
        }
        Signal { name: "changed" }
    }
    Component {
        file: "private/qquickwindowmodule_p.h"
        name: "QWindow"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: [
                "Hidden",
                "AutomaticVisibility",
                "Windowed",
                "Minimized",
                "Maximized",
                "FullScreen"
            ]
        }
        Enum {
            name: "AncestorMode"
            values: ["ExcludeTransients", "IncludeTransients"]
        }
        Property { name: "title"; type: "QString"; read: "title"; write: "setTitle" }
        Property { name: "modality"; type: "Qt::WindowModality"; read: "modality"; write: "setModality" }
        Property { name: "flags"; type: "Qt::WindowFlags"; read: "flags"; write: "setFlags" }
        Property { name: "x"; type: "int"; read: "x"; write: "setX" }
        Property { name: "y"; type: "int"; read: "y"; write: "setY" }
        Property { name: "width"; type: "int"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "int"; read: "height"; write: "setHeight" }
        Property { name: "minimumWidth"; type: "int"; read: "minimumWidth"; write: "setMinimumWidth" }
        Property { name: "minimumHeight"; type: "int"; read: "minimumHeight"; write: "setMinimumHeight" }
        Property { name: "maximumWidth"; type: "int"; read: "maximumWidth"; write: "setMaximumWidth" }
        Property { name: "maximumHeight"; type: "int"; read: "maximumHeight"; write: "setMaximumHeight" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property { name: "active"; revision: 513; type: "bool"; isReadonly: true; read: "isActive" }
        Property {
            name: "visibility"
            revision: 513
            type: "Visibility"
            read: "visibility"
            write: "setVisibility"
        }
        Property {
            name: "contentOrientation"
            type: "Qt::ScreenOrientation"
            read: "contentOrientation"
            write: "reportContentOrientationChange"
        }
        Property { name: "opacity"; revision: 513; type: "double"; read: "opacity"; write: "setOpacity" }
        Property {
            name: "transientParent"
            revision: 525
            type: "QWindow"
            isPointer: true
            write: "setTransientParent"
        }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 514
            Parameter { name: "title"; type: "QString" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 513
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 513 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 513
            Parameter { name: "opacity"; type: "double" }
        }
        Signal {
            name: "transientParentChanged"
            revision: 525
            Parameter { name: "transientParent"; type: "QWindow"; isPointer: true }
        }
        Method { name: "requestActivate"; revision: 513 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "startSystemResize"
            type: "bool"
            Parameter { name: "edges"; type: "Qt::Edges" }
        }
        Method { name: "startSystemMove"; type: "bool" }
        Method {
            name: "setTitle"
            Parameter { type: "QString" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "posx"; type: "int" }
            Parameter { name: "posy"; type: "int" }
            Parameter { name: "w"; type: "int" }
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "rect"; type: "QRect" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 513
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 515 }
        Method { name: "_q_clearAlert" }
    }
}
