import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/qquickshape_p.h"
        name: "QQuickShape"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick.Shapes/Shape 1.0",
            "QtQuick.Shapes/Shape 1.11",
            "QtQuick.Shapes/Shape 2.0",
            "QtQuick.Shapes/Shape 2.1",
            "QtQuick.Shapes/Shape 2.4",
            "QtQuick.Shapes/Shape 2.7",
            "QtQuick.Shapes/Shape 2.11",
            "QtQuick.Shapes/Shape 6.0"
        ]
        exportMetaObjectRevisions: [256, 267, 512, 513, 516, 519, 523, 1536]
        Enum {
            name: "RendererType"
            values: [
                "UnknownRenderer",
                "GeometryRenderer",
                "NvprRenderer",
                "SoftwareRenderer"
            ]
        }
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Processing"]
        }
        Enum {
            name: "ContainsMode"
            values: ["BoundingRectContains", "FillContains"]
        }
        Property { name: "rendererType"; type: "RendererType"; isReadonly: true; read: "rendererType" }
        Property { name: "asynchronous"; type: "bool"; read: "asynchronous"; write: "setAsynchronous" }
        Property {
            name: "vendorExtensionsEnabled"
            type: "bool"
            read: "vendorExtensionsEnabled"
            write: "setVendorExtensionsEnabled"
        }
        Property { name: "status"; type: "Status"; isReadonly: true; read: "status" }
        Property {
            name: "containsMode"
            revision: 267
            type: "ContainsMode"
            read: "containsMode"
            write: "setContainsMode"
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true; read: "data" }
        Signal { name: "rendererChanged" }
        Signal { name: "containsModeChanged"; revision: 267 }
        Method { name: "_q_shapePathChanged" }
    }
    Component {
        file: "private/qquickshape_p.h"
        name: "QQuickShapeConicalGradient"
        accessSemantics: "reference"
        defaultProperty: "stops"
        prototype: "QQuickShapeGradient"
        exports: [
            "QtQuick.Shapes/ConicalGradient 1.0",
            "QtQuick.Shapes/ConicalGradient 2.0",
            "QtQuick.Shapes/ConicalGradient 2.12",
            "QtQuick.Shapes/ConicalGradient 6.0"
        ]
        exportMetaObjectRevisions: [256, 512, 524, 1536]
        Property { name: "centerX"; type: "double"; read: "centerX"; write: "setCenterX" }
        Property { name: "centerY"; type: "double"; read: "centerY"; write: "setCenterY" }
        Property { name: "angle"; type: "double"; read: "angle"; write: "setAngle" }
    }
    Component {
        file: "private/qquickshape_p.h"
        name: "QQuickShapeGradient"
        accessSemantics: "reference"
        defaultProperty: "stops"
        prototype: "QQuickGradient"
        exports: [
            "QtQuick.Shapes/ShapeGradient 1.0",
            "QtQuick.Shapes/ShapeGradient 2.0",
            "QtQuick.Shapes/ShapeGradient 2.12",
            "QtQuick.Shapes/ShapeGradient 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 512, 524, 1536]
        Enum {
            name: "SpreadMode"
            values: ["PadSpread", "RepeatSpread", "ReflectSpread"]
        }
        Property { name: "spread"; type: "SpreadMode"; read: "spread"; write: "setSpread" }
    }
    Component {
        file: "private/qquickshape_p.h"
        name: "QQuickShapeLinearGradient"
        accessSemantics: "reference"
        defaultProperty: "stops"
        prototype: "QQuickShapeGradient"
        exports: [
            "QtQuick.Shapes/LinearGradient 1.0",
            "QtQuick.Shapes/LinearGradient 2.0",
            "QtQuick.Shapes/LinearGradient 2.12",
            "QtQuick.Shapes/LinearGradient 6.0"
        ]
        exportMetaObjectRevisions: [256, 512, 524, 1536]
        Property { name: "x1"; type: "double"; read: "x1"; write: "setX1" }
        Property { name: "y1"; type: "double"; read: "y1"; write: "setY1" }
        Property { name: "x2"; type: "double"; read: "x2"; write: "setX2" }
        Property { name: "y2"; type: "double"; read: "y2"; write: "setY2" }
    }
    Component {
        file: "private/qquickshape_p.h"
        name: "QQuickShapePath"
        accessSemantics: "reference"
        defaultProperty: "pathElements"
        prototype: "QQuickPath"
        exports: [
            "QtQuick.Shapes/ShapePath 1.0",
            "QtQuick.Shapes/ShapePath 1.14",
            "QtQuick.Shapes/ShapePath 2.0",
            "QtQuick.Shapes/ShapePath 2.14",
            "QtQuick.Shapes/ShapePath 6.0"
        ]
        exportMetaObjectRevisions: [256, 270, 512, 526, 1536]
        Enum {
            name: "FillRule"
            values: ["OddEvenFill", "WindingFill"]
        }
        Enum {
            name: "JoinStyle"
            values: ["MiterJoin", "BevelJoin", "RoundJoin"]
        }
        Enum {
            name: "CapStyle"
            values: ["FlatCap", "SquareCap", "RoundCap"]
        }
        Enum {
            name: "StrokeStyle"
            values: ["SolidLine", "DashLine"]
        }
        Property { name: "strokeColor"; type: "QColor"; read: "strokeColor"; write: "setStrokeColor" }
        Property { name: "strokeWidth"; type: "double"; read: "strokeWidth"; write: "setStrokeWidth" }
        Property { name: "fillColor"; type: "QColor"; read: "fillColor"; write: "setFillColor" }
        Property { name: "fillRule"; type: "FillRule"; read: "fillRule"; write: "setFillRule" }
        Property { name: "joinStyle"; type: "JoinStyle"; read: "joinStyle"; write: "setJoinStyle" }
        Property { name: "miterLimit"; type: "int"; read: "miterLimit"; write: "setMiterLimit" }
        Property { name: "capStyle"; type: "CapStyle"; read: "capStyle"; write: "setCapStyle" }
        Property {
            name: "strokeStyle"
            type: "StrokeStyle"
            read: "strokeStyle"
            write: "setStrokeStyle"
        }
        Property { name: "dashOffset"; type: "double"; read: "dashOffset"; write: "setDashOffset" }
        Property {
            name: "dashPattern"
            type: "QList<qreal>"
            read: "dashPattern"
            write: "setDashPattern"
        }
        Property {
            name: "fillGradient"
            type: "QQuickShapeGradient"
            isPointer: true
            read: "fillGradient"
            write: "setFillGradient"
        }
        Property { name: "scale"; revision: 270; type: "QSizeF"; read: "scale"; write: "setScale" }
        Signal { name: "shapePathChanged" }
        Method { name: "_q_fillGradientChanged" }
    }
    Component {
        file: "private/qquickshape_p.h"
        name: "QQuickShapeRadialGradient"
        accessSemantics: "reference"
        defaultProperty: "stops"
        prototype: "QQuickShapeGradient"
        exports: [
            "QtQuick.Shapes/RadialGradient 1.0",
            "QtQuick.Shapes/RadialGradient 2.0",
            "QtQuick.Shapes/RadialGradient 2.12",
            "QtQuick.Shapes/RadialGradient 6.0"
        ]
        exportMetaObjectRevisions: [256, 512, 524, 1536]
        Property { name: "centerX"; type: "double"; read: "centerX"; write: "setCenterX" }
        Property { name: "centerY"; type: "double"; read: "centerY"; write: "setCenterY" }
        Property { name: "centerRadius"; type: "double"; read: "centerRadius"; write: "setCenterRadius" }
        Property { name: "focalX"; type: "double"; read: "focalX"; write: "setFocalX" }
        Property { name: "focalY"; type: "double"; read: "focalY"; write: "setFocalY" }
        Property { name: "focalRadius"; type: "double"; read: "focalRadius"; write: "setFocalRadius" }
    }
}
