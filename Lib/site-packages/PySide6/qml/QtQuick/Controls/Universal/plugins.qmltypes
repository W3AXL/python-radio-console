import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qquickattachedobject_p.h"
        name: "QQuickAttachedObject"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "qquickuniversalstyle_p.h"
        name: "QQuickUniversalStyle"
        accessSemantics: "reference"
        prototype: "QQuickAttachedObject"
        exports: [
            "QtQuick.Controls.Universal/Universal 2.0",
            "QtQuick.Controls.Universal/Universal 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickUniversalStyle"
        Enum {
            name: "Theme"
            values: ["Light", "Dark", "System"]
        }
        Enum {
            name: "Color"
            values: [
                "Lime",
                "Green",
                "Emerald",
                "Teal",
                "Cyan",
                "Cobalt",
                "Indigo",
                "Violet",
                "Pink",
                "Magenta",
                "Crimson",
                "Red",
                "Orange",
                "Amber",
                "Yellow",
                "Brown",
                "Olive",
                "Steel",
                "Mauve",
                "Taupe"
            ]
        }
        Property { name: "theme"; type: "Theme"; read: "theme"; write: "setTheme" }
        Property { name: "accent"; type: "QVariant"; read: "accent"; write: "setAccent" }
        Property { name: "foreground"; type: "QVariant"; read: "foreground"; write: "setForeground" }
        Property { name: "background"; type: "QVariant"; read: "background"; write: "setBackground" }
        Property { name: "altHighColor"; type: "QColor"; isReadonly: true; read: "altHighColor" }
        Property { name: "altLowColor"; type: "QColor"; isReadonly: true; read: "altLowColor" }
        Property { name: "altMediumColor"; type: "QColor"; isReadonly: true; read: "altMediumColor" }
        Property {
            name: "altMediumHighColor"
            type: "QColor"
            isReadonly: true
            read: "altMediumHighColor"
        }
        Property {
            name: "altMediumLowColor"
            type: "QColor"
            isReadonly: true
            read: "altMediumLowColor"
        }
        Property { name: "baseHighColor"; type: "QColor"; isReadonly: true; read: "baseHighColor" }
        Property { name: "baseLowColor"; type: "QColor"; isReadonly: true; read: "baseLowColor" }
        Property { name: "baseMediumColor"; type: "QColor"; isReadonly: true; read: "baseMediumColor" }
        Property {
            name: "baseMediumHighColor"
            type: "QColor"
            isReadonly: true
            read: "baseMediumHighColor"
        }
        Property {
            name: "baseMediumLowColor"
            type: "QColor"
            isReadonly: true
            read: "baseMediumLowColor"
        }
        Property {
            name: "chromeAltLowColor"
            type: "QColor"
            isReadonly: true
            read: "chromeAltLowColor"
        }
        Property {
            name: "chromeBlackHighColor"
            type: "QColor"
            isReadonly: true
            read: "chromeBlackHighColor"
        }
        Property {
            name: "chromeBlackLowColor"
            type: "QColor"
            isReadonly: true
            read: "chromeBlackLowColor"
        }
        Property {
            name: "chromeBlackMediumLowColor"
            type: "QColor"
            isReadonly: true
            read: "chromeBlackMediumLowColor"
        }
        Property {
            name: "chromeBlackMediumColor"
            type: "QColor"
            isReadonly: true
            read: "chromeBlackMediumColor"
        }
        Property {
            name: "chromeDisabledHighColor"
            type: "QColor"
            isReadonly: true
            read: "chromeDisabledHighColor"
        }
        Property {
            name: "chromeDisabledLowColor"
            type: "QColor"
            isReadonly: true
            read: "chromeDisabledLowColor"
        }
        Property { name: "chromeHighColor"; type: "QColor"; isReadonly: true; read: "chromeHighColor" }
        Property { name: "chromeLowColor"; type: "QColor"; isReadonly: true; read: "chromeLowColor" }
        Property {
            name: "chromeMediumColor"
            type: "QColor"
            isReadonly: true
            read: "chromeMediumColor"
        }
        Property {
            name: "chromeMediumLowColor"
            type: "QColor"
            isReadonly: true
            read: "chromeMediumLowColor"
        }
        Property { name: "chromeWhiteColor"; type: "QColor"; isReadonly: true; read: "chromeWhiteColor" }
        Property { name: "listLowColor"; type: "QColor"; isReadonly: true; read: "listLowColor" }
        Property { name: "listMediumColor"; type: "QColor"; isReadonly: true; read: "listMediumColor" }
        Signal { name: "paletteChanged" }
        Method {
            name: "color"
            type: "QColor"
            Parameter { name: "color"; type: "Color" }
        }
    }
}
