import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qquickattachedobject_p.h"
        name: "QQuickAttachedObject"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "qquickmaterialstyle_p.h"
        name: "QQuickMaterialStyle"
        accessSemantics: "reference"
        prototype: "QQuickAttachedObject"
        exports: [
            "QtQuick.Controls.Material/Material 2.0",
            "QtQuick.Controls.Material/Material 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQuickMaterialStyle"
        Enum {
            name: "Theme"
            values: ["Light", "Dark", "System"]
        }
        Enum {
            name: "Variant"
            values: ["Normal", "Dense"]
        }
        Enum {
            name: "Color"
            values: [
                "Red",
                "Pink",
                "Purple",
                "DeepPurple",
                "Indigo",
                "Blue",
                "LightBlue",
                "Cyan",
                "Teal",
                "Green",
                "LightGreen",
                "Lime",
                "Yellow",
                "Amber",
                "Orange",
                "DeepOrange",
                "Brown",
                "Grey",
                "BlueGrey"
            ]
        }
        Enum {
            name: "Shade"
            values: [
                "Shade50",
                "Shade100",
                "Shade200",
                "Shade300",
                "Shade400",
                "Shade500",
                "Shade600",
                "Shade700",
                "Shade800",
                "Shade900",
                "ShadeA100",
                "ShadeA200",
                "ShadeA400",
                "ShadeA700"
            ]
        }
        Property { name: "theme"; type: "Theme"; read: "theme"; write: "setTheme" }
        Property { name: "primary"; type: "QVariant"; read: "primary"; write: "setPrimary" }
        Property { name: "accent"; type: "QVariant"; read: "accent"; write: "setAccent" }
        Property { name: "foreground"; type: "QVariant"; read: "foreground"; write: "setForeground" }
        Property { name: "background"; type: "QVariant"; read: "background"; write: "setBackground" }
        Property { name: "elevation"; type: "int"; read: "elevation"; write: "setElevation" }
        Property { name: "primaryColor"; type: "QColor"; isReadonly: true; read: "primaryColor" }
        Property { name: "accentColor"; type: "QColor"; isReadonly: true; read: "accentColor" }
        Property { name: "backgroundColor"; type: "QColor"; isReadonly: true; read: "backgroundColor" }
        Property { name: "primaryTextColor"; type: "QColor"; isReadonly: true; read: "primaryTextColor" }
        Property {
            name: "primaryHighlightedTextColor"
            type: "QColor"
            isReadonly: true
            read: "primaryHighlightedTextColor"
        }
        Property {
            name: "secondaryTextColor"
            type: "QColor"
            isReadonly: true
            read: "secondaryTextColor"
        }
        Property { name: "hintTextColor"; type: "QColor"; isReadonly: true; read: "hintTextColor" }
        Property {
            name: "textSelectionColor"
            type: "QColor"
            isReadonly: true
            read: "textSelectionColor"
        }
        Property { name: "dropShadowColor"; type: "QColor"; isReadonly: true; read: "dropShadowColor" }
        Property { name: "dividerColor"; type: "QColor"; isReadonly: true; read: "dividerColor" }
        Property { name: "iconColor"; type: "QColor"; isReadonly: true; read: "iconColor" }
        Property {
            name: "iconDisabledColor"
            type: "QColor"
            isReadonly: true
            read: "iconDisabledColor"
        }
        Property { name: "buttonColor"; type: "QColor"; isReadonly: true; read: "buttonColor" }
        Property {
            name: "buttonDisabledColor"
            type: "QColor"
            isReadonly: true
            read: "buttonDisabledColor"
        }
        Property {
            name: "highlightedButtonColor"
            type: "QColor"
            isReadonly: true
            read: "highlightedButtonColor"
        }
        Property { name: "frameColor"; type: "QColor"; isReadonly: true; read: "frameColor" }
        Property { name: "rippleColor"; type: "QColor"; isReadonly: true; read: "rippleColor" }
        Property {
            name: "highlightedRippleColor"
            type: "QColor"
            isReadonly: true
            read: "highlightedRippleColor"
        }
        Property {
            name: "switchUncheckedTrackColor"
            type: "QColor"
            isReadonly: true
            read: "switchUncheckedTrackColor"
        }
        Property {
            name: "switchCheckedTrackColor"
            type: "QColor"
            isReadonly: true
            read: "switchCheckedTrackColor"
        }
        Property {
            name: "switchUncheckedHandleColor"
            type: "QColor"
            isReadonly: true
            read: "switchUncheckedHandleColor"
        }
        Property {
            name: "switchCheckedHandleColor"
            type: "QColor"
            isReadonly: true
            read: "switchCheckedHandleColor"
        }
        Property {
            name: "switchDisabledTrackColor"
            type: "QColor"
            isReadonly: true
            read: "switchDisabledTrackColor"
        }
        Property {
            name: "switchDisabledHandleColor"
            type: "QColor"
            isReadonly: true
            read: "switchDisabledHandleColor"
        }
        Property { name: "scrollBarColor"; type: "QColor"; isReadonly: true; read: "scrollBarColor" }
        Property {
            name: "scrollBarHoveredColor"
            type: "QColor"
            isReadonly: true
            read: "scrollBarHoveredColor"
        }
        Property {
            name: "scrollBarPressedColor"
            type: "QColor"
            isReadonly: true
            read: "scrollBarPressedColor"
        }
        Property { name: "dialogColor"; type: "QColor"; isReadonly: true; read: "dialogColor" }
        Property {
            name: "backgroundDimColor"
            type: "QColor"
            isReadonly: true
            read: "backgroundDimColor"
        }
        Property {
            name: "listHighlightColor"
            type: "QColor"
            isReadonly: true
            read: "listHighlightColor"
        }
        Property { name: "tooltipColor"; type: "QColor"; isReadonly: true; read: "tooltipColor" }
        Property { name: "toolBarColor"; type: "QColor"; isReadonly: true; read: "toolBarColor" }
        Property { name: "toolTextColor"; type: "QColor"; isReadonly: true; read: "toolTextColor" }
        Property {
            name: "spinBoxDisabledIconColor"
            type: "QColor"
            isReadonly: true
            read: "spinBoxDisabledIconColor"
        }
        Property {
            name: "sliderDisabledColor"
            revision: 65295
            type: "QColor"
            isReadonly: true
            read: "sliderDisabledColor"
        }
        Property { name: "touchTarget"; type: "int"; isReadonly: true; read: "touchTarget" }
        Property { name: "buttonHeight"; type: "int"; isReadonly: true; read: "buttonHeight" }
        Property { name: "delegateHeight"; type: "int"; isReadonly: true; read: "delegateHeight" }
        Property {
            name: "dialogButtonBoxHeight"
            type: "int"
            isReadonly: true
            read: "dialogButtonBoxHeight"
        }
        Property {
            name: "frameVerticalPadding"
            type: "int"
            isReadonly: true
            read: "frameVerticalPadding"
        }
        Property { name: "menuItemHeight"; type: "int"; isReadonly: true; read: "menuItemHeight" }
        Property {
            name: "menuItemVerticalPadding"
            type: "int"
            isReadonly: true
            read: "menuItemVerticalPadding"
        }
        Property {
            name: "switchDelegateVerticalPadding"
            type: "int"
            isReadonly: true
            read: "switchDelegateVerticalPadding"
        }
        Property { name: "tooltipHeight"; type: "int"; isReadonly: true; read: "tooltipHeight" }
        Signal { name: "themeOrAccentChanged" }
        Method {
            name: "color"
            type: "QColor"
            Parameter { name: "color"; type: "Color" }
            Parameter { name: "shade"; type: "Shade" }
        }
        Method {
            name: "color"
            type: "QColor"
            Parameter { name: "color"; type: "Color" }
        }
        Method {
            name: "shade"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "shade"; type: "Shade" }
        }
    }
}
