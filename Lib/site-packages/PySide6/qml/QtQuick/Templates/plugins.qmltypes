import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/qquickabstractbutton_p.h"
        name: "QQuickAbstractButton"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/AbstractButton 2.0",
            "QtQuick.Templates/AbstractButton 2.1",
            "QtQuick.Templates/AbstractButton 2.2",
            "QtQuick.Templates/AbstractButton 2.3",
            "QtQuick.Templates/AbstractButton 2.4",
            "QtQuick.Templates/AbstractButton 2.5",
            "QtQuick.Templates/AbstractButton 2.7",
            "QtQuick.Templates/AbstractButton 2.11",
            "QtQuick.Templates/AbstractButton 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Enum {
            name: "Display"
            values: [
                "IconOnly",
                "TextOnly",
                "TextBesideIcon",
                "TextUnderIcon"
            ]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "down"; type: "bool"; read: "isDown"; write: "setDown" }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "isPressed" }
        Property { name: "checked"; type: "bool"; read: "isChecked"; write: "setChecked" }
        Property { name: "checkable"; type: "bool"; read: "isCheckable"; write: "setCheckable" }
        Property { name: "autoExclusive"; type: "bool"; read: "autoExclusive"; write: "setAutoExclusive" }
        Property { name: "autoRepeat"; type: "bool"; read: "autoRepeat"; write: "setAutoRepeat" }
        Property {
            name: "indicator"
            type: "QQuickItem"
            isPointer: true
            read: "indicator"
            write: "setIndicator"
        }
        Property { name: "icon"; revision: 515; type: "QQuickIcon"; read: "icon"; write: "setIcon" }
        Property { name: "display"; revision: 515; type: "Display"; read: "display"; write: "setDisplay" }
        Property {
            name: "action"
            revision: 515
            type: "QQuickAction"
            isPointer: true
            read: "action"
            write: "setAction"
        }
        Property {
            name: "autoRepeatDelay"
            revision: 516
            type: "int"
            read: "autoRepeatDelay"
            write: "setAutoRepeatDelay"
        }
        Property {
            name: "autoRepeatInterval"
            revision: 516
            type: "int"
            read: "autoRepeatInterval"
            write: "setAutoRepeatInterval"
        }
        Property { name: "pressX"; revision: 516; type: "double"; isReadonly: true; read: "pressX" }
        Property { name: "pressY"; revision: 516; type: "double"; isReadonly: true; read: "pressY" }
        Property {
            name: "implicitIndicatorWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitIndicatorWidth"
        }
        Property {
            name: "implicitIndicatorHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitIndicatorHeight"
        }
        Signal { name: "pressed" }
        Signal { name: "released" }
        Signal { name: "canceled" }
        Signal { name: "clicked" }
        Signal { name: "pressAndHold" }
        Signal { name: "doubleClicked" }
        Signal { name: "toggled"; revision: 514 }
        Signal { name: "iconChanged"; revision: 515 }
        Signal { name: "displayChanged"; revision: 515 }
        Signal { name: "actionChanged"; revision: 515 }
        Signal { name: "autoRepeatDelayChanged"; revision: 516 }
        Signal { name: "autoRepeatIntervalChanged"; revision: 516 }
        Signal { name: "pressXChanged"; revision: 516 }
        Signal { name: "pressYChanged"; revision: 516 }
        Signal { name: "implicitIndicatorWidthChanged"; revision: 517 }
        Signal { name: "implicitIndicatorHeightChanged"; revision: 517 }
        Method { name: "toggle" }
    }
    Component {
        file: "private/qquickaction_p.h"
        name: "QQuickAction"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick.Templates/Action 2.3",
            "QtQuick.Templates/Action 6.0"
        ]
        exportMetaObjectRevisions: [515, 1536]
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "icon"; type: "QQuickIcon"; read: "icon"; write: "setIcon" }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property { name: "checked"; type: "bool"; read: "isChecked"; write: "setChecked" }
        Property { name: "checkable"; type: "bool"; read: "isCheckable"; write: "setCheckable" }
        Property { name: "shortcut"; type: "QVariant"; read: "shortcut"; write: "setShortcut" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QQuickIcon" }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "checkedChanged"
            Parameter { name: "checked"; type: "bool" }
        }
        Signal {
            name: "checkableChanged"
            Parameter { name: "checkable"; type: "bool" }
        }
        Signal {
            name: "shortcutChanged"
            Parameter { name: "shortcut"; type: "QKeySequence" }
        }
        Signal {
            name: "toggled"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
        }
        Signal { name: "toggled" }
        Signal {
            name: "triggered"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
        }
        Signal { name: "triggered" }
        Method {
            name: "toggle"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
        }
        Method { name: "toggle" }
        Method {
            name: "trigger"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
        }
        Method { name: "trigger" }
    }
    Component {
        file: "private/qquickactiongroup_p.h"
        name: "QQuickActionGroup"
        accessSemantics: "reference"
        defaultProperty: "actions"
        prototype: "QObject"
        exports: [
            "QtQuick.Templates/ActionGroup 2.3",
            "QtQuick.Templates/ActionGroup 6.0"
        ]
        exportMetaObjectRevisions: [515, 1536]
        attachedType: "QQuickActionGroupAttached"
        Property {
            name: "checkedAction"
            type: "QQuickAction"
            isPointer: true
            read: "checkedAction"
            write: "setCheckedAction"
        }
        Property { name: "actions"; type: "QQuickAction"; isList: true; isReadonly: true; read: "actions" }
        Property { name: "exclusive"; type: "bool"; read: "isExclusive"; write: "setExclusive" }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Signal {
            name: "triggered"
            Parameter { name: "action"; type: "QQuickAction"; isPointer: true }
        }
        Method {
            name: "addAction"
            Parameter { name: "action"; type: "QQuickAction"; isPointer: true }
        }
        Method {
            name: "removeAction"
            Parameter { name: "action"; type: "QQuickAction"; isPointer: true }
        }
        Method { name: "_q_updateCurrent" }
    }
    Component {
        file: "private/qquickactiongroup_p.h"
        name: "QQuickActionGroupAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "group"
            type: "QQuickActionGroup"
            isPointer: true
            read: "group"
            write: "setGroup"
        }
    }
    Component {
        file: "private/qquickapplicationwindow_p.h"
        name: "QQuickApplicationWindow"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickWindowQmlImpl"
        exports: [
            "QtQuick.Templates/ApplicationWindow 2.0",
            "QtQuick.Templates/ApplicationWindow 2.1",
            "QtQuick.Templates/ApplicationWindow 2.2",
            "QtQuick.Templates/ApplicationWindow 2.3",
            "QtQuick.Templates/ApplicationWindow 2.13",
            "QtQuick.Templates/ApplicationWindow 2.14",
            "QtQuick.Templates/ApplicationWindow 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 514, 515, 525, 526, 1536]
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
        }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "contentItem"
        }
        Property {
            name: "contentData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "contentData"
        }
        Property {
            name: "activeFocusControl"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "activeFocusControl"
        }
        Property { name: "header"; type: "QQuickItem"; isPointer: true; read: "header"; write: "setHeader" }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true; read: "footer"; write: "setFooter" }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "locale"; type: "QLocale"; read: "locale"; write: "setLocale" }
        Property {
            name: "menuBar"
            revision: 515
            type: "QQuickItem"
            isPointer: true
            read: "menuBar"
            write: "setMenuBar"
        }
        Property {
            name: "palette"
            revision: 515
            type: "QQuickPalette"
            isPointer: true
            read: "palette"
            write: "setPalette"
        }
        Signal { name: "menuBarChanged"; revision: 515 }
        Method { name: "_q_updateActiveFocus" }
    }
    Component {
        file: "private/qquickbusyindicator_p.h"
        name: "QQuickBusyIndicator"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/BusyIndicator 2.0",
            "QtQuick.Templates/BusyIndicator 2.1",
            "QtQuick.Templates/BusyIndicator 2.4",
            "QtQuick.Templates/BusyIndicator 2.5",
            "QtQuick.Templates/BusyIndicator 2.7",
            "QtQuick.Templates/BusyIndicator 2.11",
            "QtQuick.Templates/BusyIndicator 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "running"; type: "bool"; read: "isRunning"; write: "setRunning" }
    }
    Component {
        file: "private/qquickbutton_p.h"
        name: "QQuickButton"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/Button 2.0",
            "QtQuick.Templates/Button 2.1",
            "QtQuick.Templates/Button 2.2",
            "QtQuick.Templates/Button 2.3",
            "QtQuick.Templates/Button 2.4",
            "QtQuick.Templates/Button 2.5",
            "QtQuick.Templates/Button 2.7",
            "QtQuick.Templates/Button 2.11",
            "QtQuick.Templates/Button 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "highlighted"; type: "bool"; read: "isHighlighted"; write: "setHighlighted" }
        Property { name: "flat"; type: "bool"; read: "isFlat"; write: "setFlat" }
    }
    Component {
        file: "private/qquickbuttongroup_p.h"
        name: "QQuickButtonGroup"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick.Templates/ButtonGroup 2.0",
            "QtQuick.Templates/ButtonGroup 2.1",
            "QtQuick.Templates/ButtonGroup 2.3",
            "QtQuick.Templates/ButtonGroup 2.4",
            "QtQuick.Templates/ButtonGroup 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 516, 1536]
        attachedType: "QQuickButtonGroupAttached"
        Property {
            name: "checkedButton"
            type: "QQuickAbstractButton"
            isPointer: true
            read: "checkedButton"
            write: "setCheckedButton"
        }
        Property {
            name: "buttons"
            type: "QQuickAbstractButton"
            isList: true
            isReadonly: true
            read: "buttons"
        }
        Property {
            name: "exclusive"
            revision: 515
            type: "bool"
            read: "isExclusive"
            write: "setExclusive"
        }
        Property {
            name: "checkState"
            revision: 516
            type: "Qt::CheckState"
            read: "checkState"
            write: "setCheckState"
        }
        Signal {
            name: "clicked"
            revision: 513
            Parameter { name: "button"; type: "QQuickAbstractButton"; isPointer: true }
        }
        Signal { name: "exclusiveChanged"; revision: 515 }
        Signal { name: "checkStateChanged"; revision: 516 }
        Method {
            name: "addButton"
            Parameter { name: "button"; type: "QQuickAbstractButton"; isPointer: true }
        }
        Method {
            name: "removeButton"
            Parameter { name: "button"; type: "QQuickAbstractButton"; isPointer: true }
        }
        Method { name: "_q_updateCurrent" }
    }
    Component {
        file: "private/qquickbuttongroup_p.h"
        name: "QQuickButtonGroupAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "group"
            type: "QQuickButtonGroup"
            isPointer: true
            read: "group"
            write: "setGroup"
        }
    }
    Component {
        file: "private/qquickcheckbox_p.h"
        name: "QQuickCheckBox"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/CheckBox 2.0",
            "QtQuick.Templates/CheckBox 2.1",
            "QtQuick.Templates/CheckBox 2.2",
            "QtQuick.Templates/CheckBox 2.3",
            "QtQuick.Templates/CheckBox 2.4",
            "QtQuick.Templates/CheckBox 2.5",
            "QtQuick.Templates/CheckBox 2.7",
            "QtQuick.Templates/CheckBox 2.11",
            "QtQuick.Templates/CheckBox 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "tristate"; type: "bool"; read: "isTristate"; write: "setTristate" }
        Property {
            name: "checkState"
            type: "Qt::CheckState"
            read: "checkState"
            write: "setCheckState"
        }
        Property { name: "nextCheckState"; revision: 516; type: "QJSValue"; write: "setNextCheckState" }
        Signal { name: "nextCheckStateChanged"; revision: 516 }
    }
    Component {
        file: "private/qquickcheckdelegate_p.h"
        name: "QQuickCheckDelegate"
        accessSemantics: "reference"
        prototype: "QQuickItemDelegate"
        exports: [
            "QtQuick.Templates/CheckDelegate 2.0",
            "QtQuick.Templates/CheckDelegate 2.1",
            "QtQuick.Templates/CheckDelegate 2.2",
            "QtQuick.Templates/CheckDelegate 2.3",
            "QtQuick.Templates/CheckDelegate 2.4",
            "QtQuick.Templates/CheckDelegate 2.5",
            "QtQuick.Templates/CheckDelegate 2.7",
            "QtQuick.Templates/CheckDelegate 2.11",
            "QtQuick.Templates/CheckDelegate 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "tristate"; type: "bool"; read: "isTristate"; write: "setTristate" }
        Property {
            name: "checkState"
            type: "Qt::CheckState"
            read: "checkState"
            write: "setCheckState"
        }
        Property { name: "nextCheckState"; revision: 516; type: "QJSValue"; write: "setNextCheckState" }
        Signal { name: "nextCheckStateChanged"; revision: 516 }
    }
    Component {
        file: "private/qquickcombobox_p.h"
        name: "QQuickComboBox"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/ComboBox 2.0",
            "QtQuick.Templates/ComboBox 2.1",
            "QtQuick.Templates/ComboBox 2.2",
            "QtQuick.Templates/ComboBox 2.4",
            "QtQuick.Templates/ComboBox 2.5",
            "QtQuick.Templates/ComboBox 2.7",
            "QtQuick.Templates/ComboBox 2.11",
            "QtQuick.Templates/ComboBox 2.14",
            "QtQuick.Templates/ComboBox 2.15",
            "QtQuick.Templates/ComboBox 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            516,
            517,
            519,
            523,
            526,
            527,
            1536
        ]
        Enum {
            name: "ImplicitContentWidthPolicy"
            values: [
                "ContentItemImplicitWidth",
                "WidestText",
                "WidestTextWhenCompleted"
            ]
        }
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property {
            name: "delegateModel"
            type: "QQmlInstanceModel"
            isReadonly: true
            isPointer: true
            read: "delegateModel"
        }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "isPressed" }
        Property { name: "highlightedIndex"; type: "int"; isReadonly: true; read: "highlightedIndex" }
        Property { name: "currentIndex"; type: "int"; read: "currentIndex"; write: "setCurrentIndex" }
        Property { name: "currentText"; type: "QString"; isReadonly: true; read: "currentText" }
        Property { name: "displayText"; type: "QString"; read: "displayText"; write: "setDisplayText" }
        Property { name: "textRole"; type: "QString"; read: "textRole"; write: "setTextRole" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property {
            name: "indicator"
            type: "QQuickItem"
            isPointer: true
            read: "indicator"
            write: "setIndicator"
        }
        Property { name: "popup"; type: "QQuickPopup"; isPointer: true; read: "popup"; write: "setPopup" }
        Property { name: "flat"; revision: 513; type: "bool"; read: "isFlat"; write: "setFlat" }
        Property { name: "down"; revision: 514; type: "bool"; read: "isDown"; write: "setDown" }
        Property { name: "editable"; revision: 514; type: "bool"; read: "isEditable"; write: "setEditable" }
        Property {
            name: "editText"
            revision: 514
            type: "QString"
            read: "editText"
            write: "setEditText"
        }
        Property {
            name: "validator"
            revision: 514
            type: "QValidator"
            isPointer: true
            read: "validator"
            write: "setValidator"
        }
        Property {
            name: "inputMethodHints"
            revision: 514
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
        }
        Property {
            name: "inputMethodComposing"
            revision: 514
            type: "bool"
            isReadonly: true
            read: "isInputMethodComposing"
        }
        Property {
            name: "acceptableInput"
            revision: 514
            type: "bool"
            isReadonly: true
            read: "hasAcceptableInput"
        }
        Property {
            name: "implicitIndicatorWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitIndicatorWidth"
        }
        Property {
            name: "implicitIndicatorHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitIndicatorHeight"
        }
        Property {
            name: "currentValue"
            revision: 526
            type: "QVariant"
            isReadonly: true
            read: "currentValue"
        }
        Property {
            name: "valueRole"
            revision: 526
            type: "QString"
            read: "valueRole"
            write: "setValueRole"
        }
        Property {
            name: "selectTextByMouse"
            revision: 527
            type: "bool"
            read: "selectTextByMouse"
            write: "setSelectTextByMouse"
        }
        Property {
            name: "implicitContentWidthPolicy"
            revision: 1536
            type: "ImplicitContentWidthPolicy"
            read: "implicitContentWidthPolicy"
            write: "setImplicitContentWidthPolicy"
        }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "highlighted"
            Parameter { name: "index"; type: "int" }
        }
        Signal { name: "flatChanged"; revision: 513 }
        Signal { name: "accepted"; revision: 514 }
        Signal { name: "downChanged"; revision: 514 }
        Signal { name: "editableChanged"; revision: 514 }
        Signal { name: "editTextChanged"; revision: 514 }
        Signal { name: "validatorChanged"; revision: 514 }
        Signal { name: "inputMethodHintsChanged"; revision: 514 }
        Signal { name: "inputMethodComposingChanged"; revision: 514 }
        Signal { name: "acceptableInputChanged"; revision: 514 }
        Signal { name: "implicitIndicatorWidthChanged"; revision: 517 }
        Signal { name: "implicitIndicatorHeightChanged"; revision: 517 }
        Signal { name: "valueRoleChanged"; revision: 526 }
        Signal { name: "currentValueChanged"; revision: 526 }
        Signal { name: "selectTextByMouseChanged"; revision: 527 }
        Signal { name: "implicitContentWidthPolicyChanged"; revision: 1536 }
        Method { name: "incrementCurrentIndex" }
        Method { name: "decrementCurrentIndex" }
        Method { name: "selectAll"; revision: 514 }
        Method {
            name: "textAt"
            type: "QString"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "find"
            type: "int"
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "find"
            type: "int"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "valueAt"
            revision: 526
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOfValue"
            revision: 526
            type: "int"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "private/qquickcontainer_p.h"
        name: "QQuickContainer"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/Container 2.0",
            "QtQuick.Templates/Container 2.1",
            "QtQuick.Templates/Container 2.3",
            "QtQuick.Templates/Container 2.4",
            "QtQuick.Templates/Container 2.5",
            "QtQuick.Templates/Container 2.7",
            "QtQuick.Templates/Container 2.11",
            "QtQuick.Templates/Container 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 516, 517, 519, 523, 1536]
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Property { name: "contentModel"; type: "QVariant"; isReadonly: true; read: "contentModel" }
        Property {
            name: "contentData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "contentData"
        }
        Property {
            name: "contentChildren"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "contentChildren"
        }
        Property { name: "currentIndex"; type: "int"; read: "currentIndex"; write: "setCurrentIndex" }
        Property {
            name: "currentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "currentItem"
        }
        Property {
            name: "contentWidth"
            revision: 517
            type: "double"
            read: "contentWidth"
            write: "setContentWidth"
        }
        Property {
            name: "contentHeight"
            revision: 517
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Signal { name: "contentWidthChanged"; revision: 517 }
        Signal { name: "contentHeightChanged"; revision: 517 }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "incrementCurrentIndex"; revision: 513 }
        Method { name: "decrementCurrentIndex"; revision: 513 }
        Method { name: "_q_currentIndexChanged" }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "insertItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "moveItem"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
        }
        Method {
            name: "removeItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "takeItem"
            revision: 515
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquickcontrol_p.h"
        name: "QQuickControl"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick.Templates/Control 2.0",
            "QtQuick.Templates/Control 2.1",
            "QtQuick.Templates/Control 2.4",
            "QtQuick.Templates/Control 2.5",
            "QtQuick.Templates/Control 2.7",
            "QtQuick.Templates/Control 2.11",
            "QtQuick.Templates/Control 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "availableWidth"; type: "double"; isReadonly: true; read: "availableWidth" }
        Property { name: "availableHeight"; type: "double"; isReadonly: true; read: "availableHeight" }
        Property { name: "padding"; type: "double"; read: "padding"; write: "setPadding" }
        Property { name: "topPadding"; type: "double"; read: "topPadding"; write: "setTopPadding" }
        Property { name: "leftPadding"; type: "double"; read: "leftPadding"; write: "setLeftPadding" }
        Property { name: "rightPadding"; type: "double"; read: "rightPadding"; write: "setRightPadding" }
        Property {
            name: "bottomPadding"
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Property { name: "spacing"; type: "double"; read: "spacing"; write: "setSpacing" }
        Property { name: "locale"; type: "QLocale"; read: "locale"; write: "setLocale" }
        Property { name: "mirrored"; type: "bool"; isReadonly: true; read: "isMirrored" }
        Property {
            name: "focusPolicy"
            type: "Qt::FocusPolicy"
            read: "focusPolicy"
            write: "setFocusPolicy"
        }
        Property {
            name: "focusReason"
            type: "Qt::FocusReason"
            read: "focusReason"
            write: "setFocusReason"
        }
        Property { name: "visualFocus"; type: "bool"; isReadonly: true; read: "hasVisualFocus" }
        Property { name: "hovered"; type: "bool"; isReadonly: true; read: "isHovered" }
        Property { name: "hoverEnabled"; type: "bool"; read: "isHoverEnabled"; write: "setHoverEnabled" }
        Property { name: "wheelEnabled"; type: "bool"; read: "isWheelEnabled"; write: "setWheelEnabled" }
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
        }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isPointer: true
            read: "contentItem"
            write: "setContentItem"
        }
        Property {
            name: "baselineOffset"
            type: "double"
            read: "baselineOffset"
            write: "setBaselineOffset"
        }
        Property {
            name: "horizontalPadding"
            revision: 517
            type: "double"
            read: "horizontalPadding"
            write: "setHorizontalPadding"
        }
        Property {
            name: "verticalPadding"
            revision: 517
            type: "double"
            read: "verticalPadding"
            write: "setVerticalPadding"
        }
        Property {
            name: "implicitContentWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitContentWidth"
        }
        Property {
            name: "implicitContentHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitContentHeight"
        }
        Property {
            name: "implicitBackgroundWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundWidth"
        }
        Property {
            name: "implicitBackgroundHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundHeight"
        }
        Property { name: "topInset"; revision: 517; type: "double"; read: "topInset"; write: "setTopInset" }
        Property {
            name: "leftInset"
            revision: 517
            type: "double"
            read: "leftInset"
            write: "setLeftInset"
        }
        Property {
            name: "rightInset"
            revision: 517
            type: "double"
            read: "rightInset"
            write: "setRightInset"
        }
        Property {
            name: "bottomInset"
            revision: 517
            type: "double"
            read: "bottomInset"
            write: "setBottomInset"
        }
        Signal { name: "horizontalPaddingChanged"; revision: 517 }
        Signal { name: "verticalPaddingChanged"; revision: 517 }
        Signal { name: "implicitContentWidthChanged"; revision: 517 }
        Signal { name: "implicitContentHeightChanged"; revision: 517 }
        Signal { name: "implicitBackgroundWidthChanged"; revision: 517 }
        Signal { name: "implicitBackgroundHeightChanged"; revision: 517 }
        Signal { name: "topInsetChanged"; revision: 517 }
        Signal { name: "leftInsetChanged"; revision: 517 }
        Signal { name: "rightInsetChanged"; revision: 517 }
        Signal { name: "bottomInsetChanged"; revision: 517 }
    }
    Component {
        file: "private/qquickdelaybutton_p.h"
        name: "QQuickDelayButton"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/DelayButton 2.2",
            "QtQuick.Templates/DelayButton 2.3",
            "QtQuick.Templates/DelayButton 2.4",
            "QtQuick.Templates/DelayButton 2.5",
            "QtQuick.Templates/DelayButton 2.7",
            "QtQuick.Templates/DelayButton 2.11",
            "QtQuick.Templates/DelayButton 6.0"
        ]
        exportMetaObjectRevisions: [514, 515, 516, 517, 519, 523, 1536]
        Property { name: "delay"; type: "int"; read: "delay"; write: "setDelay" }
        Property { name: "progress"; type: "double"; read: "progress"; write: "setProgress" }
        Property {
            name: "transition"
            type: "QQuickTransition"
            isPointer: true
            read: "transition"
            write: "setTransition"
        }
        Signal { name: "activated" }
    }
    Component {
        file: "private/qquickdial_p.h"
        name: "QQuickDial"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/Dial 2.0",
            "QtQuick.Templates/Dial 2.1",
            "QtQuick.Templates/Dial 2.2",
            "QtQuick.Templates/Dial 2.4",
            "QtQuick.Templates/Dial 2.5",
            "QtQuick.Templates/Dial 2.7",
            "QtQuick.Templates/Dial 2.11",
            "QtQuick.Templates/Dial 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 514, 516, 517, 519, 523, 1536]
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapAlways", "SnapOnRelease"]
        }
        Enum {
            name: "InputMode"
            values: ["Circular", "Horizontal", "Vertical"]
        }
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
        Property { name: "value"; type: "double"; read: "value"; write: "setValue" }
        Property { name: "position"; type: "double"; isReadonly: true; read: "position" }
        Property { name: "angle"; type: "double"; isReadonly: true; read: "angle" }
        Property { name: "stepSize"; type: "double"; read: "stepSize"; write: "setStepSize" }
        Property { name: "snapMode"; type: "SnapMode"; read: "snapMode"; write: "setSnapMode" }
        Property { name: "wrap"; type: "bool"; read: "wrap"; write: "setWrap" }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "isPressed" }
        Property { name: "handle"; type: "QQuickItem"; isPointer: true; read: "handle"; write: "setHandle" }
        Property { name: "live"; revision: 514; type: "bool"; read: "live"; write: "setLive" }
        Property {
            name: "inputMode"
            revision: 517
            type: "InputMode"
            read: "inputMode"
            write: "setInputMode"
        }
        Signal { name: "moved"; revision: 514 }
        Signal { name: "liveChanged"; revision: 514 }
        Signal { name: "inputModeChanged"; revision: 517 }
        Method { name: "increase" }
        Method { name: "decrease" }
    }
    Component {
        file: "private/qquickdialog_p.h"
        name: "QQuickDialog"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPopup"
        exports: [
            "QtQuick.Templates/Dialog 2.1",
            "QtQuick.Templates/Dialog 2.3",
            "QtQuick.Templates/Dialog 2.5",
            "QtQuick.Templates/Dialog 6.0"
        ]
        exportMetaObjectRevisions: [513, 515, 517, 1536]
        Enum {
            name: "StandardCode"
            values: ["Rejected", "Accepted"]
        }
        Property { name: "title"; type: "QString"; read: "title"; write: "setTitle" }
        Property { name: "header"; type: "QQuickItem"; isPointer: true; read: "header"; write: "setHeader" }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true; read: "footer"; write: "setFooter" }
        Property {
            name: "standardButtons"
            type: "QPlatformDialogHelper::StandardButtons"
            read: "standardButtons"
            write: "setStandardButtons"
        }
        Property { name: "result"; revision: 515; type: "int"; read: "result"; write: "setResult" }
        Property {
            name: "implicitHeaderWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHeaderWidth"
        }
        Property {
            name: "implicitHeaderHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHeaderHeight"
        }
        Property {
            name: "implicitFooterWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitFooterWidth"
        }
        Property {
            name: "implicitFooterHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitFooterHeight"
        }
        Signal { name: "accepted" }
        Signal { name: "rejected" }
        Signal { name: "applied"; revision: 515 }
        Signal { name: "reset"; revision: 515 }
        Signal { name: "discarded"; revision: 515 }
        Signal { name: "helpRequested"; revision: 515 }
        Signal { name: "resultChanged"; revision: 515 }
        Method { name: "accept" }
        Method { name: "reject" }
        Method {
            name: "done"
            Parameter { name: "result"; type: "int" }
        }
        Method {
            name: "standardButton"
            revision: 515
            type: "QQuickAbstractButton*"
            Parameter { name: "button"; type: "QPlatformDialogHelper::StandardButton" }
        }
    }
    Component {
        file: "private/qquickdialogbuttonbox_p.h"
        name: "QQuickDialogButtonBox"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: [
            "QtQuick.Templates/DialogButtonBox 2.1",
            "QtQuick.Templates/DialogButtonBox 2.3",
            "QtQuick.Templates/DialogButtonBox 2.4",
            "QtQuick.Templates/DialogButtonBox 2.5",
            "QtQuick.Templates/DialogButtonBox 2.7",
            "QtQuick.Templates/DialogButtonBox 2.11",
            "QtQuick.Templates/DialogButtonBox 6.0"
        ]
        exportMetaObjectRevisions: [513, 515, 516, 517, 519, 523, 1536]
        attachedType: "QQuickDialogButtonBoxAttached"
        Enum {
            name: "Position"
            values: ["Header", "Footer"]
        }
        Property { name: "position"; type: "Position"; read: "position"; write: "setPosition" }
        Property { name: "alignment"; type: "Qt::Alignment"; read: "alignment"; write: "setAlignment" }
        Property {
            name: "standardButtons"
            type: "QPlatformDialogHelper::StandardButtons"
            read: "standardButtons"
            write: "setStandardButtons"
        }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property {
            name: "buttonLayout"
            revision: 517
            type: "QPlatformDialogHelper::ButtonLayout"
            read: "buttonLayout"
            write: "setButtonLayout"
        }
        Signal { name: "accepted" }
        Signal { name: "rejected" }
        Signal { name: "helpRequested" }
        Signal {
            name: "clicked"
            Parameter { name: "button"; type: "QQuickAbstractButton"; isPointer: true }
        }
        Signal { name: "applied"; revision: 515 }
        Signal { name: "reset"; revision: 515 }
        Signal { name: "discarded"; revision: 515 }
        Signal { name: "buttonLayoutChanged"; revision: 517 }
        Method {
            name: "standardButton"
            type: "QQuickAbstractButton*"
            Parameter { name: "button"; type: "QPlatformDialogHelper::StandardButton" }
        }
    }
    Component {
        file: "private/qquickdialogbuttonbox_p.h"
        name: "QQuickDialogButtonBoxAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "buttonBox"
            type: "QQuickDialogButtonBox"
            isReadonly: true
            isPointer: true
            read: "buttonBox"
        }
        Property {
            name: "buttonRole"
            type: "QPlatformDialogHelper::ButtonRole"
            read: "buttonRole"
            write: "setButtonRole"
        }
    }
    Component {
        file: "private/qquickdrawer_p.h"
        name: "QQuickDrawer"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPopup"
        exports: [
            "QtQuick.Templates/Drawer 2.0",
            "QtQuick.Templates/Drawer 2.1",
            "QtQuick.Templates/Drawer 2.2",
            "QtQuick.Templates/Drawer 2.3",
            "QtQuick.Templates/Drawer 2.5",
            "QtQuick.Templates/Drawer 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 514, 515, 517, 1536]
        Property { name: "edge"; type: "Qt::Edge"; read: "edge"; write: "setEdge" }
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "dragMargin"; type: "double"; read: "dragMargin"; write: "setDragMargin" }
        Property {
            name: "interactive"
            revision: 514
            type: "bool"
            read: "isInteractive"
            write: "setInteractive"
        }
        Signal { name: "interactiveChanged"; revision: 514 }
    }
    Component {
        file: "private/qquickframe_p.h"
        name: "QQuickFrame"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPane"
        exports: [
            "QtQuick.Templates/Frame 2.0",
            "QtQuick.Templates/Frame 2.1",
            "QtQuick.Templates/Frame 2.4",
            "QtQuick.Templates/Frame 2.5",
            "QtQuick.Templates/Frame 2.7",
            "QtQuick.Templates/Frame 2.11",
            "QtQuick.Templates/Frame 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
    }
    Component {
        file: "private/qquickgroupbox_p.h"
        name: "QQuickGroupBox"
        accessSemantics: "reference"
        prototype: "QQuickFrame"
        exports: [
            "QtQuick.Templates/GroupBox 2.0",
            "QtQuick.Templates/GroupBox 2.1",
            "QtQuick.Templates/GroupBox 2.4",
            "QtQuick.Templates/GroupBox 2.5",
            "QtQuick.Templates/GroupBox 2.7",
            "QtQuick.Templates/GroupBox 2.11",
            "QtQuick.Templates/GroupBox 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "title"; type: "QString"; read: "title"; write: "setTitle" }
        Property { name: "label"; type: "QQuickItem"; isPointer: true; read: "label"; write: "setLabel" }
        Property {
            name: "implicitLabelWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitLabelWidth"
        }
        Property {
            name: "implicitLabelHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitLabelHeight"
        }
        Signal { name: "implicitLabelWidthChanged"; revision: 517 }
        Signal { name: "implicitLabelHeightChanged"; revision: 517 }
    }
    Component {
        file: "private/qquickheaderview_p.h"
        name: "QQuickHeaderViewBase"
        accessSemantics: "reference"
        prototype: "QQuickTableView"
        Property { name: "textRole"; type: "QString"; read: "textRole"; write: "setTextRole" }
    }
    Component {
        file: "private/qquickheaderview_p.h"
        name: "QQuickHorizontalHeaderView"
        accessSemantics: "reference"
        prototype: "QQuickHeaderViewBase"
        exports: [
            "QtQuick.Templates/HorizontalHeaderView 2.15",
            "QtQuick.Templates/HorizontalHeaderView 6.0"
        ]
        exportMetaObjectRevisions: [527, 1536]
    }
    Component {
        file: "private/qquickicon_p.h"
        name: "QQuickIcon"
        accessSemantics: "value"
        Property { name: "name"; type: "QString"; read: "name"; write: "setName" }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource" }
        Property { name: "width"; type: "int"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "int"; read: "height"; write: "setHeight" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property { name: "cache"; type: "bool"; read: "cache"; write: "setCache" }
    }
    Component {
        file: "qquickimplicitsizeitem_p.h"
        name: "QQuickImplicitSizeItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "implicitWidth"; type: "double"; isReadonly: true; read: "implicitWidth" }
        Property { name: "implicitHeight"; type: "double"; isReadonly: true; read: "implicitHeight" }
    }
    Component {
        file: "private/qquickindicatorbutton_p.h"
        name: "QQuickIndicatorButton"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "pressed"; type: "bool"; read: "isPressed"; write: "setPressed" }
        Property {
            name: "indicator"
            type: "QQuickItem"
            isPointer: true
            read: "indicator"
            write: "setIndicator"
        }
        Property { name: "hovered"; revision: 513; type: "bool"; read: "isHovered"; write: "setHovered" }
        Property {
            name: "implicitIndicatorWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitIndicatorWidth"
        }
        Property {
            name: "implicitIndicatorHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitIndicatorHeight"
        }
        Signal { name: "hoveredChanged"; revision: 513 }
        Signal { name: "implicitIndicatorWidthChanged"; revision: 517 }
        Signal { name: "implicitIndicatorHeightChanged"; revision: 517 }
    }
    Component {
        file: "private/qquickitemdelegate_p.h"
        name: "QQuickItemDelegate"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/ItemDelegate 2.0",
            "QtQuick.Templates/ItemDelegate 2.1",
            "QtQuick.Templates/ItemDelegate 2.2",
            "QtQuick.Templates/ItemDelegate 2.3",
            "QtQuick.Templates/ItemDelegate 2.4",
            "QtQuick.Templates/ItemDelegate 2.5",
            "QtQuick.Templates/ItemDelegate 2.7",
            "QtQuick.Templates/ItemDelegate 2.11",
            "QtQuick.Templates/ItemDelegate 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "highlighted"; type: "bool"; read: "isHighlighted"; write: "setHighlighted" }
    }
    Component {
        file: "private/qquickcontrol_p.h"
        name: "QQuickItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        Enum {
            name: "Flags"
            alias: "Flag"
            isFlag: true
            values: [
                "ItemClipsChildrenToShape",
                "ItemAcceptsInputMethod",
                "ItemIsFocusScope",
                "ItemHasContents",
                "ItemAcceptsDrops"
            ]
        }
        Enum {
            name: "TransformOrigin"
            values: [
                "TopLeft",
                "Top",
                "TopRight",
                "Left",
                "Center",
                "Right",
                "BottomLeft",
                "Bottom",
                "BottomRight"
            ]
        }
        Property {
            name: "parent"
            type: "QQuickItem"
            isPointer: true
            read: "parentItem"
            write: "setParentItem"
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true; read: "data" }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true; read: "resources" }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true; read: "children" }
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "z"; type: "double"; read: "z"; write: "setZ" }
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "double"; read: "height"; write: "setHeight" }
        Property { name: "opacity"; type: "double"; read: "opacity"; write: "setOpacity" }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property {
            name: "palette"
            revision: 1536
            type: "QQuickPalette"
            isPointer: true
            read: "palette"
            write: "setPalette"
        }
        Property {
            name: "visibleChildren"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "visibleChildren"
        }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true; read: "states" }
        Property {
            name: "transitions"
            type: "QQuickTransition"
            isList: true
            isReadonly: true
            read: "transitions"
        }
        Property { name: "state"; type: "QString"; read: "state"; write: "setState" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true; read: "childrenRect" }
        Property {
            name: "anchors"
            type: "QQuickAnchors"
            isReadonly: true
            isPointer: true
            read: "anchors"
        }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true; read: "left" }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true; read: "right" }
        Property {
            name: "horizontalCenter"
            type: "QQuickAnchorLine"
            isReadonly: true
            read: "horizontalCenter"
        }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true; read: "top" }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true; read: "bottom" }
        Property {
            name: "verticalCenter"
            type: "QQuickAnchorLine"
            isReadonly: true
            read: "verticalCenter"
        }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true; read: "baseline" }
        Property {
            name: "baselineOffset"
            type: "double"
            read: "baselineOffset"
            write: "setBaselineOffset"
        }
        Property { name: "clip"; type: "bool"; read: "clip"; write: "setClip" }
        Property { name: "focus"; type: "bool"; read: "hasFocus"; write: "setFocus" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true; read: "hasActiveFocus" }
        Property {
            name: "activeFocusOnTab"
            revision: 513
            type: "bool"
            read: "activeFocusOnTab"
            write: "setActiveFocusOnTab"
        }
        Property { name: "rotation"; type: "double"; read: "rotation"; write: "setRotation" }
        Property { name: "scale"; type: "double"; read: "scale"; write: "setScale" }
        Property {
            name: "transformOrigin"
            type: "TransformOrigin"
            read: "transformOrigin"
            write: "setTransformOrigin"
        }
        Property {
            name: "transformOriginPoint"
            type: "QPointF"
            isReadonly: true
            read: "transformOriginPoint"
        }
        Property {
            name: "transform"
            type: "QQuickTransform"
            isList: true
            isReadonly: true
            read: "transform"
        }
        Property { name: "smooth"; type: "bool"; read: "smooth"; write: "setSmooth" }
        Property { name: "antialiasing"; type: "bool"; read: "antialiasing"; write: "setAntialiasing" }
        Property {
            name: "implicitWidth"
            type: "double"
            read: "implicitWidth"
            write: "setImplicitWidth"
        }
        Property {
            name: "implicitHeight"
            type: "double"
            read: "implicitHeight"
            write: "setImplicitHeight"
        }
        Property {
            name: "containmentMask"
            revision: 523
            type: "QObject"
            isPointer: true
            read: "containmentMask"
            write: "setContainmentMask"
        }
        Property {
            name: "layer"
            type: "QQuickItemLayer"
            isReadonly: true
            isPointer: true
            read: "layer"
        }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "QString" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 513
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 513
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "containmentMaskChanged"; revision: 523 }
        Signal { name: "paletteChanged"; revision: 1536 }
        Signal { name: "paletteCreated"; revision: 1536 }
        Method { name: "update" }
        Method {
            name: "_q_resourceObjectDeleted"
            Parameter { type: "QObject"; isPointer: true }
        }
        Method {
            name: "_q_createJSWrapper"
            type: "qulonglong"
            Parameter { type: "QV4::ExecutionEngine"; isPointer: true }
        }
        Method {
            name: "grabToImage"
            revision: 516
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 516
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapFromGlobal"
            revision: 519
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToGlobal"
            revision: 519
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 513
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 513; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "private/qquicklabel_p.h"
        name: "QQuickLabel"
        accessSemantics: "reference"
        prototype: "QQuickText"
        exports: [
            "QtQuick.Templates/Label 2.0",
            "QtQuick.Templates/Label 2.1",
            "QtQuick.Templates/Label 2.2",
            "QtQuick.Templates/Label 2.3",
            "QtQuick.Templates/Label 2.4",
            "QtQuick.Templates/Label 2.5",
            "QtQuick.Templates/Label 2.6",
            "QtQuick.Templates/Label 2.7",
            "QtQuick.Templates/Label 2.9",
            "QtQuick.Templates/Label 2.10",
            "QtQuick.Templates/Label 2.11",
            "QtQuick.Templates/Label 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            521,
            522,
            523,
            1536
        ]
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
        }
        Property {
            name: "implicitBackgroundWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundWidth"
        }
        Property {
            name: "implicitBackgroundHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundHeight"
        }
        Property { name: "topInset"; revision: 517; type: "double"; read: "topInset"; write: "setTopInset" }
        Property {
            name: "leftInset"
            revision: 517
            type: "double"
            read: "leftInset"
            write: "setLeftInset"
        }
        Property {
            name: "rightInset"
            revision: 517
            type: "double"
            read: "rightInset"
            write: "setRightInset"
        }
        Property {
            name: "bottomInset"
            revision: 517
            type: "double"
            read: "bottomInset"
            write: "setBottomInset"
        }
        Signal { name: "implicitBackgroundWidthChanged"; revision: 517 }
        Signal { name: "implicitBackgroundHeightChanged"; revision: 517 }
        Signal { name: "topInsetChanged"; revision: 517 }
        Signal { name: "leftInsetChanged"; revision: 517 }
        Signal { name: "rightInsetChanged"; revision: 517 }
        Signal { name: "bottomInsetChanged"; revision: 517 }
    }
    Component {
        file: "private/qquickmenu_p.h"
        name: "QQuickMenu"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPopup"
        exports: [
            "QtQuick.Templates/Menu 2.0",
            "QtQuick.Templates/Menu 2.1",
            "QtQuick.Templates/Menu 2.3",
            "QtQuick.Templates/Menu 2.5",
            "QtQuick.Templates/Menu 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 517, 1536]
        Property { name: "contentModel"; type: "QVariant"; isReadonly: true; read: "contentModel" }
        Property {
            name: "contentData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "contentData"
        }
        Property { name: "title"; type: "QString"; read: "title"; write: "setTitle" }
        Property { name: "count"; revision: 515; type: "int"; isReadonly: true; read: "count" }
        Property { name: "cascade"; revision: 515; type: "bool"; read: "cascade"; write: "setCascade" }
        Property { name: "overlap"; revision: 515; type: "double"; read: "overlap"; write: "setOverlap" }
        Property {
            name: "delegate"
            revision: 515
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property {
            name: "currentIndex"
            revision: 515
            type: "int"
            read: "currentIndex"
            write: "setCurrentIndex"
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "QString" }
        }
        Signal { name: "countChanged"; revision: 515 }
        Signal {
            name: "cascadeChanged"
            revision: 515
            Parameter { name: "cascade"; type: "bool" }
        }
        Signal { name: "overlapChanged"; revision: 515 }
        Signal { name: "delegateChanged"; revision: 515 }
        Signal { name: "currentIndexChanged"; revision: 515 }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "insertItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "moveItem"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
        }
        Method {
            name: "removeItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "takeItem"
            revision: 515
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "menuAt"
            revision: 515
            type: "QQuickMenu*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addMenu"
            revision: 515
            Parameter { name: "menu"; type: "QQuickMenu"; isPointer: true }
        }
        Method {
            name: "insertMenu"
            revision: 515
            Parameter { name: "index"; type: "int" }
            Parameter { name: "menu"; type: "QQuickMenu"; isPointer: true }
        }
        Method {
            name: "removeMenu"
            revision: 515
            Parameter { name: "menu"; type: "QQuickMenu"; isPointer: true }
        }
        Method {
            name: "takeMenu"
            revision: 515
            type: "QQuickMenu*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "actionAt"
            revision: 515
            type: "QQuickAction*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addAction"
            revision: 515
            Parameter { name: "action"; type: "QQuickAction"; isPointer: true }
        }
        Method {
            name: "insertAction"
            revision: 515
            Parameter { name: "index"; type: "int" }
            Parameter { name: "action"; type: "QQuickAction"; isPointer: true }
        }
        Method {
            name: "removeAction"
            revision: 515
            Parameter { name: "action"; type: "QQuickAction"; isPointer: true }
        }
        Method {
            name: "takeAction"
            revision: 515
            type: "QQuickAction*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "popup"
            revision: 515
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "dismiss"; revision: 515 }
    }
    Component {
        file: "private/qquickmenubar_p.h"
        name: "QQuickMenuBar"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: [
            "QtQuick.Templates/MenuBar 2.3",
            "QtQuick.Templates/MenuBar 2.4",
            "QtQuick.Templates/MenuBar 2.5",
            "QtQuick.Templates/MenuBar 2.7",
            "QtQuick.Templates/MenuBar 2.11",
            "QtQuick.Templates/MenuBar 6.0"
        ]
        exportMetaObjectRevisions: [515, 516, 517, 519, 523, 1536]
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property { name: "contentWidth"; type: "double"; read: "contentWidth"; write: "setContentWidth" }
        Property {
            name: "contentHeight"
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property { name: "menus"; type: "QQuickMenu"; isList: true; isReadonly: true; read: "menus" }
        Property {
            name: "contentData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "contentData"
        }
        Method {
            name: "menuAt"
            type: "QQuickMenu*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addMenu"
            Parameter { name: "menu"; type: "QQuickMenu"; isPointer: true }
        }
        Method {
            name: "insertMenu"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "menu"; type: "QQuickMenu"; isPointer: true }
        }
        Method {
            name: "removeMenu"
            Parameter { name: "menu"; type: "QQuickMenu"; isPointer: true }
        }
        Method {
            name: "takeMenu"
            type: "QQuickMenu*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquickmenubaritem_p.h"
        name: "QQuickMenuBarItem"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/MenuBarItem 2.3",
            "QtQuick.Templates/MenuBarItem 2.4",
            "QtQuick.Templates/MenuBarItem 2.5",
            "QtQuick.Templates/MenuBarItem 2.7",
            "QtQuick.Templates/MenuBarItem 2.11",
            "QtQuick.Templates/MenuBarItem 6.0"
        ]
        exportMetaObjectRevisions: [515, 516, 517, 519, 523, 1536]
        Property {
            name: "menuBar"
            type: "QQuickMenuBar"
            isReadonly: true
            isPointer: true
            read: "menuBar"
        }
        Property { name: "menu"; type: "QQuickMenu"; isPointer: true; read: "menu"; write: "setMenu" }
        Property { name: "highlighted"; type: "bool"; read: "isHighlighted"; write: "setHighlighted" }
        Signal { name: "triggered" }
    }
    Component {
        file: "private/qquickmenuitem_p.h"
        name: "QQuickMenuItem"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/MenuItem 2.0",
            "QtQuick.Templates/MenuItem 2.1",
            "QtQuick.Templates/MenuItem 2.2",
            "QtQuick.Templates/MenuItem 2.3",
            "QtQuick.Templates/MenuItem 2.4",
            "QtQuick.Templates/MenuItem 2.5",
            "QtQuick.Templates/MenuItem 2.7",
            "QtQuick.Templates/MenuItem 2.11",
            "QtQuick.Templates/MenuItem 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "highlighted"; type: "bool"; read: "isHighlighted"; write: "setHighlighted" }
        Property {
            name: "arrow"
            revision: 515
            type: "QQuickItem"
            isPointer: true
            read: "arrow"
            write: "setArrow"
        }
        Property {
            name: "menu"
            revision: 515
            type: "QQuickMenu"
            isReadonly: true
            isPointer: true
            read: "menu"
        }
        Property {
            name: "subMenu"
            revision: 515
            type: "QQuickMenu"
            isReadonly: true
            isPointer: true
            read: "subMenu"
        }
        Signal { name: "triggered" }
        Signal { name: "arrowChanged"; revision: 515 }
        Signal { name: "menuChanged"; revision: 515 }
        Signal { name: "subMenuChanged"; revision: 515 }
    }
    Component {
        file: "private/qquickmenuseparator_p.h"
        name: "QQuickMenuSeparator"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/MenuSeparator 2.1",
            "QtQuick.Templates/MenuSeparator 2.4",
            "QtQuick.Templates/MenuSeparator 2.5",
            "QtQuick.Templates/MenuSeparator 2.7",
            "QtQuick.Templates/MenuSeparator 2.11",
            "QtQuick.Templates/MenuSeparator 6.0"
        ]
        exportMetaObjectRevisions: [513, 516, 517, 519, 523, 1536]
    }
    Component {
        file: "private/qquickoverlay_p.h"
        name: "QQuickOverlay"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick.Templates/Overlay 2.3",
            "QtQuick.Templates/Overlay 2.4",
            "QtQuick.Templates/Overlay 2.7",
            "QtQuick.Templates/Overlay 2.11",
            "QtQuick.Templates/Overlay 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [515, 516, 519, 523, 1536]
        attachedType: "QQuickOverlayAttached"
        Property { name: "modal"; type: "QQmlComponent"; isPointer: true; read: "modal"; write: "setModal" }
        Property {
            name: "modeless"
            type: "QQmlComponent"
            isPointer: true
            read: "modeless"
            write: "setModeless"
        }
        Signal { name: "pressed" }
        Signal { name: "released" }
    }
    Component {
        file: "private/qquickoverlay_p.h"
        name: "QQuickOverlayAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "overlay"
            type: "QQuickOverlay"
            isReadonly: true
            isPointer: true
            read: "overlay"
        }
        Property { name: "modal"; type: "QQmlComponent"; isPointer: true; read: "modal"; write: "setModal" }
        Property {
            name: "modeless"
            type: "QQmlComponent"
            isPointer: true
            read: "modeless"
            write: "setModeless"
        }
        Signal { name: "pressed" }
        Signal { name: "released" }
    }
    Component {
        file: "private/qquickpage_p.h"
        name: "QQuickPage"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPane"
        exports: [
            "QtQuick.Templates/Page 2.0",
            "QtQuick.Templates/Page 2.1",
            "QtQuick.Templates/Page 2.4",
            "QtQuick.Templates/Page 2.5",
            "QtQuick.Templates/Page 2.7",
            "QtQuick.Templates/Page 2.11",
            "QtQuick.Templates/Page 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "title"; type: "QString"; read: "title"; write: "setTitle" }
        Property { name: "header"; type: "QQuickItem"; isPointer: true; read: "header"; write: "setHeader" }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true; read: "footer"; write: "setFooter" }
        Property {
            name: "contentWidth"
            revision: 513
            type: "double"
            read: "contentWidth"
            write: "setContentWidth"
        }
        Property {
            name: "contentHeight"
            revision: 513
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property {
            name: "implicitHeaderWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHeaderWidth"
        }
        Property {
            name: "implicitHeaderHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHeaderHeight"
        }
        Property {
            name: "implicitFooterWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitFooterWidth"
        }
        Property {
            name: "implicitFooterHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitFooterHeight"
        }
    }
    Component {
        file: "private/qquickpageindicator_p.h"
        name: "QQuickPageIndicator"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/PageIndicator 2.0",
            "QtQuick.Templates/PageIndicator 2.1",
            "QtQuick.Templates/PageIndicator 2.4",
            "QtQuick.Templates/PageIndicator 2.5",
            "QtQuick.Templates/PageIndicator 2.7",
            "QtQuick.Templates/PageIndicator 2.11",
            "QtQuick.Templates/PageIndicator 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "count"; type: "int"; read: "count"; write: "setCount" }
        Property { name: "currentIndex"; type: "int"; read: "currentIndex"; write: "setCurrentIndex" }
        Property { name: "interactive"; type: "bool"; read: "isInteractive"; write: "setInteractive" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
    }
    Component {
        file: "private/qquickcontrol_p.h"
        name: "QQuickPalette"
        accessSemantics: "reference"
        prototype: "QQuickColorGroup"
        Property {
            name: "active"
            type: "QQuickColorGroup"
            isPointer: true
            read: "active"
            write: "setActive"
        }
        Property {
            name: "inactive"
            type: "QQuickColorGroup"
            isPointer: true
            read: "inactive"
            write: "setInactive"
        }
        Property {
            name: "disabled"
            type: "QQuickColorGroup"
            isPointer: true
            read: "disabled"
            write: "setDisabled"
        }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "QQuickColorGroup"; isPointer: true }
        }
        Method {
            name: "setInactive"
            Parameter { name: "inactive"; type: "QQuickColorGroup"; isPointer: true }
        }
        Method {
            name: "setDisabled"
            Parameter { name: "disabled"; type: "QQuickColorGroup"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickpane_p.h"
        name: "QQuickPane"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/Pane 2.0",
            "QtQuick.Templates/Pane 2.1",
            "QtQuick.Templates/Pane 2.4",
            "QtQuick.Templates/Pane 2.5",
            "QtQuick.Templates/Pane 2.7",
            "QtQuick.Templates/Pane 2.11",
            "QtQuick.Templates/Pane 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "contentWidth"; type: "double"; read: "contentWidth"; write: "setContentWidth" }
        Property {
            name: "contentHeight"
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property {
            name: "contentData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "contentData"
        }
        Property {
            name: "contentChildren"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "contentChildren"
        }
    }
    Component {
        file: "private/qquickpopup_p.h"
        name: "QQuickPopup"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQuick.Templates/Popup 2.0",
            "QtQuick.Templates/Popup 2.1",
            "QtQuick.Templates/Popup 2.3",
            "QtQuick.Templates/Popup 2.5",
            "QtQuick.Templates/Popup 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 517, 1536]
        Enum {
            name: "ClosePolicy"
            alias: "ClosePolicyFlag"
            isFlag: true
            values: [
                "NoAutoClose",
                "CloseOnPressOutside",
                "CloseOnPressOutsideParent",
                "CloseOnReleaseOutside",
                "CloseOnReleaseOutsideParent",
                "CloseOnEscape"
            ]
        }
        Enum {
            name: "TransformOrigin"
            values: [
                "TopLeft",
                "Top",
                "TopRight",
                "Left",
                "Center",
                "Right",
                "BottomLeft",
                "Bottom",
                "BottomRight"
            ]
        }
        Property { name: "x"; type: "double"; read: "x"; write: "setX" }
        Property { name: "y"; type: "double"; read: "y"; write: "setY" }
        Property { name: "z"; type: "double"; read: "z"; write: "setZ" }
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "double"; read: "height"; write: "setHeight" }
        Property {
            name: "implicitWidth"
            type: "double"
            read: "implicitWidth"
            write: "setImplicitWidth"
        }
        Property {
            name: "implicitHeight"
            type: "double"
            read: "implicitHeight"
            write: "setImplicitHeight"
        }
        Property { name: "contentWidth"; type: "double"; read: "contentWidth"; write: "setContentWidth" }
        Property {
            name: "contentHeight"
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property { name: "availableWidth"; type: "double"; isReadonly: true; read: "availableWidth" }
        Property { name: "availableHeight"; type: "double"; isReadonly: true; read: "availableHeight" }
        Property { name: "margins"; type: "double"; read: "margins"; write: "setMargins" }
        Property { name: "topMargin"; type: "double"; read: "topMargin"; write: "setTopMargin" }
        Property { name: "leftMargin"; type: "double"; read: "leftMargin"; write: "setLeftMargin" }
        Property { name: "rightMargin"; type: "double"; read: "rightMargin"; write: "setRightMargin" }
        Property { name: "bottomMargin"; type: "double"; read: "bottomMargin"; write: "setBottomMargin" }
        Property { name: "padding"; type: "double"; read: "padding"; write: "setPadding" }
        Property { name: "topPadding"; type: "double"; read: "topPadding"; write: "setTopPadding" }
        Property { name: "leftPadding"; type: "double"; read: "leftPadding"; write: "setLeftPadding" }
        Property { name: "rightPadding"; type: "double"; read: "rightPadding"; write: "setRightPadding" }
        Property {
            name: "bottomPadding"
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Property { name: "locale"; type: "QLocale"; read: "locale"; write: "setLocale" }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property {
            name: "parent"
            type: "QQuickItem"
            isPointer: true
            read: "parentItem"
            write: "setParentItem"
        }
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
        }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isPointer: true
            read: "contentItem"
            write: "setContentItem"
        }
        Property {
            name: "contentData"
            type: "QObject"
            isList: true
            isReadonly: true
            read: "contentData"
        }
        Property {
            name: "contentChildren"
            type: "QQuickItem"
            isList: true
            isReadonly: true
            read: "contentChildren"
        }
        Property { name: "clip"; type: "bool"; read: "clip"; write: "setClip" }
        Property { name: "focus"; type: "bool"; read: "hasFocus"; write: "setFocus" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true; read: "hasActiveFocus" }
        Property { name: "modal"; type: "bool"; read: "isModal"; write: "setModal" }
        Property { name: "dim"; type: "bool"; read: "dim"; write: "setDim" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property { name: "opacity"; type: "double"; read: "opacity"; write: "setOpacity" }
        Property { name: "scale"; type: "double"; read: "scale"; write: "setScale" }
        Property {
            name: "closePolicy"
            type: "ClosePolicy"
            read: "closePolicy"
            write: "setClosePolicy"
        }
        Property {
            name: "transformOrigin"
            type: "TransformOrigin"
            read: "transformOrigin"
            write: "setTransformOrigin"
        }
        Property {
            name: "enter"
            type: "QQuickTransition"
            isPointer: true
            read: "enter"
            write: "setEnter"
        }
        Property { name: "exit"; type: "QQuickTransition"; isPointer: true; read: "exit"; write: "setExit" }
        Property { name: "spacing"; revision: 513; type: "double"; read: "spacing"; write: "setSpacing" }
        Property { name: "opened"; revision: 515; type: "bool"; isReadonly: true; read: "isOpened" }
        Property { name: "mirrored"; revision: 515; type: "bool"; isReadonly: true; read: "isMirrored" }
        Property { name: "enabled"; revision: 515; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property {
            name: "palette"
            revision: 515
            type: "QQuickPalette"
            isPointer: true
            read: "palette"
            write: "setPalette"
        }
        Property {
            name: "horizontalPadding"
            type: "double"
            read: "horizontalPadding"
            write: "setHorizontalPadding"
        }
        Property {
            name: "verticalPadding"
            type: "double"
            read: "verticalPadding"
            write: "setVerticalPadding"
        }
        Property {
            name: "anchors"
            revision: 517
            type: "QQuickPopupAnchors"
            isReadonly: true
            isPointer: true
            read: "getAnchors"
        }
        Property {
            name: "implicitContentWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitContentWidth"
        }
        Property {
            name: "implicitContentHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitContentHeight"
        }
        Property {
            name: "implicitBackgroundWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundWidth"
        }
        Property {
            name: "implicitBackgroundHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundHeight"
        }
        Property { name: "topInset"; revision: 517; type: "double"; read: "topInset"; write: "setTopInset" }
        Property {
            name: "leftInset"
            revision: 517
            type: "double"
            read: "leftInset"
            write: "setLeftInset"
        }
        Property {
            name: "rightInset"
            revision: 517
            type: "double"
            read: "rightInset"
            write: "setRightInset"
        }
        Property {
            name: "bottomInset"
            revision: 517
            type: "double"
            read: "bottomInset"
            write: "setBottomInset"
        }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Signal { name: "aboutToShow" }
        Signal { name: "aboutToHide" }
        Signal {
            name: "windowChanged"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "spacingChanged"; revision: 513 }
        Signal { name: "openedChanged"; revision: 515 }
        Signal { name: "mirroredChanged"; revision: 515 }
        Signal { name: "enabledChanged"; revision: 515 }
        Signal { name: "paletteChanged"; revision: 515 }
        Signal { name: "paletteCreated"; revision: 515 }
        Signal { name: "horizontalPaddingChanged"; revision: 517 }
        Signal { name: "verticalPaddingChanged"; revision: 517 }
        Signal { name: "implicitContentWidthChanged"; revision: 517 }
        Signal { name: "implicitContentHeightChanged"; revision: 517 }
        Signal { name: "implicitBackgroundWidthChanged"; revision: 517 }
        Signal { name: "implicitBackgroundHeightChanged"; revision: 517 }
        Signal { name: "topInsetChanged"; revision: 517 }
        Signal { name: "leftInsetChanged"; revision: 517 }
        Signal { name: "rightInsetChanged"; revision: 517 }
        Signal { name: "bottomInsetChanged"; revision: 517 }
        Method { name: "open" }
        Method { name: "close" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method { name: "forceActiveFocus" }
    }
    Component {
        file: "private/qquickpopupanchors_p.h"
        name: "QQuickPopupAnchors"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "centerIn"
            type: "QQuickItem"
            isPointer: true
            read: "centerIn"
            write: "setCenterIn"
        }
    }
    Component {
        file: "private/qquickprogressbar_p.h"
        name: "QQuickProgressBar"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/ProgressBar 2.0",
            "QtQuick.Templates/ProgressBar 2.1",
            "QtQuick.Templates/ProgressBar 2.4",
            "QtQuick.Templates/ProgressBar 2.5",
            "QtQuick.Templates/ProgressBar 2.7",
            "QtQuick.Templates/ProgressBar 2.11",
            "QtQuick.Templates/ProgressBar 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
        Property { name: "value"; type: "double"; read: "value"; write: "setValue" }
        Property { name: "position"; type: "double"; isReadonly: true; read: "position" }
        Property { name: "visualPosition"; type: "double"; isReadonly: true; read: "visualPosition" }
        Property {
            name: "indeterminate"
            type: "bool"
            read: "isIndeterminate"
            write: "setIndeterminate"
        }
    }
    Component {
        file: "private/qquickradiobutton_p.h"
        name: "QQuickRadioButton"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/RadioButton 2.0",
            "QtQuick.Templates/RadioButton 2.1",
            "QtQuick.Templates/RadioButton 2.2",
            "QtQuick.Templates/RadioButton 2.3",
            "QtQuick.Templates/RadioButton 2.4",
            "QtQuick.Templates/RadioButton 2.5",
            "QtQuick.Templates/RadioButton 2.7",
            "QtQuick.Templates/RadioButton 2.11",
            "QtQuick.Templates/RadioButton 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
    }
    Component {
        file: "private/qquickradiodelegate_p.h"
        name: "QQuickRadioDelegate"
        accessSemantics: "reference"
        prototype: "QQuickItemDelegate"
        exports: [
            "QtQuick.Templates/RadioDelegate 2.0",
            "QtQuick.Templates/RadioDelegate 2.1",
            "QtQuick.Templates/RadioDelegate 2.2",
            "QtQuick.Templates/RadioDelegate 2.3",
            "QtQuick.Templates/RadioDelegate 2.4",
            "QtQuick.Templates/RadioDelegate 2.5",
            "QtQuick.Templates/RadioDelegate 2.7",
            "QtQuick.Templates/RadioDelegate 2.11",
            "QtQuick.Templates/RadioDelegate 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
    }
    Component {
        file: "private/qquickrangeslider_p.h"
        name: "QQuickRangeSlider"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/RangeSlider 2.0",
            "QtQuick.Templates/RangeSlider 2.1",
            "QtQuick.Templates/RangeSlider 2.2",
            "QtQuick.Templates/RangeSlider 2.3",
            "QtQuick.Templates/RangeSlider 2.4",
            "QtQuick.Templates/RangeSlider 2.5",
            "QtQuick.Templates/RangeSlider 2.7",
            "QtQuick.Templates/RangeSlider 2.11",
            "QtQuick.Templates/RangeSlider 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapAlways", "SnapOnRelease"]
        }
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
        Property {
            name: "first"
            type: "QQuickRangeSliderNode"
            isReadonly: true
            isPointer: true
            read: "first"
        }
        Property {
            name: "second"
            type: "QQuickRangeSliderNode"
            isReadonly: true
            isPointer: true
            read: "second"
        }
        Property { name: "stepSize"; type: "double"; read: "stepSize"; write: "setStepSize" }
        Property { name: "snapMode"; type: "SnapMode"; read: "snapMode"; write: "setSnapMode" }
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "live"; revision: 514; type: "bool"; read: "live"; write: "setLive" }
        Property { name: "horizontal"; revision: 515; type: "bool"; isReadonly: true; read: "isHorizontal" }
        Property { name: "vertical"; revision: 515; type: "bool"; isReadonly: true; read: "isVertical" }
        Property {
            name: "touchDragThreshold"
            revision: 517
            type: "double"
            read: "touchDragThreshold"
            write: "setTouchDragThreshold"
        }
        Signal { name: "liveChanged"; revision: 514 }
        Signal { name: "touchDragThresholdChanged"; revision: 517 }
        Method {
            name: "setValues"
            Parameter { name: "firstValue"; type: "double" }
            Parameter { name: "secondValue"; type: "double" }
        }
        Method {
            name: "valueAt"
            revision: 517
            type: "double"
            Parameter { name: "position"; type: "double" }
        }
    }
    Component {
        file: "private/qquickrangeslider_p.h"
        name: "QQuickRangeSliderNode"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "value"; type: "double"; read: "value"; write: "setValue" }
        Property { name: "position"; type: "double"; isReadonly: true; read: "position" }
        Property { name: "visualPosition"; type: "double"; isReadonly: true; read: "visualPosition" }
        Property { name: "handle"; type: "QQuickItem"; isPointer: true; read: "handle"; write: "setHandle" }
        Property { name: "pressed"; type: "bool"; read: "isPressed"; write: "setPressed" }
        Property { name: "hovered"; revision: 513; type: "bool"; read: "isHovered"; write: "setHovered" }
        Property {
            name: "implicitHandleWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHandleWidth"
        }
        Property {
            name: "implicitHandleHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHandleHeight"
        }
        Signal { name: "hoveredChanged"; revision: 513 }
        Signal { name: "moved" }
        Method { name: "increase" }
        Method { name: "decrease" }
    }
    Component {
        file: "private/qquickroundbutton_p.h"
        name: "QQuickRoundButton"
        accessSemantics: "reference"
        prototype: "QQuickButton"
        exports: [
            "QtQuick.Templates/RoundButton 2.1",
            "QtQuick.Templates/RoundButton 2.2",
            "QtQuick.Templates/RoundButton 2.3",
            "QtQuick.Templates/RoundButton 2.4",
            "QtQuick.Templates/RoundButton 2.5",
            "QtQuick.Templates/RoundButton 2.7",
            "QtQuick.Templates/RoundButton 2.11",
            "QtQuick.Templates/RoundButton 6.0"
        ]
        exportMetaObjectRevisions: [513, 514, 515, 516, 517, 519, 523, 1536]
        Property { name: "radius"; type: "double"; read: "radius"; write: "setRadius" }
    }
    Component {
        file: "private/qquickscrollbar_p.h"
        name: "QQuickScrollBar"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/ScrollBar 2.0",
            "QtQuick.Templates/ScrollBar 2.1",
            "QtQuick.Templates/ScrollBar 2.2",
            "QtQuick.Templates/ScrollBar 2.3",
            "QtQuick.Templates/ScrollBar 2.4",
            "QtQuick.Templates/ScrollBar 2.5",
            "QtQuick.Templates/ScrollBar 2.7",
            "QtQuick.Templates/ScrollBar 2.11",
            "QtQuick.Templates/ScrollBar 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        attachedType: "QQuickScrollBarAttached"
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapAlways", "SnapOnRelease"]
        }
        Enum {
            name: "Policy"
            values: ["AsNeeded", "AlwaysOff", "AlwaysOn"]
        }
        Property { name: "size"; type: "double"; read: "size"; write: "setSize" }
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "stepSize"; type: "double"; read: "stepSize"; write: "setStepSize" }
        Property { name: "active"; type: "bool"; read: "isActive"; write: "setActive" }
        Property { name: "pressed"; type: "bool"; read: "isPressed"; write: "setPressed" }
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property {
            name: "snapMode"
            revision: 514
            type: "SnapMode"
            read: "snapMode"
            write: "setSnapMode"
        }
        Property {
            name: "interactive"
            revision: 514
            type: "bool"
            read: "isInteractive"
            write: "setInteractive"
        }
        Property { name: "policy"; revision: 514; type: "Policy"; read: "policy"; write: "setPolicy" }
        Property { name: "horizontal"; revision: 515; type: "bool"; isReadonly: true; read: "isHorizontal" }
        Property { name: "vertical"; revision: 515; type: "bool"; isReadonly: true; read: "isVertical" }
        Property {
            name: "minimumSize"
            revision: 516
            type: "double"
            read: "minimumSize"
            write: "setMinimumSize"
        }
        Property { name: "visualSize"; revision: 516; type: "double"; isReadonly: true; read: "visualSize" }
        Property {
            name: "visualPosition"
            revision: 516
            type: "double"
            isReadonly: true
            read: "visualPosition"
        }
        Property {
            name: "__decreaseVisual"
            type: "QQuickIndicatorButton"
            isReadonly: true
            isPointer: true
            read: "decreaseVisual"
        }
        Property {
            name: "__increaseVisual"
            type: "QQuickIndicatorButton"
            isReadonly: true
            isPointer: true
            read: "increaseVisual"
        }
        Signal { name: "snapModeChanged"; revision: 514 }
        Signal { name: "interactiveChanged"; revision: 514 }
        Signal { name: "policyChanged"; revision: 514 }
        Signal { name: "minimumSizeChanged"; revision: 516 }
        Signal { name: "visualSizeChanged"; revision: 516 }
        Signal { name: "visualPositionChanged"; revision: 516 }
        Method { name: "increase" }
        Method { name: "decrease" }
        Method {
            name: "setSize"
            Parameter { name: "size"; type: "double" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "double" }
        }
    }
    Component {
        file: "private/qquickscrollbar_p.h"
        name: "QQuickScrollBarAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "horizontal"
            type: "QQuickScrollBar"
            isPointer: true
            read: "horizontal"
            write: "setHorizontal"
        }
        Property {
            name: "vertical"
            type: "QQuickScrollBar"
            isPointer: true
            read: "vertical"
            write: "setVertical"
        }
    }
    Component {
        file: "private/qquickscrollindicator_p.h"
        name: "QQuickScrollIndicator"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/ScrollIndicator 2.0",
            "QtQuick.Templates/ScrollIndicator 2.1",
            "QtQuick.Templates/ScrollIndicator 2.3",
            "QtQuick.Templates/ScrollIndicator 2.4",
            "QtQuick.Templates/ScrollIndicator 2.5",
            "QtQuick.Templates/ScrollIndicator 2.7",
            "QtQuick.Templates/ScrollIndicator 2.11",
            "QtQuick.Templates/ScrollIndicator 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 516, 517, 519, 523, 1536]
        attachedType: "QQuickScrollIndicatorAttached"
        Property { name: "size"; type: "double"; read: "size"; write: "setSize" }
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "active"; type: "bool"; read: "isActive"; write: "setActive" }
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "horizontal"; revision: 515; type: "bool"; isReadonly: true; read: "isHorizontal" }
        Property { name: "vertical"; revision: 515; type: "bool"; isReadonly: true; read: "isVertical" }
        Property {
            name: "minimumSize"
            revision: 516
            type: "double"
            read: "minimumSize"
            write: "setMinimumSize"
        }
        Property { name: "visualSize"; revision: 516; type: "double"; isReadonly: true; read: "visualSize" }
        Property {
            name: "visualPosition"
            revision: 516
            type: "double"
            isReadonly: true
            read: "visualPosition"
        }
        Signal { name: "minimumSizeChanged"; revision: 516 }
        Signal { name: "visualSizeChanged"; revision: 516 }
        Signal { name: "visualPositionChanged"; revision: 516 }
        Method {
            name: "setSize"
            Parameter { name: "size"; type: "double" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "double" }
        }
    }
    Component {
        file: "private/qquickscrollindicator_p.h"
        name: "QQuickScrollIndicatorAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "horizontal"
            type: "QQuickScrollIndicator"
            isPointer: true
            read: "horizontal"
            write: "setHorizontal"
        }
        Property {
            name: "vertical"
            type: "QQuickScrollIndicator"
            isPointer: true
            read: "vertical"
            write: "setVertical"
        }
    }
    Component {
        file: "private/qquickscrollview_p.h"
        name: "QQuickScrollView"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPane"
        exports: [
            "QtQuick.Templates/ScrollView 2.2",
            "QtQuick.Templates/ScrollView 2.4",
            "QtQuick.Templates/ScrollView 2.5",
            "QtQuick.Templates/ScrollView 2.7",
            "QtQuick.Templates/ScrollView 2.11",
            "QtQuick.Templates/ScrollView 6.0"
        ]
        exportMetaObjectRevisions: [514, 516, 517, 519, 523, 1536]
    }
    Component {
        file: "private/qquickslider_p.h"
        name: "QQuickSlider"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/Slider 2.0",
            "QtQuick.Templates/Slider 2.1",
            "QtQuick.Templates/Slider 2.2",
            "QtQuick.Templates/Slider 2.3",
            "QtQuick.Templates/Slider 2.4",
            "QtQuick.Templates/Slider 2.5",
            "QtQuick.Templates/Slider 2.7",
            "QtQuick.Templates/Slider 2.11",
            "QtQuick.Templates/Slider 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Enum {
            name: "SnapMode"
            values: ["NoSnap", "SnapAlways", "SnapOnRelease"]
        }
        Property { name: "from"; type: "double"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "double"; read: "to"; write: "setTo" }
        Property { name: "value"; type: "double"; read: "value"; write: "setValue" }
        Property { name: "position"; type: "double"; isReadonly: true; read: "position" }
        Property { name: "visualPosition"; type: "double"; isReadonly: true; read: "visualPosition" }
        Property { name: "stepSize"; type: "double"; read: "stepSize"; write: "setStepSize" }
        Property { name: "snapMode"; type: "SnapMode"; read: "snapMode"; write: "setSnapMode" }
        Property { name: "pressed"; type: "bool"; read: "isPressed"; write: "setPressed" }
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "handle"; type: "QQuickItem"; isPointer: true; read: "handle"; write: "setHandle" }
        Property { name: "live"; revision: 514; type: "bool"; read: "live"; write: "setLive" }
        Property { name: "horizontal"; revision: 515; type: "bool"; isReadonly: true; read: "isHorizontal" }
        Property { name: "vertical"; revision: 515; type: "bool"; isReadonly: true; read: "isVertical" }
        Property {
            name: "touchDragThreshold"
            revision: 517
            type: "double"
            read: "touchDragThreshold"
            write: "setTouchDragThreshold"
        }
        Property {
            name: "implicitHandleWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHandleWidth"
        }
        Property {
            name: "implicitHandleHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitHandleHeight"
        }
        Signal { name: "moved"; revision: 514 }
        Signal { name: "liveChanged"; revision: 514 }
        Signal { name: "touchDragThresholdChanged"; revision: 517 }
        Signal { name: "implicitHandleWidthChanged"; revision: 517 }
        Signal { name: "implicitHandleHeightChanged"; revision: 517 }
        Method { name: "increase" }
        Method { name: "decrease" }
        Method {
            name: "valueAt"
            revision: 513
            type: "double"
            Parameter { name: "position"; type: "double" }
        }
    }
    Component {
        file: "private/qquickspinbox_p.h"
        name: "QQuickSpinBox"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/SpinBox 2.0",
            "QtQuick.Templates/SpinBox 2.1",
            "QtQuick.Templates/SpinBox 2.2",
            "QtQuick.Templates/SpinBox 2.3",
            "QtQuick.Templates/SpinBox 2.4",
            "QtQuick.Templates/SpinBox 2.5",
            "QtQuick.Templates/SpinBox 2.7",
            "QtQuick.Templates/SpinBox 2.11",
            "QtQuick.Templates/SpinBox 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "from"; type: "int"; read: "from"; write: "setFrom" }
        Property { name: "to"; type: "int"; read: "to"; write: "setTo" }
        Property { name: "value"; type: "int"; read: "value"; write: "setValue" }
        Property { name: "stepSize"; type: "int"; read: "stepSize"; write: "setStepSize" }
        Property { name: "editable"; type: "bool"; read: "isEditable"; write: "setEditable" }
        Property {
            name: "validator"
            type: "QValidator"
            isPointer: true
            read: "validator"
            write: "setValidator"
        }
        Property {
            name: "textFromValue"
            type: "QJSValue"
            read: "textFromValue"
            write: "setTextFromValue"
        }
        Property {
            name: "valueFromText"
            type: "QJSValue"
            read: "valueFromText"
            write: "setValueFromText"
        }
        Property {
            name: "up"
            type: "QQuickIndicatorButton"
            isReadonly: true
            isPointer: true
            read: "up"
        }
        Property {
            name: "down"
            type: "QQuickIndicatorButton"
            isReadonly: true
            isPointer: true
            read: "down"
        }
        Property {
            name: "inputMethodHints"
            revision: 514
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
        }
        Property {
            name: "inputMethodComposing"
            revision: 514
            type: "bool"
            isReadonly: true
            read: "isInputMethodComposing"
        }
        Property { name: "wrap"; revision: 515; type: "bool"; read: "wrap"; write: "setWrap" }
        Property {
            name: "displayText"
            revision: 516
            type: "QString"
            isReadonly: true
            read: "displayText"
        }
        Signal { name: "valueModified"; revision: 514 }
        Signal { name: "inputMethodHintsChanged"; revision: 514 }
        Signal { name: "inputMethodComposingChanged"; revision: 514 }
        Signal { name: "wrapChanged"; revision: 515 }
        Signal { name: "displayTextChanged"; revision: 516 }
        Method { name: "increase" }
        Method { name: "decrease" }
    }
    Component {
        file: "private/qquicksplitview_p.h"
        name: "QQuickSplitHandleAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtQuick.Templates/SplitHandle 2.13",
            "QtQuick.Templates/SplitHandle 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [525, 1536]
        attachedType: "QQuickSplitHandleAttached"
        Property { name: "hovered"; type: "bool"; isReadonly: true; read: "isHovered" }
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "isPressed" }
    }
    Component {
        file: "private/qquicksplitview_p.h"
        name: "QQuickSplitView"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: [
            "QtQuick.Templates/SplitView 2.13",
            "QtQuick.Templates/SplitView 6.0"
        ]
        exportMetaObjectRevisions: [525, 1536]
        attachedType: "QQuickSplitViewAttached"
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "resizing"; type: "bool"; isReadonly: true; read: "isResizing" }
        Property {
            name: "handle"
            type: "QQmlComponent"
            isPointer: true
            read: "handle"
            write: "setHandle"
        }
        Method { name: "saveState"; type: "QVariant" }
        Method {
            name: "restoreState"
            type: "bool"
            Parameter { name: "state"; type: "QVariant" }
        }
    }
    Component {
        file: "private/qquicksplitview_p.h"
        name: "QQuickSplitViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "view"; type: "QQuickSplitView"; isReadonly: true; isPointer: true; read: "view" }
        Property { name: "minimumWidth"; type: "double"; read: "minimumWidth"; write: "setMinimumWidth" }
        Property {
            name: "minimumHeight"
            type: "double"
            read: "minimumHeight"
            write: "setMinimumHeight"
        }
        Property {
            name: "preferredWidth"
            type: "double"
            read: "preferredWidth"
            write: "setPreferredWidth"
        }
        Property {
            name: "preferredHeight"
            type: "double"
            read: "preferredHeight"
            write: "setPreferredHeight"
        }
        Property { name: "maximumWidth"; type: "double"; read: "maximumWidth"; write: "setMaximumWidth" }
        Property {
            name: "maximumHeight"
            type: "double"
            read: "maximumHeight"
            write: "setMaximumHeight"
        }
        Property { name: "fillHeight"; type: "bool"; read: "fillHeight"; write: "setFillHeight" }
        Property { name: "fillWidth"; type: "bool"; read: "fillWidth"; write: "setFillWidth" }
    }
    Component {
        file: "private/qquickstackview_p.h"
        name: "QQuickStackView"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/StackView 2.0",
            "QtQuick.Templates/StackView 2.1",
            "QtQuick.Templates/StackView 2.3",
            "QtQuick.Templates/StackView 2.4",
            "QtQuick.Templates/StackView 2.5",
            "QtQuick.Templates/StackView 2.7",
            "QtQuick.Templates/StackView 2.11",
            "QtQuick.Templates/StackView 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 516, 517, 519, 523, 1536]
        attachedType: "QQuickStackViewAttached"
        Enum {
            name: "Status"
            values: ["Inactive", "Deactivating", "Activating", "Active"]
        }
        Enum {
            name: "LoadBehavior"
            values: ["DontLoad", "ForceLoad"]
        }
        Enum {
            name: "Operation"
            values: [
                "Transition",
                "Immediate",
                "PushTransition",
                "ReplaceTransition",
                "PopTransition"
            ]
        }
        Property { name: "busy"; type: "bool"; isReadonly: true; read: "isBusy" }
        Property { name: "depth"; type: "int"; isReadonly: true; read: "depth" }
        Property {
            name: "currentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "currentItem"
        }
        Property { name: "initialItem"; type: "QJSValue"; read: "initialItem"; write: "setInitialItem" }
        Property {
            name: "popEnter"
            type: "QQuickTransition"
            isPointer: true
            read: "popEnter"
            write: "setPopEnter"
        }
        Property {
            name: "popExit"
            type: "QQuickTransition"
            isPointer: true
            read: "popExit"
            write: "setPopExit"
        }
        Property {
            name: "pushEnter"
            type: "QQuickTransition"
            isPointer: true
            read: "pushEnter"
            write: "setPushEnter"
        }
        Property {
            name: "pushExit"
            type: "QQuickTransition"
            isPointer: true
            read: "pushExit"
            write: "setPushExit"
        }
        Property {
            name: "replaceEnter"
            type: "QQuickTransition"
            isPointer: true
            read: "replaceEnter"
            write: "setReplaceEnter"
        }
        Property {
            name: "replaceExit"
            type: "QQuickTransition"
            isPointer: true
            read: "replaceExit"
            write: "setReplaceExit"
        }
        Property { name: "empty"; revision: 515; type: "bool"; isReadonly: true; read: "isEmpty" }
        Signal { name: "emptyChanged"; revision: 515 }
        Method {
            name: "clear"
            Parameter { name: "operation"; type: "Operation" }
        }
        Method { name: "clear" }
        Method {
            name: "get"
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "behavior"; type: "LoadBehavior" }
        }
        Method {
            name: "get"
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "find"
            type: "QQuickItem*"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "behavior"; type: "LoadBehavior" }
        }
        Method {
            name: "find"
            type: "QQuickItem*"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "push"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "pop"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "replace"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickstackview_p.h"
        name: "QQuickStackViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "index"; type: "int"; isReadonly: true; read: "index" }
        Property { name: "view"; type: "QQuickStackView"; isReadonly: true; isPointer: true; read: "view" }
        Property { name: "status"; type: "QQuickStackView::Status"; isReadonly: true; read: "status" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Signal { name: "activated" }
        Signal { name: "activating" }
        Signal { name: "deactivated" }
        Signal { name: "deactivating" }
        Signal { name: "removed" }
    }
    Component {
        file: "private/qquickswipe_p.h"
        name: "QQuickSwipe"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "complete"; type: "bool"; isReadonly: true; read: "isComplete" }
        Property { name: "left"; type: "QQmlComponent"; isPointer: true; read: "left"; write: "setLeft" }
        Property {
            name: "behind"
            type: "QQmlComponent"
            isPointer: true
            read: "behind"
            write: "setBehind"
        }
        Property { name: "right"; type: "QQmlComponent"; isPointer: true; read: "right"; write: "setRight" }
        Property {
            name: "leftItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "leftItem"
        }
        Property {
            name: "behindItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "behindItem"
        }
        Property {
            name: "rightItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "rightItem"
        }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled" }
        Property {
            name: "transition"
            type: "QQuickTransition"
            isPointer: true
            read: "transition"
            write: "setTransition"
        }
        Signal { name: "completed" }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method { name: "close"; revision: 513 }
        Method {
            name: "open"
            revision: 514
            Parameter { name: "side"; type: "QQuickSwipeDelegate::Side" }
        }
    }
    Component {
        file: "private/qquickswipedelegate_p.h"
        name: "QQuickSwipeDelegate"
        accessSemantics: "reference"
        prototype: "QQuickItemDelegate"
        exports: [
            "QtQuick.Templates/SwipeDelegate 2.0",
            "QtQuick.Templates/SwipeDelegate 2.1",
            "QtQuick.Templates/SwipeDelegate 2.2",
            "QtQuick.Templates/SwipeDelegate 2.3",
            "QtQuick.Templates/SwipeDelegate 2.4",
            "QtQuick.Templates/SwipeDelegate 2.5",
            "QtQuick.Templates/SwipeDelegate 2.7",
            "QtQuick.Templates/SwipeDelegate 2.11",
            "QtQuick.Templates/SwipeDelegate 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        attachedType: "QQuickSwipeDelegateAttached"
        Enum {
            name: "Side"
            values: ["Left", "Right"]
        }
        Property { name: "swipe"; type: "QQuickSwipe"; isReadonly: true; isPointer: true; read: "swipe" }
    }
    Component {
        file: "private/qquickswipedelegate_p.h"
        name: "QQuickSwipeDelegateAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "pressed"; type: "bool"; isReadonly: true; read: "isPressed" }
        Signal { name: "clicked" }
    }
    Component {
        file: "private/qquickswipeview_p.h"
        name: "QQuickSwipeView"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: [
            "QtQuick.Templates/SwipeView 2.0",
            "QtQuick.Templates/SwipeView 2.1",
            "QtQuick.Templates/SwipeView 2.2",
            "QtQuick.Templates/SwipeView 2.3",
            "QtQuick.Templates/SwipeView 2.4",
            "QtQuick.Templates/SwipeView 2.5",
            "QtQuick.Templates/SwipeView 2.7",
            "QtQuick.Templates/SwipeView 2.11",
            "QtQuick.Templates/SwipeView 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        attachedType: "QQuickSwipeViewAttached"
        Property {
            name: "interactive"
            revision: 513
            type: "bool"
            read: "isInteractive"
            write: "setInteractive"
        }
        Property {
            name: "orientation"
            revision: 514
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "horizontal"; revision: 515; type: "bool"; isReadonly: true; read: "isHorizontal" }
        Property { name: "vertical"; revision: 515; type: "bool"; isReadonly: true; read: "isVertical" }
        Signal { name: "interactiveChanged"; revision: 513 }
        Signal { name: "orientationChanged"; revision: 514 }
    }
    Component {
        file: "private/qquickswipeview_p.h"
        name: "QQuickSwipeViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "index"; type: "int"; isReadonly: true; read: "index" }
        Property { name: "isCurrentItem"; type: "bool"; isReadonly: true; read: "isCurrentItem" }
        Property { name: "view"; type: "QQuickSwipeView"; isReadonly: true; isPointer: true; read: "view" }
        Property { name: "isNextItem"; revision: 513; type: "bool"; isReadonly: true; read: "isNextItem" }
        Property {
            name: "isPreviousItem"
            revision: 513
            type: "bool"
            isReadonly: true
            read: "isPreviousItem"
        }
    }
    Component {
        file: "private/qquickswitch_p.h"
        name: "QQuickSwitch"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/Switch 2.0",
            "QtQuick.Templates/Switch 2.1",
            "QtQuick.Templates/Switch 2.2",
            "QtQuick.Templates/Switch 2.3",
            "QtQuick.Templates/Switch 2.4",
            "QtQuick.Templates/Switch 2.5",
            "QtQuick.Templates/Switch 2.7",
            "QtQuick.Templates/Switch 2.11",
            "QtQuick.Templates/Switch 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "visualPosition"; type: "double"; isReadonly: true; read: "visualPosition" }
    }
    Component {
        file: "private/qquickswitchdelegate_p.h"
        name: "QQuickSwitchDelegate"
        accessSemantics: "reference"
        prototype: "QQuickItemDelegate"
        exports: [
            "QtQuick.Templates/SwitchDelegate 2.0",
            "QtQuick.Templates/SwitchDelegate 2.1",
            "QtQuick.Templates/SwitchDelegate 2.2",
            "QtQuick.Templates/SwitchDelegate 2.3",
            "QtQuick.Templates/SwitchDelegate 2.4",
            "QtQuick.Templates/SwitchDelegate 2.5",
            "QtQuick.Templates/SwitchDelegate 2.7",
            "QtQuick.Templates/SwitchDelegate 2.11",
            "QtQuick.Templates/SwitchDelegate 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        Property { name: "position"; type: "double"; read: "position"; write: "setPosition" }
        Property { name: "visualPosition"; type: "double"; isReadonly: true; read: "visualPosition" }
    }
    Component {
        file: "private/qquicktabbar_p.h"
        name: "QQuickTabBar"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: [
            "QtQuick.Templates/TabBar 2.0",
            "QtQuick.Templates/TabBar 2.1",
            "QtQuick.Templates/TabBar 2.2",
            "QtQuick.Templates/TabBar 2.3",
            "QtQuick.Templates/TabBar 2.4",
            "QtQuick.Templates/TabBar 2.5",
            "QtQuick.Templates/TabBar 2.7",
            "QtQuick.Templates/TabBar 2.11",
            "QtQuick.Templates/TabBar 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
        attachedType: "QQuickTabBarAttached"
        Enum {
            name: "Position"
            values: ["Header", "Footer"]
        }
        Property { name: "position"; type: "Position"; read: "position"; write: "setPosition" }
        Property {
            name: "contentWidth"
            revision: 514
            type: "double"
            read: "contentWidth"
            write: "setContentWidth"
        }
        Property {
            name: "contentHeight"
            revision: 514
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
    }
    Component {
        file: "private/qquicktabbar_p.h"
        name: "QQuickTabBarAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "index"; type: "int"; isReadonly: true; read: "index" }
        Property { name: "tabBar"; type: "QQuickTabBar"; isReadonly: true; isPointer: true; read: "tabBar" }
        Property { name: "position"; type: "QQuickTabBar::Position"; isReadonly: true; read: "position" }
    }
    Component {
        file: "private/qquicktabbutton_p.h"
        name: "QQuickTabButton"
        accessSemantics: "reference"
        prototype: "QQuickAbstractButton"
        exports: [
            "QtQuick.Templates/TabButton 2.0",
            "QtQuick.Templates/TabButton 2.1",
            "QtQuick.Templates/TabButton 2.2",
            "QtQuick.Templates/TabButton 2.3",
            "QtQuick.Templates/TabButton 2.4",
            "QtQuick.Templates/TabButton 2.5",
            "QtQuick.Templates/TabButton 2.7",
            "QtQuick.Templates/TabButton 2.11",
            "QtQuick.Templates/TabButton 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
    }
    Component {
        file: "qquicktableview_p.h"
        name: "QQuickTableViewAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "view"; type: "QQuickTableView"; isReadonly: true; isPointer: true; read: "view" }
        Signal { name: "pooled" }
        Signal { name: "reused" }
    }
    Component {
        file: "private/qquickheaderview_p.h"
        name: "QQuickTableView"
        accessSemantics: "reference"
        defaultProperty: "flickableData"
        prototype: "QQuickFlickable"
        Property { name: "rows"; type: "int"; isReadonly: true; read: "rows" }
        Property { name: "columns"; type: "int"; isReadonly: true; read: "columns" }
        Property { name: "rowSpacing"; type: "double"; read: "rowSpacing"; write: "setRowSpacing" }
        Property {
            name: "columnSpacing"
            type: "double"
            read: "columnSpacing"
            write: "setColumnSpacing"
        }
        Property {
            name: "rowHeightProvider"
            type: "QJSValue"
            read: "rowHeightProvider"
            write: "setRowHeightProvider"
        }
        Property {
            name: "columnWidthProvider"
            type: "QJSValue"
            read: "columnWidthProvider"
            write: "setColumnWidthProvider"
        }
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property { name: "reuseItems"; type: "bool"; read: "reuseItems"; write: "setReuseItems" }
        Property { name: "contentWidth"; type: "double"; read: "contentWidth"; write: "setContentWidth" }
        Property {
            name: "contentHeight"
            type: "double"
            read: "contentHeight"
            write: "setContentHeight"
        }
        Property {
            name: "syncView"
            revision: 526
            type: "QQuickTableView"
            isPointer: true
            read: "syncView"
            write: "setSyncView"
        }
        Property {
            name: "syncDirection"
            revision: 526
            type: "Qt::Orientations"
            read: "syncDirection"
            write: "setSyncDirection"
        }
        Property { name: "leftColumn"; revision: 1536; type: "int"; isReadonly: true; read: "leftColumn" }
        Property { name: "rightColumn"; revision: 1536; type: "int"; isReadonly: true; read: "rightColumn" }
        Property { name: "topRow"; revision: 1536; type: "int"; isReadonly: true; read: "topRow" }
        Property { name: "bottomRow"; revision: 1536; type: "int"; isReadonly: true; read: "bottomRow" }
        Signal { name: "syncViewChanged"; revision: 526 }
        Signal { name: "syncDirectionChanged"; revision: 526 }
        Signal { name: "leftColumnChanged"; revision: 1536 }
        Signal { name: "rightColumnChanged"; revision: 1536 }
        Signal { name: "topRowChanged"; revision: 1536 }
        Signal { name: "bottomRowChanged"; revision: 1536 }
        Method { name: "_q_componentFinalized" }
        Method { name: "forceLayout" }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "cell"; type: "QPoint" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "cell"; type: "QPoint" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method {
            name: "positionViewAtCell"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "positionViewAtRow"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "positionViewAtRow"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "positionViewAtColumn"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "positionViewAtColumn"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "alignment"; type: "Qt::Alignment" }
        }
        Method {
            name: "itemAtCell"
            type: "QQuickItem*"
            Parameter { name: "cell"; type: "QPoint" }
        }
        Method {
            name: "itemAtCell"
            type: "QQuickItem*"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "includeSpacing"; type: "bool" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "includeSpacing"; type: "bool" }
        }
        Method {
            name: "cellAtPos"
            type: "QPoint"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "private/qquicklabel_p.h"
        name: "QQuickText"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        Enum {
            name: "HAlignment"
            values: [
                "AlignLeft",
                "AlignRight",
                "AlignHCenter",
                "AlignJustify"
            ]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "TextStyle"
            values: ["Normal", "Outline", "Raised", "Sunken"]
        }
        Enum {
            name: "TextFormat"
            values: [
                "PlainText",
                "RichText",
                "MarkdownText",
                "AutoText",
                "StyledText"
            ]
        }
        Enum {
            name: "TextElideMode"
            values: ["ElideLeft", "ElideRight", "ElideMiddle", "ElideNone"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Enum {
            name: "RenderType"
            values: ["QtRendering", "NativeRendering"]
        }
        Enum {
            name: "RenderTypeQuality"
            values: [
                "DefaultRenderTypeQuality",
                "LowRenderTypeQuality",
                "NormalRenderTypeQuality",
                "HighRenderTypeQuality",
                "VeryHighRenderTypeQuality"
            ]
        }
        Enum {
            name: "LineHeightMode"
            values: ["ProportionalHeight", "FixedHeight"]
        }
        Enum {
            name: "FontSizeMode"
            values: ["FixedSize", "HorizontalFit", "VerticalFit", "Fit"]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property { name: "linkColor"; type: "QColor"; read: "linkColor"; write: "setLinkColor" }
        Property { name: "style"; type: "TextStyle"; read: "style"; write: "setStyle" }
        Property { name: "styleColor"; type: "QColor"; read: "styleColor"; write: "setStyleColor" }
        Property { name: "horizontalAlignment"; type: "HAlignment"; read: "hAlign"; write: "setHAlign" }
        Property {
            name: "effectiveHorizontalAlignment"
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property { name: "verticalAlignment"; type: "VAlignment"; read: "vAlign"; write: "setVAlign" }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property { name: "lineCount"; type: "int"; isReadonly: true; read: "lineCount" }
        Property { name: "truncated"; type: "bool"; isReadonly: true; read: "truncated" }
        Property {
            name: "maximumLineCount"
            type: "int"
            read: "maximumLineCount"
            write: "setMaximumLineCount"
        }
        Property { name: "textFormat"; type: "TextFormat"; read: "textFormat"; write: "setTextFormat" }
        Property { name: "elide"; type: "TextElideMode"; read: "elideMode"; write: "setElideMode" }
        Property { name: "contentWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "contentHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "lineHeight"; type: "double"; read: "lineHeight"; write: "setLineHeight" }
        Property {
            name: "lineHeightMode"
            type: "LineHeightMode"
            read: "lineHeightMode"
            write: "setLineHeightMode"
        }
        Property { name: "baseUrl"; type: "QUrl"; read: "baseUrl"; write: "setBaseUrl" }
        Property {
            name: "minimumPixelSize"
            type: "int"
            read: "minimumPixelSize"
            write: "setMinimumPixelSize"
        }
        Property {
            name: "minimumPointSize"
            type: "int"
            read: "minimumPointSize"
            write: "setMinimumPointSize"
        }
        Property {
            name: "fontSizeMode"
            type: "FontSizeMode"
            read: "fontSizeMode"
            write: "setFontSizeMode"
        }
        Property { name: "renderType"; type: "RenderType"; read: "renderType"; write: "setRenderType" }
        Property {
            name: "hoveredLink"
            revision: 514
            type: "QString"
            isReadonly: true
            read: "hoveredLink"
        }
        Property {
            name: "renderTypeQuality"
            revision: 1536
            type: "int"
            read: "renderTypeQuality"
            write: "setRenderTypeQuality"
        }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Property { name: "fontInfo"; revision: 521; type: "QJSValue"; isReadonly: true; read: "fontInfo" }
        Property { name: "advance"; revision: 522; type: "QSizeF"; isReadonly: true; read: "advance" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "linkActivated"
            Parameter { name: "link"; type: "QString" }
        }
        Signal {
            name: "linkHovered"
            revision: 514
            Parameter { name: "link"; type: "QString" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "styleChanged"
            Parameter { name: "style"; type: "QQuickText::TextStyle" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickText::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickText::VAlignment" }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "textFormat"; type: "QQuickText::TextFormat" }
        }
        Signal {
            name: "elideModeChanged"
            Parameter { name: "mode"; type: "QQuickText::TextElideMode" }
        }
        Signal { name: "contentSizeChanged" }
        Signal {
            name: "contentWidthChanged"
            Parameter { name: "contentWidth"; type: "double" }
        }
        Signal {
            name: "contentHeightChanged"
            Parameter { name: "contentHeight"; type: "double" }
        }
        Signal {
            name: "lineHeightChanged"
            Parameter { name: "lineHeight"; type: "double" }
        }
        Signal {
            name: "lineHeightModeChanged"
            Parameter { name: "mode"; type: "LineHeightMode" }
        }
        Signal {
            name: "lineLaidOut"
            Parameter { name: "line"; type: "QQuickTextLine"; isPointer: true }
        }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Signal { name: "fontInfoChanged"; revision: 521 }
        Signal { name: "renderTypeQualityChanged"; revision: 1536 }
        Method { name: "q_updateLayout" }
        Method { name: "triggerPreprocess" }
        Method { name: "imageDownloadFinished" }
        Method { name: "forceLayout"; revision: 521 }
        Method {
            name: "linkAt"
            revision: 515
            type: "QString"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "private/qquicktextarea_p.h"
        name: "QQuickTextArea"
        accessSemantics: "reference"
        prototype: "QQuickTextEdit"
        exports: [
            "QtQuick.Templates/TextArea 2.0",
            "QtQuick.Templates/TextArea 2.1",
            "QtQuick.Templates/TextArea 2.2",
            "QtQuick.Templates/TextArea 2.3",
            "QtQuick.Templates/TextArea 2.4",
            "QtQuick.Templates/TextArea 2.5",
            "QtQuick.Templates/TextArea 2.6",
            "QtQuick.Templates/TextArea 2.7",
            "QtQuick.Templates/TextArea 2.10",
            "QtQuick.Templates/TextArea 2.11",
            "QtQuick.Templates/TextArea 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            522,
            523,
            1536
        ]
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property {
            name: "implicitWidth"
            type: "double"
            read: "implicitWidth"
            write: "setImplicitWidth"
        }
        Property {
            name: "implicitHeight"
            type: "double"
            read: "implicitHeight"
            write: "setImplicitHeight"
        }
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
        }
        Property {
            name: "placeholderText"
            type: "QString"
            read: "placeholderText"
            write: "setPlaceholderText"
        }
        Property {
            name: "focusReason"
            type: "Qt::FocusReason"
            read: "focusReason"
            write: "setFocusReason"
        }
        Property { name: "hovered"; revision: 513; type: "bool"; isReadonly: true; read: "isHovered" }
        Property {
            name: "hoverEnabled"
            revision: 513
            type: "bool"
            read: "isHoverEnabled"
            write: "setHoverEnabled"
        }
        Property {
            name: "placeholderTextColor"
            revision: 517
            type: "QColor"
            read: "placeholderTextColor"
            write: "setPlaceholderTextColor"
        }
        Property {
            name: "implicitBackgroundWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundWidth"
        }
        Property {
            name: "implicitBackgroundHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundHeight"
        }
        Property { name: "topInset"; revision: 517; type: "double"; read: "topInset"; write: "setTopInset" }
        Property {
            name: "leftInset"
            revision: 517
            type: "double"
            read: "leftInset"
            write: "setLeftInset"
        }
        Property {
            name: "rightInset"
            revision: 517
            type: "double"
            read: "rightInset"
            write: "setRightInset"
        }
        Property {
            name: "bottomInset"
            revision: 517
            type: "double"
            read: "bottomInset"
            write: "setBottomInset"
        }
        Signal { name: "implicitWidthChanged3" }
        Signal { name: "implicitHeightChanged3" }
        Signal {
            name: "pressAndHold"
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "pressed"
            revision: 513
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            revision: 513
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal { name: "hoveredChanged"; revision: 513 }
        Signal { name: "hoverEnabledChanged"; revision: 513 }
        Signal { name: "placeholderTextColorChanged"; revision: 517 }
        Signal { name: "implicitBackgroundWidthChanged"; revision: 517 }
        Signal { name: "implicitBackgroundHeightChanged"; revision: 517 }
        Signal { name: "topInsetChanged"; revision: 517 }
        Signal { name: "leftInsetChanged"; revision: 517 }
        Signal { name: "rightInsetChanged"; revision: 517 }
        Signal { name: "bottomInsetChanged"; revision: 517 }
    }
    Component {
        file: "private/qquicktextarea_p.h"
        name: "QQuickTextEdit"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        Enum {
            name: "HAlignment"
            values: [
                "AlignLeft",
                "AlignRight",
                "AlignHCenter",
                "AlignJustify"
            ]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "TextFormat"
            values: ["PlainText", "RichText", "AutoText", "MarkdownText"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Enum {
            name: "SelectionMode"
            values: ["SelectCharacters", "SelectWords"]
        }
        Enum {
            name: "RenderType"
            values: ["QtRendering", "NativeRendering"]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "selectionColor"
            type: "QColor"
            read: "selectionColor"
            write: "setSelectionColor"
        }
        Property {
            name: "selectedTextColor"
            type: "QColor"
            read: "selectedTextColor"
            write: "setSelectedTextColor"
        }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "horizontalAlignment"; type: "HAlignment"; read: "hAlign"; write: "setHAlign" }
        Property {
            name: "effectiveHorizontalAlignment"
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property { name: "verticalAlignment"; type: "VAlignment"; read: "vAlign"; write: "setVAlign" }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property { name: "lineCount"; type: "int"; isReadonly: true; read: "lineCount" }
        Property { name: "length"; type: "int"; isReadonly: true; read: "length" }
        Property { name: "contentWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "contentHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "textFormat"; type: "TextFormat"; read: "textFormat"; write: "setTextFormat" }
        Property { name: "readOnly"; type: "bool"; read: "isReadOnly"; write: "setReadOnly" }
        Property {
            name: "cursorVisible"
            type: "bool"
            read: "isCursorVisible"
            write: "setCursorVisible"
        }
        Property {
            name: "cursorPosition"
            type: "int"
            read: "cursorPosition"
            write: "setCursorPosition"
        }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true; read: "cursorRectangle" }
        Property {
            name: "cursorDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "cursorDelegate"
            write: "setCursorDelegate"
        }
        Property { name: "overwriteMode"; type: "bool"; read: "overwriteMode"; write: "setOverwriteMode" }
        Property { name: "selectionStart"; type: "int"; isReadonly: true; read: "selectionStart" }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true; read: "selectionEnd" }
        Property { name: "selectedText"; type: "QString"; isReadonly: true; read: "selectedText" }
        Property {
            name: "activeFocusOnPress"
            type: "bool"
            read: "focusOnPress"
            write: "setFocusOnPress"
        }
        Property {
            name: "persistentSelection"
            type: "bool"
            read: "persistentSelection"
            write: "setPersistentSelection"
        }
        Property { name: "textMargin"; type: "double"; read: "textMargin"; write: "setTextMargin" }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
        }
        Property {
            name: "selectByKeyboard"
            revision: 513
            type: "bool"
            read: "selectByKeyboard"
            write: "setSelectByKeyboard"
        }
        Property { name: "selectByMouse"; type: "bool"; read: "selectByMouse"; write: "setSelectByMouse" }
        Property {
            name: "mouseSelectionMode"
            type: "SelectionMode"
            read: "mouseSelectionMode"
            write: "setMouseSelectionMode"
        }
        Property { name: "canPaste"; type: "bool"; isReadonly: true; read: "canPaste" }
        Property { name: "canUndo"; type: "bool"; isReadonly: true; read: "canUndo" }
        Property { name: "canRedo"; type: "bool"; isReadonly: true; read: "canRedo" }
        Property {
            name: "inputMethodComposing"
            type: "bool"
            isReadonly: true
            read: "isInputMethodComposing"
        }
        Property { name: "baseUrl"; type: "QUrl"; read: "baseUrl"; write: "setBaseUrl" }
        Property { name: "renderType"; type: "RenderType"; read: "renderType"; write: "setRenderType" }
        Property {
            name: "textDocument"
            revision: 513
            type: "QQuickTextDocument"
            isReadonly: true
            isPointer: true
            read: "textDocument"
        }
        Property {
            name: "hoveredLink"
            revision: 514
            type: "QString"
            isReadonly: true
            read: "hoveredLink"
        }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Property {
            name: "preeditText"
            revision: 519
            type: "QString"
            isReadonly: true
            read: "preeditText"
        }
        Property {
            name: "tabStopDistance"
            revision: 522
            type: "double"
            read: "tabStopDistance"
            write: "setTabStopDistance"
        }
        Signal { name: "preeditTextChanged"; revision: 519 }
        Signal { name: "contentSizeChanged" }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "selectionColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "selectedTextColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextEdit::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextEdit::VAlignment" }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "textFormat"; type: "QQuickTextEdit::TextFormat" }
        }
        Signal {
            name: "readOnlyChanged"
            Parameter { name: "isReadOnly"; type: "bool" }
        }
        Signal {
            name: "cursorVisibleChanged"
            Parameter { name: "isCursorVisible"; type: "bool" }
        }
        Signal {
            name: "overwriteModeChanged"
            Parameter { name: "overwriteMode"; type: "bool" }
        }
        Signal {
            name: "activeFocusOnPressChanged"
            Parameter { name: "activeFocusOnPressed"; type: "bool" }
        }
        Signal {
            name: "persistentSelectionChanged"
            Parameter { name: "isPersistentSelection"; type: "bool" }
        }
        Signal {
            name: "textMarginChanged"
            Parameter { name: "textMargin"; type: "double" }
        }
        Signal {
            name: "selectByKeyboardChanged"
            revision: 513
            Parameter { name: "selectByKeyboard"; type: "bool" }
        }
        Signal {
            name: "selectByMouseChanged"
            Parameter { name: "selectByMouse"; type: "bool" }
        }
        Signal {
            name: "mouseSelectionModeChanged"
            Parameter { name: "mode"; type: "QQuickTextEdit::SelectionMode" }
        }
        Signal {
            name: "linkActivated"
            Parameter { name: "link"; type: "QString" }
        }
        Signal {
            name: "linkHovered"
            revision: 514
            Parameter { name: "link"; type: "QString" }
        }
        Signal { name: "editingFinished"; revision: 518 }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Signal {
            name: "tabStopDistanceChanged"
            revision: 522
            Parameter { name: "distance"; type: "double" }
        }
        Method { name: "selectAll" }
        Method { name: "selectWord" }
        Method {
            name: "select"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "deselect" }
        Method {
            name: "isRightToLeft"
            type: "bool"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method {
            name: "insert"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "remove"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "append"
            revision: 514
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "clear"; revision: 519 }
        Method { name: "q_textChanged" }
        Method {
            name: "q_contentsChange"
            Parameter { type: "int" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method { name: "updateSelection" }
        Method { name: "moveCursorDelegate" }
        Method { name: "createCursor" }
        Method { name: "q_canPasteChanged" }
        Method { name: "updateWholeDocument" }
        Method {
            name: "invalidateBlock"
            Parameter { name: "block"; type: "QTextBlock" }
        }
        Method { name: "updateCursor" }
        Method {
            name: "q_linkHovered"
            Parameter { name: "link"; type: "QString" }
        }
        Method {
            name: "q_markerHovered"
            Parameter { name: "hovered"; type: "bool" }
        }
        Method { name: "q_updateAlignment" }
        Method { name: "updateSize" }
        Method { name: "triggerPreprocess" }
        Method {
            name: "inputMethodQuery"
            revision: 516
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Method {
            name: "positionToRectangle"
            type: "QRectF"
            Parameter { type: "int" }
        }
        Method {
            name: "positionAt"
            type: "int"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
            Parameter { name: "mode"; type: "SelectionMode" }
        }
        Method {
            name: "getText"
            type: "QString"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "getFormattedText"
            type: "QString"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "linkAt"
            revision: 515
            type: "QString"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        file: "private/qquicktextfield_p.h"
        name: "QQuickTextField"
        accessSemantics: "reference"
        prototype: "QQuickTextInput"
        exports: [
            "QtQuick.Templates/TextField 2.0",
            "QtQuick.Templates/TextField 2.1",
            "QtQuick.Templates/TextField 2.2",
            "QtQuick.Templates/TextField 2.4",
            "QtQuick.Templates/TextField 2.5",
            "QtQuick.Templates/TextField 2.6",
            "QtQuick.Templates/TextField 2.7",
            "QtQuick.Templates/TextField 2.9",
            "QtQuick.Templates/TextField 2.11",
            "QtQuick.Templates/TextField 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            516,
            517,
            518,
            519,
            521,
            523,
            1536
        ]
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property {
            name: "implicitWidth"
            type: "double"
            read: "implicitWidth"
            write: "setImplicitWidth"
        }
        Property {
            name: "implicitHeight"
            type: "double"
            read: "implicitHeight"
            write: "setImplicitHeight"
        }
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
        }
        Property {
            name: "placeholderText"
            type: "QString"
            read: "placeholderText"
            write: "setPlaceholderText"
        }
        Property {
            name: "focusReason"
            type: "Qt::FocusReason"
            read: "focusReason"
            write: "setFocusReason"
        }
        Property { name: "hovered"; revision: 513; type: "bool"; isReadonly: true; read: "isHovered" }
        Property {
            name: "hoverEnabled"
            revision: 513
            type: "bool"
            read: "isHoverEnabled"
            write: "setHoverEnabled"
        }
        Property {
            name: "placeholderTextColor"
            revision: 517
            type: "QColor"
            read: "placeholderTextColor"
            write: "setPlaceholderTextColor"
        }
        Property {
            name: "implicitBackgroundWidth"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundWidth"
        }
        Property {
            name: "implicitBackgroundHeight"
            revision: 517
            type: "double"
            isReadonly: true
            read: "implicitBackgroundHeight"
        }
        Property { name: "topInset"; revision: 517; type: "double"; read: "topInset"; write: "setTopInset" }
        Property {
            name: "leftInset"
            revision: 517
            type: "double"
            read: "leftInset"
            write: "setLeftInset"
        }
        Property {
            name: "rightInset"
            revision: 517
            type: "double"
            read: "rightInset"
            write: "setRightInset"
        }
        Property {
            name: "bottomInset"
            revision: 517
            type: "double"
            read: "bottomInset"
            write: "setBottomInset"
        }
        Signal { name: "implicitWidthChanged3" }
        Signal { name: "implicitHeightChanged3" }
        Signal {
            name: "pressAndHold"
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "pressed"
            revision: 513
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            revision: 513
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal { name: "hoveredChanged"; revision: 513 }
        Signal { name: "hoverEnabledChanged"; revision: 513 }
        Signal { name: "placeholderTextColorChanged"; revision: 517 }
        Signal { name: "implicitBackgroundWidthChanged"; revision: 517 }
        Signal { name: "implicitBackgroundHeightChanged"; revision: 517 }
        Signal { name: "topInsetChanged"; revision: 517 }
        Signal { name: "leftInsetChanged"; revision: 517 }
        Signal { name: "rightInsetChanged"; revision: 517 }
        Signal { name: "bottomInsetChanged"; revision: 517 }
    }
    Component {
        file: "private/qquicktextfield_p.h"
        name: "QQuickTextInput"
        accessSemantics: "reference"
        prototype: "QQuickImplicitSizeItem"
        Enum {
            name: "EchoMode"
            values: ["Normal", "NoEcho", "Password", "PasswordEchoOnEdit"]
        }
        Enum {
            name: "HAlignment"
            values: ["AlignLeft", "AlignRight", "AlignHCenter"]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Enum {
            name: "SelectionMode"
            values: ["SelectCharacters", "SelectWords"]
        }
        Enum {
            name: "CursorPosition"
            values: ["CursorBetweenCharacters", "CursorOnCharacter"]
        }
        Enum {
            name: "RenderType"
            values: ["QtRendering", "NativeRendering"]
        }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "length"; type: "int"; isReadonly: true; read: "length" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "selectionColor"
            type: "QColor"
            read: "selectionColor"
            write: "setSelectionColor"
        }
        Property {
            name: "selectedTextColor"
            type: "QColor"
            read: "selectedTextColor"
            write: "setSelectedTextColor"
        }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont" }
        Property { name: "horizontalAlignment"; type: "HAlignment"; read: "hAlign"; write: "setHAlign" }
        Property {
            name: "effectiveHorizontalAlignment"
            type: "HAlignment"
            isReadonly: true
            read: "effectiveHAlign"
        }
        Property { name: "verticalAlignment"; type: "VAlignment"; read: "vAlign"; write: "setVAlign" }
        Property { name: "wrapMode"; type: "WrapMode"; read: "wrapMode"; write: "setWrapMode" }
        Property { name: "readOnly"; type: "bool"; read: "isReadOnly"; write: "setReadOnly" }
        Property {
            name: "cursorVisible"
            type: "bool"
            read: "isCursorVisible"
            write: "setCursorVisible"
        }
        Property {
            name: "cursorPosition"
            type: "int"
            read: "cursorPosition"
            write: "setCursorPosition"
        }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true; read: "cursorRectangle" }
        Property {
            name: "cursorDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "cursorDelegate"
            write: "setCursorDelegate"
        }
        Property { name: "overwriteMode"; type: "bool"; read: "overwriteMode"; write: "setOverwriteMode" }
        Property { name: "selectionStart"; type: "int"; isReadonly: true; read: "selectionStart" }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true; read: "selectionEnd" }
        Property { name: "selectedText"; type: "QString"; isReadonly: true; read: "selectedText" }
        Property { name: "maximumLength"; type: "int"; read: "maxLength"; write: "setMaxLength" }
        Property {
            name: "validator"
            type: "QValidator"
            isPointer: true
            read: "validator"
            write: "setValidator"
        }
        Property { name: "inputMask"; type: "QString"; read: "inputMask"; write: "setInputMask" }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
        }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true; read: "hasAcceptableInput" }
        Property { name: "echoMode"; type: "EchoMode"; read: "echoMode"; write: "setEchoMode" }
        Property {
            name: "activeFocusOnPress"
            type: "bool"
            read: "focusOnPress"
            write: "setFocusOnPress"
        }
        Property {
            name: "passwordCharacter"
            type: "QString"
            read: "passwordCharacter"
            write: "setPasswordCharacter"
        }
        Property {
            name: "passwordMaskDelay"
            revision: 516
            type: "int"
            read: "passwordMaskDelay"
            write: "setPasswordMaskDelay"
        }
        Property { name: "displayText"; type: "QString"; isReadonly: true; read: "displayText" }
        Property {
            name: "preeditText"
            revision: 519
            type: "QString"
            isReadonly: true
            read: "preeditText"
        }
        Property { name: "autoScroll"; type: "bool"; read: "autoScroll"; write: "setAutoScroll" }
        Property { name: "selectByMouse"; type: "bool"; read: "selectByMouse"; write: "setSelectByMouse" }
        Property {
            name: "mouseSelectionMode"
            type: "SelectionMode"
            read: "mouseSelectionMode"
            write: "setMouseSelectionMode"
        }
        Property {
            name: "persistentSelection"
            type: "bool"
            read: "persistentSelection"
            write: "setPersistentSelection"
        }
        Property { name: "canPaste"; type: "bool"; isReadonly: true; read: "canPaste" }
        Property { name: "canUndo"; type: "bool"; isReadonly: true; read: "canUndo" }
        Property { name: "canRedo"; type: "bool"; isReadonly: true; read: "canRedo" }
        Property {
            name: "inputMethodComposing"
            type: "bool"
            isReadonly: true
            read: "isInputMethodComposing"
        }
        Property { name: "contentWidth"; type: "double"; isReadonly: true; read: "contentWidth" }
        Property { name: "contentHeight"; type: "double"; isReadonly: true; read: "contentHeight" }
        Property { name: "renderType"; type: "RenderType"; read: "renderType"; write: "setRenderType" }
        Property { name: "padding"; revision: 518; type: "double"; read: "padding"; write: "setPadding" }
        Property {
            name: "topPadding"
            revision: 518
            type: "double"
            read: "topPadding"
            write: "setTopPadding"
        }
        Property {
            name: "leftPadding"
            revision: 518
            type: "double"
            read: "leftPadding"
            write: "setLeftPadding"
        }
        Property {
            name: "rightPadding"
            revision: 518
            type: "double"
            read: "rightPadding"
            write: "setRightPadding"
        }
        Property {
            name: "bottomPadding"
            revision: 518
            type: "double"
            read: "bottomPadding"
            write: "setBottomPadding"
        }
        Signal { name: "accepted" }
        Signal { name: "editingFinished"; revision: 514 }
        Signal { name: "textEdited"; revision: 521 }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextInput::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickTextInput::VAlignment" }
        }
        Signal {
            name: "readOnlyChanged"
            Parameter { name: "isReadOnly"; type: "bool" }
        }
        Signal {
            name: "cursorVisibleChanged"
            Parameter { name: "isCursorVisible"; type: "bool" }
        }
        Signal {
            name: "overwriteModeChanged"
            Parameter { name: "overwriteMode"; type: "bool" }
        }
        Signal {
            name: "maximumLengthChanged"
            Parameter { name: "maximumLength"; type: "int" }
        }
        Signal {
            name: "inputMaskChanged"
            Parameter { name: "inputMask"; type: "QString" }
        }
        Signal {
            name: "echoModeChanged"
            Parameter { name: "echoMode"; type: "QQuickTextInput::EchoMode" }
        }
        Signal {
            name: "passwordMaskDelayChanged"
            revision: 516
            Parameter { name: "delay"; type: "int" }
        }
        Signal { name: "preeditTextChanged"; revision: 519 }
        Signal {
            name: "activeFocusOnPressChanged"
            Parameter { name: "activeFocusOnPress"; type: "bool" }
        }
        Signal {
            name: "autoScrollChanged"
            Parameter { name: "autoScroll"; type: "bool" }
        }
        Signal {
            name: "selectByMouseChanged"
            Parameter { name: "selectByMouse"; type: "bool" }
        }
        Signal {
            name: "mouseSelectionModeChanged"
            Parameter { name: "mode"; type: "QQuickTextInput::SelectionMode" }
        }
        Signal { name: "contentSizeChanged" }
        Signal { name: "paddingChanged"; revision: 518 }
        Signal { name: "topPaddingChanged"; revision: 518 }
        Signal { name: "leftPaddingChanged"; revision: 518 }
        Signal { name: "rightPaddingChanged"; revision: 518 }
        Signal { name: "bottomPaddingChanged"; revision: 518 }
        Method { name: "selectAll" }
        Method { name: "selectWord" }
        Method {
            name: "select"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "deselect" }
        Method {
            name: "isRightToLeft"
            type: "bool"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method { name: "cut" }
        Method { name: "copy" }
        Method { name: "paste" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method {
            name: "insert"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "remove"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Method {
            name: "ensureVisible"
            revision: 516
            Parameter { name: "position"; type: "int" }
        }
        Method { name: "clear"; revision: 519 }
        Method { name: "selectionChanged" }
        Method { name: "createCursor" }
        Method {
            name: "updateCursorRectangle"
            Parameter { name: "scroll"; type: "bool" }
        }
        Method { name: "updateCursorRectangle" }
        Method { name: "q_canPasteChanged" }
        Method { name: "q_updateAlignment" }
        Method { name: "triggerPreprocess" }
        Method { name: "q_validatorChanged" }
        Method {
            name: "positionAt"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "positionToRectangle"
            type: "QRectF"
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "moveCursorSelection"
            Parameter { name: "pos"; type: "int" }
            Parameter { name: "mode"; type: "SelectionMode" }
        }
        Method {
            name: "inputMethodQuery"
            revision: 516
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Method {
            name: "getText"
            type: "QString"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
    }
    Component {
        file: "private/qquicktoolbar_p.h"
        name: "QQuickToolBar"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPane"
        exports: [
            "QtQuick.Templates/ToolBar 2.0",
            "QtQuick.Templates/ToolBar 2.1",
            "QtQuick.Templates/ToolBar 2.4",
            "QtQuick.Templates/ToolBar 2.5",
            "QtQuick.Templates/ToolBar 2.7",
            "QtQuick.Templates/ToolBar 2.11",
            "QtQuick.Templates/ToolBar 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 517, 519, 523, 1536]
        Enum {
            name: "Position"
            values: ["Header", "Footer"]
        }
        Property { name: "position"; type: "Position"; read: "position"; write: "setPosition" }
    }
    Component {
        file: "private/qquicktoolbutton_p.h"
        name: "QQuickToolButton"
        accessSemantics: "reference"
        prototype: "QQuickButton"
        exports: [
            "QtQuick.Templates/ToolButton 2.0",
            "QtQuick.Templates/ToolButton 2.1",
            "QtQuick.Templates/ToolButton 2.2",
            "QtQuick.Templates/ToolButton 2.3",
            "QtQuick.Templates/ToolButton 2.4",
            "QtQuick.Templates/ToolButton 2.5",
            "QtQuick.Templates/ToolButton 2.7",
            "QtQuick.Templates/ToolButton 2.11",
            "QtQuick.Templates/ToolButton 6.0"
        ]
        exportMetaObjectRevisions: [
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            523,
            1536
        ]
    }
    Component {
        file: "private/qquicktoolseparator_p.h"
        name: "QQuickToolSeparator"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/ToolSeparator 2.1",
            "QtQuick.Templates/ToolSeparator 2.4",
            "QtQuick.Templates/ToolSeparator 2.5",
            "QtQuick.Templates/ToolSeparator 2.7",
            "QtQuick.Templates/ToolSeparator 2.11",
            "QtQuick.Templates/ToolSeparator 6.0"
        ]
        exportMetaObjectRevisions: [513, 516, 517, 519, 523, 1536]
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            write: "setOrientation"
        }
        Property { name: "horizontal"; type: "bool"; isReadonly: true; read: "isHorizontal" }
        Property { name: "vertical"; type: "bool"; isReadonly: true; read: "isVertical" }
    }
    Component {
        file: "private/qquicktooltip_p.h"
        name: "QQuickToolTip"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickPopup"
        exports: [
            "QtQuick.Templates/ToolTip 2.0",
            "QtQuick.Templates/ToolTip 2.1",
            "QtQuick.Templates/ToolTip 2.3",
            "QtQuick.Templates/ToolTip 2.5",
            "QtQuick.Templates/ToolTip 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 515, 517, 1536]
        attachedType: "QQuickToolTipAttached"
        Property { name: "delay"; type: "int"; read: "delay"; write: "setDelay" }
        Property { name: "timeout"; type: "int"; read: "timeout"; write: "setTimeout" }
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Method {
            name: "show"
            revision: 517
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "ms"; type: "int" }
        }
        Method {
            name: "show"
            revision: 517
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "hide"; revision: 517 }
    }
    Component {
        file: "private/qquicktooltip_p.h"
        name: "QQuickToolTipAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "text"; type: "QString"; read: "text"; write: "setText" }
        Property { name: "delay"; type: "int"; read: "delay"; write: "setDelay" }
        Property { name: "timeout"; type: "int"; read: "timeout"; write: "setTimeout" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property {
            name: "toolTip"
            type: "QQuickToolTip"
            isReadonly: true
            isPointer: true
            read: "toolTip"
        }
        Method {
            name: "show"
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "ms"; type: "int" }
        }
        Method {
            name: "show"
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "hide" }
    }
    Component {
        file: "private/qquicktumbler_p.h"
        name: "QQuickTumbler"
        accessSemantics: "reference"
        prototype: "QQuickControl"
        exports: [
            "QtQuick.Templates/Tumbler 2.0",
            "QtQuick.Templates/Tumbler 2.1",
            "QtQuick.Templates/Tumbler 2.2",
            "QtQuick.Templates/Tumbler 2.4",
            "QtQuick.Templates/Tumbler 2.5",
            "QtQuick.Templates/Tumbler 2.7",
            "QtQuick.Templates/Tumbler 2.11",
            "QtQuick.Templates/Tumbler 6.0"
        ]
        exportMetaObjectRevisions: [512, 513, 514, 516, 517, 519, 523, 1536]
        attachedType: "QQuickTumblerAttached"
        Enum {
            name: "PositionMode"
            values: [
                "Beginning",
                "Center",
                "End",
                "Visible",
                "Contain",
                "SnapPosition"
            ]
        }
        Property { name: "model"; type: "QVariant"; read: "model"; write: "setModel" }
        Property { name: "count"; type: "int"; isReadonly: true; read: "count" }
        Property { name: "currentIndex"; type: "int"; read: "currentIndex"; write: "setCurrentIndex" }
        Property {
            name: "currentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "currentItem"
        }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property {
            name: "visibleItemCount"
            type: "int"
            read: "visibleItemCount"
            write: "setVisibleItemCount"
        }
        Property { name: "wrap"; revision: 513; type: "bool"; read: "wrap"; write: "setWrap" }
        Property { name: "moving"; revision: 514; type: "bool"; isReadonly: true; read: "isMoving" }
        Signal { name: "wrapChanged"; revision: 513 }
        Signal { name: "movingChanged"; revision: 514 }
        Method { name: "_q_updateItemWidths" }
        Method { name: "_q_updateItemHeights" }
        Method { name: "_q_onViewCurrentIndexChanged" }
        Method { name: "_q_onViewCountChanged" }
        Method { name: "_q_onViewOffsetChanged" }
        Method { name: "_q_onViewContentYChanged" }
        Method {
            name: "positionViewAtIndex"
            revision: 517
            Parameter { name: "index"; type: "int" }
            Parameter { name: "mode"; type: "PositionMode" }
        }
    }
    Component {
        file: "private/qquicktumbler_p.h"
        name: "QQuickTumblerAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "tumbler"
            type: "QQuickTumbler"
            isReadonly: true
            isPointer: true
            read: "tumbler"
        }
        Property { name: "displacement"; type: "double"; isReadonly: true; read: "displacement" }
    }
    Component {
        file: "private/qquickheaderview_p.h"
        name: "QQuickVerticalHeaderView"
        accessSemantics: "reference"
        prototype: "QQuickHeaderViewBase"
        exports: [
            "QtQuick.Templates/VerticalHeaderView 2.15",
            "QtQuick.Templates/VerticalHeaderView 6.0"
        ]
        exportMetaObjectRevisions: [527, 1536]
    }
    Component {
        file: "private/qquickapplicationwindow_p.h"
        name: "QQuickWindow"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWindow"
        Enum {
            name: "CreateTextureOptions"
            alias: "CreateTextureOption"
            isFlag: true
            values: [
                "TextureHasAlphaChannel",
                "TextureHasMipmaps",
                "TextureOwnsGLTexture",
                "TextureCanUseAtlas",
                "TextureIsOpaque"
            ]
        }
        Enum {
            name: "SceneGraphError"
            values: ["ContextNotAvailable"]
        }
        Enum {
            name: "TextRenderType"
            values: ["QtTextRendering", "NativeTextRendering"]
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true; read: "data" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "contentItem"
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "contentItem"
        }
        Property {
            name: "activeFocusItem"
            revision: 513
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
            read: "activeFocusItem"
        }
        Signal { name: "frameSwapped" }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 514 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 514 }
        Signal { name: "sceneGraphAboutToStop"; revision: 514 }
        Signal {
            name: "closing"
            revision: 513
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 513 }
        Signal {
            name: "sceneGraphError"
            revision: 514
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "QString" }
        }
        Signal { name: "beforeRenderPassRecording"; revision: 526 }
        Signal { name: "afterRenderPassRecording"; revision: 526 }
        Signal { name: "paletteChanged"; revision: 1536 }
        Signal { name: "paletteCreated"; revision: 1536 }
        Signal { name: "beforeFrameBegin"; revision: 1536 }
        Signal { name: "afterFrameEnd"; revision: 1536 }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Method { name: "maybeUpdate" }
        Method { name: "cleanupSceneGraph" }
        Method { name: "physicalDpiChanged" }
        Method {
            name: "handleScreenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Method {
            name: "setTransientParent_helper"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "runJobsAfterSwap" }
        Method {
            name: "handleApplicationStateChanged"
            Parameter { name: "state"; type: "Qt::ApplicationState" }
        }
    }
    Component {
        file: "private/qquickapplicationwindow_p.h"
        name: "QQuickWindowQmlImpl"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        interfaces: ["QQmlParserStatus"]
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property { name: "visibility"; type: "Visibility"; read: "visibility"; write: "setVisibility" }
        Property {
            name: "screen"
            revision: 515
            type: "QObject"
            isPointer: true
            read: "screen"
            write: "setScreen"
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "screenChanged"; revision: 515 }
        Method { name: "setWindowVisibility" }
    }
    Component {
        file: "private/qquickapplicationwindow_p.h"
        name: "QWindow"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: [
                "Hidden",
                "AutomaticVisibility",
                "Windowed",
                "Minimized",
                "Maximized",
                "FullScreen"
            ]
        }
        Enum {
            name: "AncestorMode"
            values: ["ExcludeTransients", "IncludeTransients"]
        }
        Property { name: "title"; type: "QString"; read: "title"; write: "setTitle" }
        Property { name: "modality"; type: "Qt::WindowModality"; read: "modality"; write: "setModality" }
        Property { name: "flags"; type: "Qt::WindowFlags"; read: "flags"; write: "setFlags" }
        Property { name: "x"; type: "int"; read: "x"; write: "setX" }
        Property { name: "y"; type: "int"; read: "y"; write: "setY" }
        Property { name: "width"; type: "int"; read: "width"; write: "setWidth" }
        Property { name: "height"; type: "int"; read: "height"; write: "setHeight" }
        Property { name: "minimumWidth"; type: "int"; read: "minimumWidth"; write: "setMinimumWidth" }
        Property { name: "minimumHeight"; type: "int"; read: "minimumHeight"; write: "setMinimumHeight" }
        Property { name: "maximumWidth"; type: "int"; read: "maximumWidth"; write: "setMaximumWidth" }
        Property { name: "maximumHeight"; type: "int"; read: "maximumHeight"; write: "setMaximumHeight" }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible" }
        Property { name: "active"; revision: 513; type: "bool"; isReadonly: true; read: "isActive" }
        Property {
            name: "visibility"
            revision: 513
            type: "Visibility"
            read: "visibility"
            write: "setVisibility"
        }
        Property {
            name: "contentOrientation"
            type: "Qt::ScreenOrientation"
            read: "contentOrientation"
            write: "reportContentOrientationChange"
        }
        Property { name: "opacity"; revision: 513; type: "double"; read: "opacity"; write: "setOpacity" }
        Property {
            name: "transientParent"
            revision: 525
            type: "QWindow"
            isPointer: true
            write: "setTransientParent"
        }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 514
            Parameter { name: "title"; type: "QString" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 513
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 513 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 513
            Parameter { name: "opacity"; type: "double" }
        }
        Signal {
            name: "transientParentChanged"
            revision: 525
            Parameter { name: "transientParent"; type: "QWindow"; isPointer: true }
        }
        Method { name: "requestActivate"; revision: 513 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "startSystemResize"
            type: "bool"
            Parameter { name: "edges"; type: "Qt::Edges" }
        }
        Method { name: "startSystemMove"; type: "bool" }
        Method {
            name: "setTitle"
            Parameter { type: "QString" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "posx"; type: "int" }
            Parameter { name: "posy"; type: "int" }
            Parameter { name: "w"; type: "int" }
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "rect"; type: "QRect" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 513
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 515 }
        Method { name: "_q_clearAlert" }
    }
}
