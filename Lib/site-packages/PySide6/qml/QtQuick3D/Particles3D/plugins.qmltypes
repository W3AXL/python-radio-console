import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/qquick3dparticleforeign_p.h"
        name: "QQuick3DNode"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        Enum {
            name: "TransformSpace"
            values: ["LocalSpace", "ParentSpace", "SceneSpace"]
        }
        Enum {
            name: "StaticFlags"
            values: ["None"]
        }
        Property { name: "x"; type: "float"; read: "x"; write: "setX" }
        Property { name: "y"; type: "float"; read: "y"; write: "setY" }
        Property { name: "z"; type: "float"; read: "z"; write: "setZ" }
        Property {
            name: "rotation"
            revision: 257
            type: "QQuaternion"
            read: "rotation"
            write: "setRotation"
        }
        Property {
            name: "eulerRotation"
            revision: 257
            type: "QVector3D"
            read: "eulerRotation"
            write: "setEulerRotation"
        }
        Property { name: "position"; type: "QVector3D"; read: "position"; write: "setPosition" }
        Property { name: "scale"; type: "QVector3D"; read: "scale"; write: "setScale" }
        Property { name: "pivot"; type: "QVector3D"; read: "pivot"; write: "setPivot" }
        Property { name: "opacity"; type: "float"; read: "localOpacity"; write: "setLocalOpacity" }
        Property { name: "visible"; type: "bool"; read: "visible"; write: "setVisible" }
        Property { name: "forward"; type: "QVector3D"; isReadonly: true; read: "forward" }
        Property { name: "up"; type: "QVector3D"; isReadonly: true; read: "up" }
        Property { name: "right"; type: "QVector3D"; isReadonly: true; read: "right" }
        Property { name: "scenePosition"; type: "QVector3D"; isReadonly: true; read: "scenePosition" }
        Property {
            name: "sceneRotation"
            revision: 257
            type: "QQuaternion"
            isReadonly: true
            read: "sceneRotation"
        }
        Property { name: "sceneScale"; type: "QVector3D"; isReadonly: true; read: "sceneScale" }
        Property { name: "sceneTransform"; type: "QMatrix4x4"; isReadonly: true; read: "sceneTransform" }
        Property {
            name: "staticFlags"
            revision: 257
            type: "int"
            read: "staticFlags"
            write: "setStaticFlags"
        }
        Signal { name: "rotationChanged"; revision: 257 }
        Signal { name: "eulerRotationChanged"; revision: 257 }
        Signal { name: "localOpacityChanged" }
        Method {
            name: "setX"
            Parameter { name: "x"; type: "float" }
        }
        Method {
            name: "setY"
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "setZ"
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "setRotation"
            revision: 257
            Parameter { name: "rotation"; type: "QQuaternion" }
        }
        Method {
            name: "setEulerRotation"
            revision: 257
            Parameter { name: "eulerRotation"; type: "QVector3D" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Method {
            name: "setPivot"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Method {
            name: "setLocalOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setStaticFlags"
            Parameter { name: "staticFlags"; type: "int" }
        }
        Method {
            name: "rotate"
            Parameter { name: "degrees"; type: "double" }
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "space"; type: "QQuick3DNode::TransformSpace" }
        }
        Method {
            name: "mapPositionToScene"
            type: "QVector3D"
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionFromScene"
            type: "QVector3D"
            Parameter { name: "scenePosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionToNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionFromNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionToScene"
            type: "QVector3D"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionFromScene"
            type: "QVector3D"
            Parameter { name: "sceneDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionToNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionFromNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dparticle_p.h"
        name: "QQuick3DParticle"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D.Particles3D/Particle3D 6.1"]
        isCreatable: false
        exportMetaObjectRevisions: [1537]
        Enum {
            name: "FadeType"
            values: ["FadeNone", "FadeOpacity", "FadeScale"]
        }
        Enum {
            name: "AlignMode"
            values: [
                "AlignNone",
                "AlignTowardsTarget",
                "AlignTowardsStartVelocity"
            ]
        }
        Property {
            name: "system"
            type: "QQuick3DParticleSystem"
            isPointer: true
            read: "system"
            write: "setSystem"
        }
        Property { name: "maxAmount"; type: "int"; read: "maxAmount"; write: "setMaxAmount" }
        Property { name: "color"; type: "QColor"; read: "color"; write: "setColor" }
        Property {
            name: "colorVariation"
            type: "QVector4D"
            read: "colorVariation"
            write: "setColorVariation"
        }
        Property {
            name: "unifiedColorVariation"
            type: "bool"
            read: "unifiedColorVariation"
            write: "setUnifiedColorVariation"
        }
        Property {
            name: "fadeInEffect"
            type: "FadeType"
            read: "fadeInEffect"
            write: "setFadeInEffect"
        }
        Property {
            name: "fadeOutEffect"
            type: "FadeType"
            read: "fadeOutEffect"
            write: "setFadeOutEffect"
        }
        Property {
            name: "fadeInDuration"
            type: "int"
            read: "fadeInDuration"
            write: "setFadeInDuration"
        }
        Property {
            name: "fadeOutDuration"
            type: "int"
            read: "fadeOutDuration"
            write: "setFadeOutDuration"
        }
        Property { name: "alignMode"; type: "AlignMode"; read: "alignMode"; write: "setAlignMode" }
        Property {
            name: "alignTargetPosition"
            type: "QVector3D"
            read: "alignTargetPosition"
            write: "setAlignTargetPosition"
        }
        Method {
            name: "setSystem"
            Parameter { name: "system"; type: "QQuick3DParticleSystem"; isPointer: true }
        }
        Method {
            name: "setMaxAmount"
            Parameter { name: "maxAmount"; type: "int" }
        }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setColorVariation"
            Parameter { name: "colorVariation"; type: "QVector4D" }
        }
        Method {
            name: "setUnifiedColorVariation"
            Parameter { name: "unified"; type: "bool" }
        }
        Method {
            name: "setFadeInEffect"
            Parameter { name: "fadeInEffect"; type: "QQuick3DParticle::FadeType" }
        }
        Method {
            name: "setFadeOutEffect"
            Parameter { name: "fadeOutEffect"; type: "QQuick3DParticle::FadeType" }
        }
        Method {
            name: "setFadeInDuration"
            Parameter { name: "fadeInDuration"; type: "int" }
        }
        Method {
            name: "setFadeOutDuration"
            Parameter { name: "fadeOutDuration"; type: "int" }
        }
        Method {
            name: "setAlignMode"
            Parameter { name: "alignMode"; type: "AlignMode" }
        }
        Method {
            name: "setAlignTargetPosition"
            Parameter { name: "alignPosition"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dparticleaffector_p.h"
        name: "QQuick3DParticleAffector"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D.Particles3D/Affector3D 6.1"]
        isCreatable: false
        exportMetaObjectRevisions: [1537]
        Property {
            name: "system"
            type: "QQuick3DParticleSystem"
            isPointer: true
            read: "system"
            write: "setSystem"
        }
        Property {
            name: "particles"
            type: "QQuick3DParticle"
            isList: true
            isReadonly: true
            read: "particles"
        }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Signal { name: "update" }
        Method {
            name: "setSystem"
            Parameter { name: "system"; type: "QQuick3DParticleSystem"; isPointer: true }
        }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        file: "private/qquick3dparticleattractor_p.h"
        name: "QQuick3DParticleAttractor"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleAffector"
        exports: ["QtQuick3D.Particles3D/Attractor3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property {
            name: "positionVariation"
            type: "QVector3D"
            read: "positionVariation"
            write: "setPositionVariation"
        }
        Property {
            name: "shape"
            type: "QQuick3DParticleShape"
            isPointer: true
            read: "shape"
            write: "setShape"
        }
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Property {
            name: "durationVariation"
            type: "int"
            read: "durationVariation"
            write: "setDurationVariation"
        }
        Property { name: "hideAtEnd"; type: "bool"; read: "hideAtEnd"; write: "setHideAtEnd" }
        Method {
            name: "setPositionVariation"
            Parameter { name: "positionVariation"; type: "QVector3D" }
        }
        Method {
            name: "setShape"
            Parameter { name: "shape"; type: "QQuick3DParticleShape"; isPointer: true }
        }
        Method {
            name: "setDuration"
            Parameter { name: "duration"; type: "int" }
        }
        Method {
            name: "setDurationVariation"
            Parameter { name: "durationVariation"; type: "int" }
        }
        Method {
            name: "setHideAtEnd"
            Parameter { name: "hideAtEnd"; type: "bool" }
        }
    }
    Component {
        file: "private/qquick3dparticledirection_p.h"
        name: "QQuick3DParticleDirection"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "private/qquick3dparticleemitburst_p.h"
        name: "QQuick3DParticleEmitBurst"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtQuick3D.Particles3D/EmitBurst3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property { name: "time"; type: "int"; read: "time"; write: "setTime" }
        Property { name: "amount"; type: "int"; read: "amount"; write: "setAmount" }
        Property { name: "duration"; type: "int"; read: "duration"; write: "setDuration" }
        Method {
            name: "setTime"
            Parameter { name: "time"; type: "int" }
        }
        Method {
            name: "setAmount"
            Parameter { name: "amount"; type: "int" }
        }
        Method {
            name: "setDuration"
            Parameter { name: "duration"; type: "int" }
        }
    }
    Component {
        file: "private/qquick3dparticleemitter_p.h"
        name: "QQuick3DParticleEmitter"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D.Particles3D/ParticleEmitter3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property {
            name: "system"
            type: "QQuick3DParticleSystem"
            isPointer: true
            read: "system"
            write: "setSystem"
        }
        Property {
            name: "emitBursts"
            type: "QQuick3DParticleEmitBurst"
            isList: true
            isReadonly: true
            read: "emitBursts"
        }
        Property {
            name: "velocity"
            type: "QQuick3DParticleDirection"
            isPointer: true
            read: "velocity"
            write: "setVelocity"
        }
        Property {
            name: "particle"
            type: "QQuick3DParticle"
            isPointer: true
            read: "particle"
            write: "setParticle"
        }
        Property { name: "enabled"; type: "bool"; read: "enabled"; write: "setEnabled" }
        Property {
            name: "shape"
            type: "QQuick3DParticleShape"
            isPointer: true
            read: "shape"
            write: "setShape"
        }
        Property { name: "emitRate"; type: "float"; read: "emitRate"; write: "setEmitRate" }
        Property { name: "lifeSpan"; type: "int"; read: "lifeSpan"; write: "setLifeSpan" }
        Property {
            name: "lifeSpanVariation"
            type: "int"
            read: "lifeSpanVariation"
            write: "setLifeSpanVariation"
        }
        Property {
            name: "particleScale"
            type: "float"
            read: "particleScale"
            write: "setParticleScale"
        }
        Property {
            name: "particleEndScale"
            type: "float"
            read: "particleEndScale"
            write: "setParticleEndScale"
        }
        Property {
            name: "particleScaleVariation"
            type: "float"
            read: "particleScaleVariation"
            write: "setParticleScaleVariation"
        }
        Property {
            name: "particleRotation"
            type: "QVector3D"
            read: "particleRotation"
            write: "setParticleRotation"
        }
        Property {
            name: "particleRotationVariation"
            type: "QVector3D"
            read: "particleRotationVariation"
            write: "setParticleRotationVariation"
        }
        Property {
            name: "particleRotationVelocity"
            type: "QVector3D"
            read: "particleRotationVelocity"
            write: "setParticleRotationVelocity"
        }
        Property {
            name: "particleRotationVelocityVariation"
            type: "QVector3D"
            read: "particleRotationVelocityVariation"
            write: "setParticleRotationVelocityVariation"
        }
        Property { name: "depthBias"; type: "float"; read: "depthBias"; write: "setDepthBias" }
        Signal { name: "particleRotationVariationVelocityChanged" }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setVelocity"
            Parameter { name: "velocity"; type: "QQuick3DParticleDirection"; isPointer: true }
        }
        Method {
            name: "setSystem"
            Parameter { name: "system"; type: "QQuick3DParticleSystem"; isPointer: true }
        }
        Method {
            name: "setEmitRate"
            Parameter { name: "emitRate"; type: "float" }
        }
        Method {
            name: "setParticleScale"
            Parameter { name: "particleScale"; type: "float" }
        }
        Method {
            name: "setParticleEndScale"
            Parameter { name: "particleEndScale"; type: "float" }
        }
        Method {
            name: "setParticleScaleVariation"
            Parameter { name: "particleScaleVariation"; type: "float" }
        }
        Method {
            name: "setLifeSpan"
            Parameter { name: "lifeSpan"; type: "int" }
        }
        Method {
            name: "setLifeSpanVariation"
            Parameter { name: "lifeSpanVariation"; type: "int" }
        }
        Method {
            name: "setParticle"
            Parameter { name: "particle"; type: "QQuick3DParticle"; isPointer: true }
        }
        Method {
            name: "setShape"
            Parameter { name: "shape"; type: "QQuick3DParticleShape"; isPointer: true }
        }
        Method {
            name: "setParticleRotation"
            Parameter { name: "particleRotation"; type: "QVector3D" }
        }
        Method {
            name: "setParticleRotationVariation"
            Parameter { name: "particleRotationVariation"; type: "QVector3D" }
        }
        Method {
            name: "setParticleRotationVelocity"
            Parameter { name: "particleRotationVelocity"; type: "QVector3D" }
        }
        Method {
            name: "setParticleRotationVelocityVariation"
            Parameter { name: "particleRotationVelocityVariation"; type: "QVector3D" }
        }
        Method {
            name: "setDepthBias"
            Parameter { name: "bias"; type: "float" }
        }
        Method {
            name: "burst"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "burst"
            Parameter { name: "count"; type: "int" }
            Parameter { name: "duration"; type: "int" }
        }
        Method {
            name: "burst"
            Parameter { name: "count"; type: "int" }
            Parameter { name: "duration"; type: "int" }
            Parameter { name: "position"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dparticlegravity_p.h"
        name: "QQuick3DParticleGravity"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleAffector"
        exports: ["QtQuick3D.Particles3D/Gravity3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property { name: "magnitude"; type: "float"; read: "magnitude"; write: "setMagnitude" }
        Property { name: "direction"; type: "QVector3D"; read: "direction"; write: "setDirection" }
        Method {
            name: "setDirection"
            Parameter { name: "direction"; type: "QVector3D" }
        }
        Method {
            name: "setMagnitude"
            Parameter { name: "magnitude"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dparticlemodelparticle_p.h"
        name: "QQuick3DParticleModelParticle"
        accessSemantics: "reference"
        defaultProperty: "delegate"
        prototype: "QQuick3DParticle"
        exports: ["QtQuick3D.Particles3D/ModelParticle3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
        }
        Property {
            name: "instanceTable"
            type: "QQuick3DInstancing"
            isReadonly: true
            isPointer: true
            read: "instanceTable"
        }
        Method {
            name: "setDelegate"
            Parameter { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dparticlepointrotator_p.h"
        name: "QQuick3DParticlePointRotator"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleAffector"
        exports: ["QtQuick3D.Particles3D/PointRotator3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property { name: "magnitude"; type: "float"; read: "magnitude"; write: "setMagnitude" }
        Property { name: "direction"; type: "QVector3D"; read: "direction"; write: "setDirection" }
        Property { name: "pivotPoint"; type: "QVector3D"; read: "pivotPoint"; write: "setPivotPoint" }
        Method {
            name: "setMagnitude"
            Parameter { name: "magnitude"; type: "float" }
        }
        Method {
            name: "setDirection"
            Parameter { name: "direction"; type: "QVector3D" }
        }
        Method {
            name: "setPivotPoint"
            Parameter { name: "point"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dparticleshape_p.h"
        name: "QQuick3DParticleShape"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtQuick3D.Particles3D/ParticleShape3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Enum {
            name: "ShapeType"
            values: ["Cube", "Sphere", "Cylinder"]
        }
        Property { name: "fill"; type: "bool"; read: "fill"; write: "setFill" }
        Property { name: "type"; type: "ShapeType"; read: "type"; write: "setType" }
        Property { name: "extents"; type: "QVector3D"; read: "extents"; write: "setExtents" }
        Method {
            name: "setFill"
            Parameter { name: "fill"; type: "bool" }
        }
        Method {
            name: "setType"
            Parameter { name: "type"; type: "QQuick3DParticleShape::ShapeType" }
        }
        Method {
            name: "setExtents"
            Parameter { name: "extends"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dparticlespriteparticle_p.h"
        name: "QQuick3DParticleSpriteParticle"
        accessSemantics: "reference"
        prototype: "QQuick3DParticle"
        exports: ["QtQuick3D.Particles3D/SpriteParticle3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Enum {
            name: "BlendMode"
            values: ["SourceOver", "Screen", "Multiply"]
        }
        Property { name: "blendMode"; type: "BlendMode"; read: "blendMode"; write: "setBlendMode" }
        Property {
            name: "sprite"
            type: "QQuick3DTexture"
            isPointer: true
            read: "sprite"
            write: "setSprite"
        }
        Property { name: "frameCount"; type: "int"; read: "frameCount"; write: "setFrameCount" }
        Property { name: "interpolate"; type: "bool"; read: "interpolate"; write: "setInterpolate" }
        Property { name: "billboard"; type: "bool"; read: "billboard"; write: "setBillboard" }
        Property {
            name: "particleScale"
            type: "float"
            read: "particleScale"
            write: "setParticleScale"
        }
        Property {
            name: "colorTable"
            type: "QQuick3DTexture"
            isPointer: true
            read: "colorTable"
            write: "setColorTable"
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "QQuick3DParticleSpriteParticle::BlendMode" }
        }
        Method {
            name: "setSprite"
            Parameter { name: "sprite"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setFrameCount"
            Parameter { name: "frameCount"; type: "int" }
        }
        Method {
            name: "setInterpolate"
            Parameter { name: "interpolate"; type: "bool" }
        }
        Method {
            name: "setBillboard"
            Parameter { name: "billboard"; type: "bool" }
        }
        Method {
            name: "setParticleScale"
            Parameter { name: "scale"; type: "float" }
        }
        Method {
            name: "setColorTable"
            Parameter { name: "colorTable"; type: "QQuick3DTexture"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dparticlesystem_p.h"
        name: "QQuick3DParticleSystem"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D.Particles3D/ParticleSystem3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property { name: "running"; type: "bool"; read: "isRunning"; write: "setRunning" }
        Property { name: "paused"; type: "bool"; read: "isPaused"; write: "setPaused" }
        Property { name: "startTime"; type: "int"; read: "startTime"; write: "setStartTime" }
        Property { name: "time"; type: "int"; read: "time"; write: "setTime" }
        Property { name: "useRandomSeed"; type: "bool"; read: "useRandomSeed"; write: "setUseRandomSeed" }
        Property { name: "seed"; type: "int"; read: "seed"; write: "setSeed" }
        Property { name: "logging"; type: "bool"; read: "logging"; write: "setLogging" }
        Property {
            name: "loggingData"
            type: "QQuick3DParticleSystemLogging"
            isReadonly: true
            isPointer: true
            read: "loggingData"
        }
        Method {
            name: "setRunning"
            Parameter { name: "running"; type: "bool" }
        }
        Method {
            name: "setPaused"
            Parameter { name: "paused"; type: "bool" }
        }
        Method {
            name: "setStartTime"
            Parameter { name: "startTime"; type: "int" }
        }
        Method {
            name: "setTime"
            Parameter { name: "time"; type: "int" }
        }
        Method {
            name: "setUseRandomSeed"
            Parameter { name: "randomize"; type: "bool" }
        }
        Method {
            name: "setSeed"
            Parameter { name: "seed"; type: "int" }
        }
        Method {
            name: "setLogging"
            Parameter { name: "logging"; type: "bool" }
        }
    }
    Component {
        file: "private/qquick3dparticlesystemlogging_p.h"
        name: "QQuick3DParticleSystemLogging"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "loggingInterval"
            type: "int"
            read: "loggingInterval"
            write: "setLoggingInterval"
        }
        Property { name: "updates"; type: "int"; isReadonly: true; read: "updates" }
        Property { name: "particlesMax"; type: "int"; isReadonly: true; read: "particlesMax" }
        Property { name: "particlesUsed"; type: "int"; isReadonly: true; read: "particlesUsed" }
        Property { name: "time"; type: "float"; isReadonly: true; read: "time" }
        Property { name: "timeAverage"; type: "float"; isReadonly: true; read: "timeAverage" }
        Method {
            name: "setLoggingInterval"
            Parameter { name: "interval"; type: "int" }
        }
    }
    Component {
        file: "private/qquick3dparticletargetdirection_p.h"
        name: "QQuick3DParticleTargetDirection"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleDirection"
        exports: ["QtQuick3D.Particles3D/TargetDirection3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property { name: "position"; type: "QVector3D"; read: "position"; write: "setPosition" }
        Property {
            name: "positionVariation"
            type: "QVector3D"
            read: "positionVariation"
            write: "setPositionVariation"
        }
        Property { name: "normalized"; type: "bool"; read: "normalized"; write: "setNormalized" }
        Property { name: "magnitude"; type: "float"; read: "magnitude"; write: "setMagnitude" }
        Property {
            name: "magnitudeVariation"
            type: "float"
            read: "magnitudeVariation"
            write: "setMagnitudeVariation"
        }
        Signal { name: "magnitudeChangedVariation" }
        Method { name: "positionVariation"; type: "QVector3D" }
        Method {
            name: "setPositionVariation"
            Parameter { name: "positionVariation"; type: "QVector3D" }
        }
        Method {
            name: "setNormalized"
            Parameter { name: "normalized"; type: "bool" }
        }
        Method {
            name: "setMagnitude"
            Parameter { name: "magnitude"; type: "float" }
        }
        Method {
            name: "setMagnitudeVariation"
            Parameter { name: "magnitudeVariation"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dparticletrailemitter_p.h"
        name: "QQuick3DParticleTrailEmitter"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleEmitter"
        exports: ["QtQuick3D.Particles3D/TrailEmitter3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property {
            name: "follow"
            type: "QQuick3DParticle"
            isPointer: true
            read: "follow"
            write: "setFollow"
        }
        Method {
            name: "setFollow"
            Parameter { name: "follow"; type: "QQuick3DParticle"; isPointer: true }
        }
        Method {
            name: "burst"
            Parameter { name: "count"; type: "int" }
        }
    }
    Component {
        file: "private/qquick3dparticlevectordirection_p.h"
        name: "QQuick3DParticleVectorDirection"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleDirection"
        exports: ["QtQuick3D.Particles3D/VectorDirection3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property { name: "direction"; type: "QVector3D"; read: "direction"; write: "setDirection" }
        Property {
            name: "directionVariation"
            type: "QVector3D"
            read: "directionVariation"
            write: "setDirectionVariation"
        }
        Method {
            name: "setDirection"
            Parameter { name: "direction"; type: "QVector3D" }
        }
        Method {
            name: "setDirectionVariation"
            Parameter { name: "directionVariation"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dparticlewander_p.h"
        name: "QQuick3DParticleWander"
        accessSemantics: "reference"
        prototype: "QQuick3DParticleAffector"
        exports: ["QtQuick3D.Particles3D/Wander3D 6.1"]
        exportMetaObjectRevisions: [1537]
        Property {
            name: "globalAmount"
            type: "QVector3D"
            read: "globalAmount"
            write: "setGlobalAmount"
        }
        Property { name: "globalPace"; type: "QVector3D"; read: "globalPace"; write: "setGlobalPace" }
        Property {
            name: "globalPaceStart"
            type: "QVector3D"
            read: "globalPaceStart"
            write: "setGlobalPaceStart"
        }
        Property {
            name: "uniqueAmount"
            type: "QVector3D"
            read: "uniqueAmount"
            write: "setUniqueAmount"
        }
        Property { name: "uniquePace"; type: "QVector3D"; read: "uniquePace"; write: "setUniquePace" }
        Property {
            name: "uniqueAmountVariation"
            type: "float"
            read: "uniqueAmountVariation"
            write: "setUniqueAmountVariation"
        }
        Property {
            name: "uniquePaceVariation"
            type: "float"
            read: "uniquePaceVariation"
            write: "setUniquePaceVariation"
        }
        Method {
            name: "setGlobalAmount"
            Parameter { name: "globalAmount"; type: "QVector3D" }
        }
        Method {
            name: "setGlobalPace"
            Parameter { name: "globalPace"; type: "QVector3D" }
        }
        Method {
            name: "setGlobalPaceStart"
            Parameter { name: "globalPaceStart"; type: "QVector3D" }
        }
        Method {
            name: "setUniqueAmount"
            Parameter { name: "uniqueAmount"; type: "QVector3D" }
        }
        Method {
            name: "setUniquePace"
            Parameter { name: "uniquePace"; type: "QVector3D" }
        }
        Method {
            name: "setUniqueAmountVariation"
            Parameter { name: "uniqueAmountVariation"; type: "float" }
        }
        Method {
            name: "setUniquePaceVariation"
            Parameter { name: "uniquePaceVariation"; type: "float" }
        }
    }
}
